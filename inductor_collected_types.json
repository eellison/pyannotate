[
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/async_compile.py",
    "line": 78,
    "func_name": "_compile_start",
    "type_comments": [
      "() -> None"
    ],
    "samples": 566
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/async_compile.py",
    "line": 84,
    "func_name": "_compile_end",
    "type_comments": [
      "() -> None"
    ],
    "samples": 155
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/async_compile.py",
    "line": 122,
    "func_name": "AsyncCompile.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 162
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/async_compile.py",
    "line": 170,
    "func_name": "AsyncCompile.triton",
    "type_comments": [
      "(str, str, str) -> torch._inductor.codecache.TritonFuture"
    ],
    "samples": 566
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/async_compile.py",
    "line": 243,
    "func_name": "AsyncCompile.wait",
    "type_comments": [
      "(Dict[str, Optional[str]]) -> pyannotate_runtime.collect_types.NoReturnType",
      "(Dict[str, Optional[str]]) -> None"
    ],
    "samples": 162
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/autoheuristic/autoheuristic.py",
    "line": 43,
    "func_name": "_Feedback",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/autoheuristic/autoheuristic.py",
    "line": 55,
    "func_name": "LocalFeedback",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/autoheuristic/autoheuristic.py",
    "line": 66,
    "func_name": "GlobalFeedback",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/autoheuristic/autoheuristic.py",
    "line": 78,
    "func_name": "InconsistentMetadata",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/autoheuristic/autoheuristic.py",
    "line": 87,
    "func_name": "AutoHeuristic",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/autoheuristic/autoheuristic_utils.py",
    "line": 13,
    "func_name": "AHFeature",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/autoheuristic/autoheuristic_utils.py",
    "line": 25,
    "func_name": "AHOperation",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/autoheuristic/autoheuristic_utils.py",
    "line": 45,
    "func_name": "AHContext",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/autoheuristic/autoheuristic_utils.py",
    "line": 90,
    "func_name": "AHMetadata",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/autoheuristic/learned_heuristic_controller.py",
    "line": 47,
    "func_name": "LearnedHeuristicController",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/autoheuristic/learnedheuristic_interface.py",
    "line": 10,
    "func_name": "LearnedHeuristic",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/bounds.py",
    "line": 19,
    "func_name": "BoundVars",
    "type_comments": [
      "() -> None"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/bounds.py",
    "line": 29,
    "func_name": "BoundVars.__init__",
    "type_comments": [
      "(torch._inductor.ir.LoopBody) -> None"
    ],
    "samples": 1466
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/bounds.py",
    "line": 30,
    "func_name": "upper_bound",
    "type_comments": [
      "(sympy.core.mul.Mul) -> torch.utils._sympy.numbers.IntInfinity",
      "(sympy.core.symbol.Symbol) -> torch.utils._sympy.numbers.IntInfinity",
      "(sympy.core.add.Add) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.mul.Mul) -> sympy.core.numbers.Integer",
      "(sympy.core.symbol.Symbol) -> sympy.core.numbers.Integer",
      "(torch.utils._sympy.functions.FloorDiv) -> sympy.core.numbers.Integer"
    ],
    "samples": 1881
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/bounds.py",
    "line": 57,
    "func_name": "get_bounds",
    "type_comments": [
      "() -> Dict[torch.fx.node.Node, torch.utils._sympy.value_ranges.ValueRanges]",
      "() -> Dict[torch.fx.node.Node, Union[torch.utils._sympy.value_ranges.ValueRangeAnalysis, torch.utils._sympy.value_ranges.ValueRanges]]",
      "() -> Dict[torch.fx.node.Node, Optional[Union[torch.utils._sympy.value_ranges.ValueRangeAnalysis, torch.utils._sympy.value_ranges.ValueRanges]]]"
    ],
    "samples": 1461
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/bounds.py",
    "line": 76,
    "func_name": "BoundVars.swap_submodules",
    "type_comments": [
      "(Dict[str, Union[function, method]]) -> Dict[str, Union[function, functools.partial, method]]",
      "(Dict[str, method]) -> Dict[str, method]",
      "(Dict[str, Union[function, method]]) -> Dict[str, Union[functools.partial, method]]",
      "(Dict[str, Union[function, method]]) -> Dict[str, Union[function, method]]"
    ],
    "samples": 1463
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/bounds.py",
    "line": 92,
    "func_name": "make_fn",
    "type_comments": [
      "(torch._inductor.ir.LoopBodyBlock) -> function"
    ],
    "samples": 210
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/bounds.py",
    "line": 109,
    "func_name": "BoundVars.masked_subblock",
    "type_comments": [
      "(torch._inductor.ir.LoopBodyBlock, Dict[torch.fx.node.Node, torch.utils._sympy.value_ranges.ValueRanges], torch.utils._sympy.value_ranges.ValueRanges, float, Dict[str, Union[function, method]]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(torch._inductor.ir.LoopBodyBlock, Dict[torch.fx.node.Node, torch.utils._sympy.value_ranges.ValueRanges], torch.utils._sympy.value_ranges.ValueRanges, float, Dict[str, Union[function, method]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.LoopBodyBlock, Dict[torch.fx.node.Node, torch.utils._sympy.value_ranges.ValueRanges], torch.utils._sympy.value_ranges.ValueRanges, int, Dict[str, Union[function, method]]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(torch._inductor.ir.LoopBodyBlock, Dict[torch.fx.node.Node, Union[torch.utils._sympy.value_ranges.ValueRangeAnalysis, torch.utils._sympy.value_ranges.ValueRanges]], torch.utils._sympy.value_ranges.ValueRanges, float, Dict[str, Union[function, method]]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(torch._inductor.ir.LoopBodyBlock, Dict[torch.fx.node.Node, torch.utils._sympy.value_ranges.ValueRanges], torch.utils._sympy.value_ranges.ValueRanges, float, Dict[str, Union[function, functools.partial, method]]) -> torch.utils._sympy.value_ranges.ValueRanges"
    ],
    "samples": 211
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/bounds.py",
    "line": 130,
    "func_name": "BoundVars.get_index",
    "type_comments": [
      "(str) -> torch.utils._sympy.value_ranges.ValueRanges"
    ],
    "samples": 3896
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 168,
    "func_name": "get_system",
    "type_comments": [
      "() -> Dict[str, Union[Dict[str, str], str]]"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 202,
    "func_name": "get_local_cache_path",
    "type_comments": [
      "() -> pathlib.PosixPath"
    ],
    "samples": 19
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 217,
    "func_name": "CacheBase.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 76
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 220,
    "func_name": "CacheBase.get_local_cache",
    "type_comments": [
      "() -> Dict[str, Union[bool, float]]"
    ],
    "samples": 102
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 238,
    "func_name": "LocalCache.lookup",
    "type_comments": [
      "(*str) -> bool",
      "(*str) -> None",
      "(*str) -> float"
    ],
    "samples": 96
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 360,
    "func_name": "sha256_hash",
    "type_comments": [
      "(bytes) -> str"
    ],
    "samples": 2602
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 365,
    "func_name": "code_hash",
    "type_comments": [
      "(str, str) -> str"
    ],
    "samples": 1055
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 372,
    "func_name": "get_path",
    "type_comments": [
      "(str, str, str) -> Tuple[str, str, str]"
    ],
    "samples": 743
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 386,
    "func_name": "get_hash",
    "type_comments": [
      "(str, str, str) -> str"
    ],
    "samples": 616
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 394,
    "func_name": "write",
    "type_comments": [
      "(str, str, str, str, str) -> Tuple[str, str]"
    ],
    "samples": 616
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 418,
    "func_name": "write_atomic",
    "type_comments": [
      "(str, bytes, bool) -> None",
      "(str, str, bool) -> None"
    ],
    "samples": 603
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 451,
    "func_name": "extract_tensor_metadata_for_cache_key",
    "type_comments": [
      "(Dict[torch.device, torch.device], torch._subclasses.fake_tensor.FakeTensor) -> torch._subclasses.fake_tensor.TensorMetadata",
      "(Dict, torch._subclasses.fake_tensor.FakeTensor) -> torch._subclasses.fake_tensor.TensorMetadata",
      "(Dict, torch.Tensor) -> torch._subclasses.fake_tensor.TensorMetadata",
      "(Dict[torch.device, torch.device], torch.Tensor) -> torch._subclasses.fake_tensor.TensorMetadata"
    ],
    "samples": 2589
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 474,
    "func_name": "_reduce_fake_tensor",
    "type_comments": [
      "(Dict[torch.device, torch.device], torch._subclasses.fake_tensor.FakeTensor) -> Tuple[function, Tuple[torch._subclasses.fake_tensor.TensorMetadata]]",
      "(Dict, torch._subclasses.fake_tensor.FakeTensor) -> Tuple[function, Tuple[torch._subclasses.fake_tensor.TensorMetadata]]"
    ],
    "samples": 1893
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 551,
    "func_name": "dumps",
    "type_comments": [
      "(float) -> bytes",
      "(Dict) -> bytes",
      "(str) -> bytes",
      "(Set[str]) -> bytes",
      "(torch.fx.GraphModule) -> bytes",
      "(None) -> bytes",
      "(bool) -> bytes",
      "(torch._inductor.codecache.FxGraphHashDetails) -> bytes",
      "(torch.SymInt) -> bytes",
      "(List[str]) -> bytes",
      "(List) -> bytes",
      "(torch._subclasses.fake_tensor.FakeTensor) -> bytes",
      "(int) -> bytes",
      "(Dict[str, None]) -> bytes",
      "(Tuple[bool, bool, bool]) -> bytes",
      "(Dict[str, str]) -> bytes"
    ],
    "samples": 1997
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 569,
    "func_name": "get_hash",
    "type_comments": [
      "(Dict) -> str",
      "(str) -> str",
      "(float) -> str",
      "(torch.SymInt) -> str",
      "(Set[str]) -> str",
      "(None) -> str",
      "(torch.fx.GraphModule) -> str",
      "(bool) -> str",
      "(torch._inductor.codecache.FxGraphHashDetails) -> str",
      "(torch._subclasses.fake_tensor.FakeTensor) -> str",
      "(int) -> str",
      "(Tuple[bool, bool, bool]) -> str",
      "(List) -> str",
      "(Dict[str, None]) -> str",
      "(Dict[str, str]) -> str",
      "(List[str]) -> str"
    ],
    "samples": 1997
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 578,
    "func_name": "debug_lines",
    "type_comments": [
      "(torch._inductor.codecache.FxGraphHashDetails) -> List[str]"
    ],
    "samples": 154
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 586,
    "func_name": "get_str",
    "type_comments": [
      "(float) -> str",
      "(torch.SymInt) -> str",
      "(Tuple[None, str]) -> str",
      "(torch._subclasses.fake_tensor.FakeTensor) -> str",
      "(int) -> str",
      "(Dict[str, None]) -> str",
      "(Dict[str, str]) -> str",
      "(torch._inductor.utils.BoxedBool) -> str",
      "(Dict) -> str",
      "(None) -> str",
      "(bytes) -> str",
      "(Dict[str, Union[bool, float, int]]) -> str",
      "(str) -> str",
      "(torch.fx.GraphModule) -> str",
      "(Dict[str, Dict]) -> str",
      "(Tuple[bool, bool, bool]) -> str",
      "(List[str]) -> str",
      "(Set[str]) -> str",
      "(bool) -> str"
    ],
    "samples": 1996
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 613,
    "func_name": "build_code_hash",
    "type_comments": [
      "(List[str], str, _hashlib.HASH) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[str], str, _hashlib.HASH) -> None"
    ],
    "samples": 414
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 627,
    "func_name": "torch_key",
    "type_comments": [
      "() -> bytes"
    ],
    "samples": 46
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 634,
    "func_name": "get_code_hash",
    "type_comments": [
      "(str) -> bytes"
    ],
    "samples": 46
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 693,
    "func_name": "FxGraphHashDetails.__init__",
    "type_comments": [
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], Dict[str, Union[List[int], bool, int, torch._inductor.utils.BoxedBool]], List[int]) -> None",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], Dict[str, Union[List, bool, int, torch._inductor.utils.BoxedBool]], List[int]) -> None",
      "(torch.fx.GraphModule, List[torch.SymInt], Dict[str, Union[List[int], bool, int, torch._inductor.utils.BoxedBool]], List[int]) -> None",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], Dict[str, Union[List, bool, int, torch._inductor.utils.BoxedBool]], List[int]) -> None",
      "(torch.fx.GraphModule, List[torch.SymInt], Dict[str, Union[List, bool, int, torch._inductor.utils.BoxedBool]], List) -> None",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], Dict[str, Union[List[int], bool, int, torch._inductor.utils.BoxedBool]], List) -> None",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], Dict[str, Union[List[int], bool, int, torch._inductor.utils.BoxedBool]], List[int]) -> None"
    ],
    "samples": 154
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 736,
    "func_name": "FxGraphHashDetails.debug_lines",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 154
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 745,
    "func_name": "compiled_fx_graph_hash",
    "type_comments": [
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], Dict[str, Union[List, bool, int, torch._inductor.utils.BoxedBool]], List[int]) -> Tuple[str, List[str]]",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], Dict[str, Union[List[int], bool, int, torch._inductor.utils.BoxedBool]], List) -> Tuple[str, List[str]]",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], Dict[str, Union[List[int], bool, int, torch._inductor.utils.BoxedBool]], List[int]) -> Tuple[str, List[str]]",
      "(torch.fx.GraphModule, List[torch.SymInt], Dict[str, Union[List[int], bool, int, torch._inductor.utils.BoxedBool]], List[int]) -> Tuple[str, List[str]]",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], Dict[str, Union[List, bool, int, torch._inductor.utils.BoxedBool]], List[int]) -> Tuple[str, List[str]]",
      "(torch.fx.GraphModule, List[torch.SymInt], Dict[str, Union[List, bool, int, torch._inductor.utils.BoxedBool]], List) -> Tuple[str, List[str]]",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], Dict[str, Union[List[int], bool, int, torch._inductor.utils.BoxedBool]], List[int]) -> Tuple[str, List[str]]"
    ],
    "samples": 154
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 794,
    "func_name": "_get_tmp_dir",
    "type_comments": [
      "() -> str"
    ],
    "samples": 280
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 801,
    "func_name": "_get_tmp_dir_for_key",
    "type_comments": [
      "(str) -> str"
    ],
    "samples": 280
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 808,
    "func_name": "_filter_backed_symints",
    "type_comments": [
      "(List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]]) -> List[torch.SymInt]",
      "(List[torch._subclasses.fake_tensor.FakeTensor]) -> List",
      "(List[torch.SymInt]) -> List[torch.SymInt]",
      "(List[torch._subclasses.fake_tensor.FakeTensor]) -> List[torch.SymInt]"
    ],
    "samples": 280
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 816,
    "func_name": "_get_shape_env",
    "type_comments": [
      "() -> torch.fx.experimental.symbolic_shapes.ShapeEnv"
    ],
    "samples": 405
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 826,
    "func_name": "_lookup_graph",
    "type_comments": [
      "(str, List[torch.SymInt], bool, None) -> None",
      "(str, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], bool, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(str, List[torch._subclasses.fake_tensor.FakeTensor], bool, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(str, List[torch._subclasses.fake_tensor.FakeTensor], bool, None) -> None",
      "(str, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], bool, None) -> None"
    ],
    "samples": 154
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 843,
    "func_name": "iterate_over_candidates",
    "type_comments": [
      "() -> Iterator[torch._inductor.codecache.CompiledFxGraph]",
      "() -> pyannotate_runtime.collect_types.NoReturnType",
      "() -> Iterator"
    ],
    "samples": 176
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 958,
    "func_name": "_save_graph",
    "type_comments": [
      "(str, torch._inductor.codecache.CompiledFxGraph, List[torch.SymInt], int, bool, None) -> None",
      "(str, torch._inductor.codecache.CompiledFxGraph, List[torch._subclasses.fake_tensor.FakeTensor], int, bool, None) -> None",
      "(str, torch._inductor.codecache.CompiledFxGraph, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], int, bool, None) -> None"
    ],
    "samples": 126
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 1026,
    "func_name": "_check_can_cache",
    "type_comments": [
      "(torch.fx.GraphModule) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch.fx.GraphModule) -> None"
    ],
    "samples": 182
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 1053,
    "func_name": "load",
    "type_comments": [
      "(function, torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], Dict[str, Union[List, bool, int, torch._inductor.utils.BoxedBool]], List[int], bool, bool) -> torch._inductor.codecache.CompiledFxGraph",
      "(function, torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], Dict[str, Union[List[int], bool, int, torch._inductor.utils.BoxedBool]], List[int], bool, bool) -> torch._inductor.codecache.CompiledFxGraph",
      "(function, torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], Dict[str, Union[List, bool, int, torch._inductor.utils.BoxedBool]], List[int], bool, bool) -> torch._inductor.codecache.CompiledFxGraph",
      "(function, torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], Dict[str, Union[List[int], bool, int, torch._inductor.utils.BoxedBool]], List[int], bool, bool) -> pyannotate_runtime.collect_types.NoReturnType",
      "(function, torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], Dict[str, Union[List[int], bool, int, torch._inductor.utils.BoxedBool]], List[int], bool, bool) -> torch._inductor.codecache.CompiledFxGraph",
      "(function, torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], Dict[str, Union[List, bool, int, torch._inductor.utils.BoxedBool]], List[int], bool, bool) -> pyannotate_runtime.collect_types.NoReturnType",
      "(function, torch.fx.GraphModule, List[torch.SymInt], Dict[str, Union[List, bool, int, torch._inductor.utils.BoxedBool]], List, bool, bool) -> torch._inductor.codecache.CompiledFxGraph",
      "(function, torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], Dict[str, Union[List, bool, int, torch._inductor.utils.BoxedBool]], List[int], bool, bool) -> pyannotate_runtime.collect_types.NoReturnType",
      "(function, torch.fx.GraphModule, List[torch.SymInt], Dict[str, Union[List[int], bool, int, torch._inductor.utils.BoxedBool]], List[int], bool, bool) -> torch._inductor.codecache.CompiledFxGraph",
      "(function, torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], Dict[str, Union[List[int], bool, int, torch._inductor.utils.BoxedBool]], List, bool, bool) -> torch._inductor.codecache.CompiledFxGraph",
      "(function, torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], Dict[str, Union[List[int], bool, int, torch._inductor.utils.BoxedBool]], List[int], bool, bool) -> pyannotate_runtime.collect_types.NoReturnType"
    ],
    "samples": 182
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 1184,
    "func_name": "CompiledFxGraph.__init__",
    "type_comments": [
      "(function, torch._inductor.graph.GraphLowering, List[Union[Tuple[str, str, str, str, str], Tuple[str, str, str, str], Tuple[str, str, str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Union[Tuple[], Tuple[str, str, str, str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Tuple[str]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Optional[Tuple[]]], str, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Union[Tuple[str, str, str], Tuple[str, str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Union[Tuple[str, str, str, str], Tuple[str, str, str], Tuple[str, str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Union[Tuple[str, str, str, str], Tuple[str, str, str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Union[Tuple[str, str, str, str], Tuple[str, str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Tuple[str, str]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Union[Tuple[str, str, str, str], Tuple[str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Tuple[str, str, str, str]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Union[Tuple[str, str, str], Tuple[str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Optional[Tuple[str, str, str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Union[Tuple[str, str, str, str, str], Tuple[str, str, str, str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Optional[Union[Tuple[str, str, str], Tuple[str, str], Tuple[str]]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Union[Tuple[str, str], Tuple[str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Optional[Union[Tuple[], Tuple[str, str], Tuple[str]]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Tuple[]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Optional[Tuple[str, str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Optional[Union[Tuple[str, str, str], Tuple[str, str]]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Tuple[str, str, str]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Optional[Tuple[str, str, str, str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Union[Tuple[], Tuple[str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List, None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Union[Tuple[], Tuple[str, str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None",
      "(function, torch._inductor.graph.GraphLowering, List[Union[Tuple[str, str, str], Tuple[str, str], Tuple[str]]], None, torch._inductor.metrics.CachedMetricsDeltas, collections.Counter) -> None"
    ],
    "samples": 153
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 2986,
    "func_name": "write",
    "type_comments": [
      "(str, str) -> Tuple[str, str]"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 2990,
    "func_name": "load",
    "type_comments": [
      "(str, str, None, None) -> module"
    ],
    "samples": 566
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 3001,
    "func_name": "load_by_key_path",
    "type_comments": [
      "(str, str, None, None) -> module",
      "(str, str, List[Union[Tuple[int, None], Tuple[int, str]]], Dict[str, torch.nn.parameter.Parameter]) -> pyannotate_runtime.collect_types.UnknownType",
      "(str, str, List[Tuple[int, None]], Dict) -> pyannotate_runtime.collect_types.UnknownType",
      "(str, str, List[Tuple[int, str]], Dict) -> pyannotate_runtime.collect_types.UnknownType",
      "(str, str, List[Union[Tuple[int, None], Tuple[int, str]]], Dict[str, torch.Tensor]) -> pyannotate_runtime.collect_types.UnknownType",
      "(str, str, List[Tuple[int, str]], Dict) -> module",
      "(str, str, List[Union[Tuple[int, None], Tuple[int, str]]], Dict) -> pyannotate_runtime.collect_types.UnknownType",
      "(str, str, List[Union[Tuple[int, None], Tuple[int, str]]], Dict) -> module",
      "(str, str, List[Tuple[int, str]], Dict[str, Union[torch.Tensor, torch.nn.parameter.Parameter]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(str, str, List[Tuple[int, str]], Dict[str, torch.Tensor]) -> pyannotate_runtime.collect_types.UnknownType",
      "(str, str, List[Tuple[int, str]], Dict[str, torch.nn.parameter.Parameter]) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 632
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 3060,
    "func_name": "load",
    "type_comments": [
      "(str, str) -> torch._inductor.runtime.triton_heuristics.CachingAutotuner"
    ],
    "samples": 566
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 3453,
    "func_name": "TritonFuture.__init__",
    "type_comments": [
      "(torch._inductor.runtime.triton_heuristics.CachingAutotuner, concurrent.futures._base.Future) -> None"
    ],
    "samples": 566
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 3462,
    "func_name": "TritonFuture.result",
    "type_comments": [
      "() -> torch._inductor.runtime.triton_heuristics.CachingAutotuner",
      "() -> pyannotate_runtime.collect_types.NoReturnType"
    ],
    "samples": 563
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 136,
    "func_name": "register_backend_for_device",
    "type_comments": [
      "(str, function, type, type) -> None",
      "(str, type, type, type) -> None"
    ],
    "samples": 180
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 160,
    "func_name": "get_backend_features",
    "type_comments": [
      "(str) -> Dict[torch._inductor.codegen.common.BackendFeature, None]"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 178,
    "func_name": "get_scheduling_for_device",
    "type_comments": [
      "(str) -> function",
      "(str) -> None"
    ],
    "samples": 446
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 182,
    "func_name": "get_wrapper_codegen_for_device",
    "type_comments": [
      "(str, bool) -> type"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 194,
    "func_name": "init_backend_registration",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 248,
    "func_name": "index_prevent_reordering",
    "type_comments": [
      "(List[sympy.core.mul.Mul], List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.add.Add, sympy.core.mul.Mul]]",
      "(List[sympy.core.mul.Mul], List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.add.Add, sympy.core.mul.Mul]]",
      "(List[sympy.core.numbers.Zero], List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]) -> List[sympy.core.symbol.Symbol]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], List[Union[int, torch.utils._sympy.functions.FloorDiv]]) -> List[sympy.core.add.Add]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]) -> List[Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], List[sympy.core.mul.Mul]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.add.Add], List, List) -> List[sympy.core.add.Add]",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.Zero]], List, List) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(List[sympy.core.numbers.Zero], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]) -> List[sympy.core.add.Add]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.mul.Mul]) -> List[sympy.core.add.Add]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]) -> List[sympy.core.add.Add]",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.add.Add, sympy.core.mul.Mul, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.add.Add, sympy.core.mul.Mul, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol], List[int]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[sympy.core.add.Add]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]) -> List[sympy.core.add.Add]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.mul.Mul], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer]) -> List[Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> List[sympy.core.add.Add]",
      "(List[sympy.core.add.Add], List, List) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> List[sympy.core.add.Add]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], List, List) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.symbol.Symbol]]) -> List[sympy.core.add.Add]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[sympy.core.add.Add]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol], List[sympy.core.mul.Mul]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], List[int]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]) -> List[sympy.core.add.Add]",
      "(List[sympy.core.mul.Mul], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]) -> List[Union[sympy.core.add.Add, sympy.core.mul.Mul]]",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.mul.Mul], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.add.Add, sympy.core.mul.Mul]]",
      "(List[Union[sympy.core.add.Add, sympy.core.mul.Mul]], List[sympy.core.symbol.Symbol], List[torch.utils._sympy.functions.FloorDiv]) -> List[Union[sympy.core.add.Add, sympy.core.mul.Mul]]",
      "(List[Union[sympy.core.add.Add, sympy.functions.elementary.complexes.Abs]], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]) -> List[Union[sympy.core.add.Add, sympy.functions.elementary.complexes.Abs]]",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], List, List) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[sympy.core.add.Add]",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.add.Add, sympy.core.mul.Mul]], List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.add.Add, sympy.core.mul.Mul]]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol], List, List) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[int]) -> List[sympy.core.symbol.Symbol]",
      "(List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.numbers.Zero], List, Tuple[]) -> List[sympy.core.numbers.Zero]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List, List) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer]) -> List[sympy.core.symbol.Symbol]",
      "(List[sympy.core.numbers.Zero], List, List) -> List[sympy.core.numbers.Zero]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> List[sympy.core.add.Add]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[sympy.core.add.Add]",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]], List, List) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[sympy.core.add.Add]",
      "(List[sympy.core.numbers.Zero], List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul]) -> List[sympy.core.symbol.Symbol]",
      "(List[sympy.core.add.Add], List[sympy.core.symbol.Symbol], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> List[sympy.core.add.Add]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List, List) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.add.Add, sympy.core.mul.Mul]], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]) -> List[Union[sympy.core.add.Add, sympy.core.mul.Mul]]"
    ],
    "samples": 7290
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 255,
    "func_name": "register_device_op_overrides",
    "type_comments": [
      "(str, torch._inductor.codegen.xpu.device_op_overrides.XPUDeviceOpOverrides) -> None",
      "(str, torch._inductor.codegen.cuda.device_op_overrides.CUDADeviceOpOverrides) -> None"
    ],
    "samples": 120
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 259,
    "func_name": "get_device_op_overrides",
    "type_comments": [
      "(str) -> torch._inductor.codegen.cuda.device_op_overrides.CUDADeviceOpOverrides",
      "(str) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 437,
    "func_name": "paren",
    "type_comments": [
      "(str) -> str"
    ],
    "samples": 6613
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 439,
    "func_name": "all_in_parens",
    "type_comments": [
      "(str) -> bool"
    ],
    "samples": 1916
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 468,
    "func_name": "ExprPrinter._print_Mul",
    "type_comments": [
      "(sympy.core.mul.Mul) -> str",
      "(sympy.core.mul.Mul) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 1889
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 471,
    "func_name": "ExprPrinter._print_Add",
    "type_comments": [
      "(sympy.core.add.Add) -> str",
      "(sympy.core.add.Add) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 1194
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 486,
    "func_name": "ExprPrinter._print_Identity",
    "type_comments": [
      "(torch.utils._sympy.functions.Identity) -> str"
    ],
    "samples": 130
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 573,
    "func_name": "ExprPrinter.doprint",
    "type_comments": [
      "(sympy.core.numbers.One, bool) -> str",
      "(int, bool) -> str",
      "(sympy.core.numbers.Zero, bool) -> str",
      "(torch.utils._sympy.functions.FloatTrueDiv, bool) -> str",
      "(torch._inductor.codegen.wrapper.SymbolicCallArg, bool) -> str",
      "(sympy.core.numbers.Integer, bool) -> str",
      "(torch.utils._sympy.functions.FloorDiv, bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.functions.elementary.complexes.Abs, bool) -> str",
      "(sympy.core.symbol.Symbol, bool) -> str",
      "(torch.utils._sympy.functions.ModularIndexing, bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.functions.elementary.miscellaneous.Min, bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.add.Add, bool) -> str",
      "(sympy.core.add.Add, bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.mul.Mul, bool) -> str"
    ],
    "samples": 12606
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 585,
    "func_name": "PythonPrinter._print_ModularIndexing",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing) -> str",
      "(torch.utils._sympy.functions.ModularIndexing) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 629
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 716,
    "func_name": "OpOverrides.__init__",
    "type_comments": [
      "(torch._inductor.ops_handler.MockHandler) -> None"
    ],
    "samples": 961
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 720,
    "func_name": "OpOverrides.__getattr__",
    "type_comments": [
      "(str) -> function"
    ],
    "samples": 3036
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1130,
    "func_name": "DeferredLine.__init__",
    "type_comments": [
      "(str, str) -> None"
    ],
    "samples": 8200
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1135,
    "func_name": "DeferredLine.__call__",
    "type_comments": [
      "() -> str",
      "() -> None"
    ],
    "samples": 1495
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1148,
    "func_name": "DeferredLine._new_line",
    "type_comments": [
      "(str) -> torch._inductor.codegen.common.DeferredLine"
    ],
    "samples": 7303
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1179,
    "func_name": "_lookup",
    "type_comments": [
      "(str, Dict[sympy.core.symbol.Symbol, str], sympy.core.symbol.Symbol) -> str",
      "(str, Dict, str) -> str",
      "(str, Dict, sympy.core.symbol.Symbol) -> str",
      "(str, Dict[str, str], str) -> str"
    ],
    "samples": 3336
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1186,
    "func_name": "KernelArgs.__init__",
    "type_comments": [
      "(None) -> None"
    ],
    "samples": 1164
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1208,
    "func_name": "KernelArgs._buffer_is_marked_removed",
    "type_comments": [
      "(str) -> bool",
      "(torch._inductor.codegen.common.InplacedBuffer) -> bool"
    ],
    "samples": 5469
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1211,
    "func_name": "KernelArgs.input",
    "type_comments": [
      "(str) -> str"
    ],
    "samples": 2251
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1223,
    "func_name": "KernelArgs.output",
    "type_comments": [
      "(str) -> str"
    ],
    "samples": 1468
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1231,
    "func_name": "KernelArgs.make_inplace",
    "type_comments": [
      "(str, str) -> None"
    ],
    "samples": 275
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1323,
    "func_name": "KernelArgs.python_argdefs",
    "type_comments": [
      "() -> Tuple[List[str], List[str], List[torch._inductor.codegen.common.TensorArg], List[torch.dtype]]",
      "() -> Tuple[List[str], List[Union[str, sympy.core.symbol.Symbol]], List[Union[torch._inductor.codegen.common.SizeArg, torch._inductor.codegen.common.TensorArg]], List[Union[sympy.core.assumptions.ManagedProperties, torch.dtype]]]",
      "() -> Tuple[List[str], List[Union[int, str]], List[Union[torch._inductor.codegen.common.SizeArg, torch._inductor.codegen.common.TensorArg]], List[Union[torch.dtype, type]]]"
    ],
    "samples": 1192
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1369,
    "func_name": "KernelArgs.aliases",
    "type_comments": [
      "() -> Iterator"
    ],
    "samples": 710
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1415,
    "func_name": "CSEVariable.__init__",
    "type_comments": [
      "(str, torch.utils._sympy.value_ranges.ValueRanges) -> None"
    ],
    "samples": 6691
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1421,
    "func_name": "CSEVariable.__str__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 13532
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1424,
    "func_name": "CSEVariable.__hash__",
    "type_comments": [
      "() -> int"
    ],
    "samples": 3989
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1455,
    "func_name": "CSE.__init__",
    "type_comments": [
      "(str, str, str, None, None, None, None) -> None"
    ],
    "samples": 1165
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1493,
    "func_name": "CSE.generate",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer, torch._inductor.codegen.triton.TritonCSEVariable, torch.utils._sympy.value_ranges.ValueRanges, bool, bool) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch._inductor.utils.IndentedBuffer, torch._inductor.virtualized.OpsValue, torch.utils._sympy.value_ranges.ValueRanges, bool, bool) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch._inductor.utils.IndentedBuffer, str, torch.utils._sympy.value_ranges.ValueRanges, bool, bool) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch._inductor.utils.IndentedBuffer, str, torch.utils._sympy.value_ranges.ValueRanges, bool, bool) -> torch._inductor.codegen.cpp.CppCSEVariable"
    ],
    "samples": 8512
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1541,
    "func_name": "CSE.newvar",
    "type_comments": [
      "(torch.utils._sympy.value_ranges.ValueRanges) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch.utils._sympy.value_ranges.ValueRanges) -> torch._inductor.codegen.cpp.CppCSEVariable"
    ],
    "samples": 6691
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1549,
    "func_name": "CodeGen.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 1193
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1553,
    "func_name": "CodeGen.__enter__",
    "type_comments": [
      "() -> torch._inductor.codegen.triton.TritonKernel",
      "() -> torch._inductor.codegen.cpp.CppVecKernel",
      "() -> torch._inductor.codegen.cpp.CppKernel"
    ],
    "samples": 961
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1557,
    "func_name": "CodeGen.__exit__",
    "type_comments": [
      "(None, None, None) -> None"
    ],
    "samples": 961
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1591,
    "func_name": "Kernel.__init__",
    "type_comments": [
      "(torch._inductor.codegen.common.KernelArgs, bool) -> None",
      "(None, bool) -> None"
    ],
    "samples": 1164
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1623,
    "func_name": "set_current_node",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> Iterator"
    ],
    "samples": 2447
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1767,
    "func_name": "Kernel.__enter__",
    "type_comments": [
      "() -> torch._inductor.codegen.triton.TritonKernel",
      "() -> torch._inductor.codegen.cpp.CppVecKernel",
      "() -> torch._inductor.codegen.cpp.CppKernel"
    ],
    "samples": 961
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1769,
    "func_name": "CSEProxy",
    "type_comments": [
      "() -> None"
    ],
    "samples": 961
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1773,
    "func_name": "__getattr__",
    "type_comments": [
      "(str) -> function"
    ],
    "samples": 5849
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1775,
    "func_name": "inner",
    "type_comments": [
      "(*Union[sympy.functions.elementary.miscellaneous.Min, torch.dtype]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[str, torch._inductor.codegen.triton.TritonCSEVariable]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[int, torch.dtype]) -> torch._inductor.codegen.cpp.CppCSEVariable",
      "(*torch._inductor.codegen.triton.TritonCSEVariable) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[sympy.functions.elementary.complexes.Abs, torch.dtype]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[sympy.core.numbers.Integer, torch.dtype]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[float, torch.dtype]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[bool, torch.dtype]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[int, torch._inductor.codegen.triton.TritonCSEVariable]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*torch._inductor.codegen.cpp.CppCSEVariable) -> torch._inductor.codegen.cpp.CppCSEVariable",
      "(*Union[int, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.ir.LoopBodyBlock]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[int, str]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[torch._inductor.codegen.triton.TritonCSEVariable, torch.dtype]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[sympy.core.mul.Mul, torch.dtype]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[int, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.ir.LoopBodyBlock]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[torch.dtype, torch.utils._sympy.functions.FloatTrueDiv]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[float, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.ir.LoopBodyBlock]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[float, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.ir.LoopBodyBlock]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[sympy.core.symbol.Symbol, torch.dtype]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[sympy.core.add.Add, torch.dtype]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[torch.dtype, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*torch._inductor.codegen.triton.TritonCSEVariable) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*Union[int, torch.dtype]) -> torch._inductor.codegen.triton.TritonCSEVariable"
    ],
    "samples": 5842
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1780,
    "func_name": "do_cse",
    "type_comments": [
      "(str) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str) -> torch._inductor.codegen.cpp.CppCSEVariable",
      "(torch._inductor.virtualized.OpsValue) -> torch._inductor.codegen.triton.TritonCSEVariable"
    ],
    "samples": 5849
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1791,
    "func_name": "_bound_variable",
    "type_comments": [
      "(str, *Union[torch._inductor.codegen.triton.TritonCSEVariable, torch.dtype]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[sympy.core.add.Add, torch.dtype]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[bool, torch.dtype]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[sympy.core.numbers.Integer, torch.dtype]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[sympy.functions.elementary.miscellaneous.Min, torch.dtype]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[int, str]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[sympy.core.mul.Mul, torch.dtype]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[torch.dtype, torch.utils._sympy.functions.FloatTrueDiv]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *torch._inductor.codegen.cpp.CppCSEVariable) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[int, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.ir.LoopBodyBlock]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *torch._inductor.codegen.triton.TritonCSEVariable) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[str, torch._inductor.codegen.triton.TritonCSEVariable]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[float, torch.dtype]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[torch.dtype, torch.utils._sympy.functions.ModularIndexing]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[int, torch._inductor.codegen.triton.TritonCSEVariable]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[sympy.functions.elementary.complexes.Abs, torch.dtype]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[int, torch.dtype]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[float, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.ir.LoopBodyBlock]) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(str, *Union[sympy.core.symbol.Symbol, torch.dtype]) -> torch.utils._sympy.value_ranges.ValueRanges"
    ],
    "samples": 5849
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1885,
    "func_name": "load",
    "type_comments": [
      "(str, sympy.core.symbol.Symbol) -> torch._inductor.codegen.cpp.CppCSEVariable",
      "(str, sympy.core.numbers.Zero) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, sympy.core.numbers.Integer) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, sympy.core.symbol.Symbol) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, torch.utils._sympy.functions.ModularIndexing) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, sympy.core.add.Add) -> torch._inductor.codegen.triton.TritonCSEVariable"
    ],
    "samples": 2724
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1903,
    "func_name": "store",
    "type_comments": [
      "(str, sympy.core.numbers.Zero, torch._inductor.codegen.triton.TritonCSEVariable, None) -> None",
      "(str, sympy.core.add.Add, torch._inductor.codegen.triton.TritonCSEVariable, None) -> None",
      "(str, sympy.core.numbers.Zero, torch._inductor.codegen.cpp.CppCSEVariable, None) -> None",
      "(str, sympy.core.add.Add, torch._inductor.codegen.triton.TritonCSEVariable, str) -> None",
      "(str, sympy.core.symbol.Symbol, torch._inductor.codegen.cpp.CppCSEVariable, None) -> None",
      "(str, sympy.core.symbol.Symbol, torch._inductor.codegen.triton.TritonCSEVariable, str) -> None",
      "(str, sympy.core.symbol.Symbol, torch._inductor.codegen.triton.TritonCSEVariable, None) -> None"
    ],
    "samples": 1290
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1918,
    "func_name": "store_reduction",
    "type_comments": [
      "(str, sympy.core.numbers.Zero, torch._inductor.codegen.triton.TritonCSEVariable) -> None",
      "(str, sympy.core.symbol.Symbol, torch._inductor.codegen.triton.TritonCSEVariable) -> None",
      "(str, sympy.core.add.Add, torch._inductor.codegen.triton.TritonCSEVariable) -> None"
    ],
    "samples": 413
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1929,
    "func_name": "reduction",
    "type_comments": [
      "(torch.dtype, torch.dtype, str, torch._inductor.codegen.triton.TritonCSEVariable) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch.dtype, torch.dtype, str, torch._inductor.codegen.triton.TritonCSEVariable) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.dtype, torch.dtype, str, torch._inductor.codegen.triton.TritonCSEVariable) -> Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable]",
      "(torch.dtype, torch.dtype, str, Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable]) -> Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable]"
    ],
    "samples": 429
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1996,
    "func_name": "Kernel.__exit__",
    "type_comments": [
      "(None, None, None) -> None"
    ],
    "samples": 961
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 2005,
    "func_name": "Kernel.rename_indexing",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing) -> torch.utils._sympy.functions.ModularIndexing",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(sympy.core.numbers.Zero) -> sympy.core.numbers.Zero",
      "(sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add) -> sympy.core.add.Add",
      "(sympy.functions.elementary.miscellaneous.Min) -> sympy.functions.elementary.miscellaneous.Min",
      "(sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.mul.Mul) -> sympy.core.mul.Mul",
      "(torch.utils._sympy.functions.FloorDiv) -> torch.utils._sympy.functions.FloorDiv",
      "(sympy.functions.elementary.complexes.Abs) -> sympy.functions.elementary.complexes.Abs",
      "(sympy.functions.elementary.miscellaneous.Max) -> sympy.functions.elementary.miscellaneous.Max"
    ],
    "samples": 4219
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp_wrapper_cpu.py",
    "line": 32,
    "func_name": "CppWrapperCpu",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp_wrapper_cuda.py",
    "line": 26,
    "func_name": "CppWrapperCuda",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda/cuda_cpp_scheduling.py",
    "line": 19,
    "func_name": "CUDACPPScheduling",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda/cuda_cpp_scheduling.py",
    "line": 28,
    "func_name": "CUDACPPScheduling.__init__",
    "type_comments": [
      "(None) -> None",
      "(torch._inductor.scheduler.Scheduler) -> None"
    ],
    "samples": 317
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda/cuda_cpp_scheduling.py",
    "line": 39,
    "func_name": "is_cuda_cpp_template",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode) -> bool"
    ],
    "samples": 681
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda/cuda_cpp_scheduling.py",
    "line": 45,
    "func_name": "CUDACPPScheduling.can_fuse_vertical",
    "type_comments": [
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> bool"
    ],
    "samples": 1431
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda/device_op_overrides.py",
    "line": 5,
    "func_name": "CUDADeviceOpOverrides",
    "type_comments": [
      "() -> None"
    ],
    "samples": 52
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda/device_op_overrides.py",
    "line": 6,
    "func_name": "CUDADeviceOpOverrides.import_get_raw_stream_as",
    "type_comments": [
      "(str) -> str"
    ],
    "samples": 150
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda/device_op_overrides.py",
    "line": 15,
    "func_name": "CUDADeviceOpOverrides.device_guard",
    "type_comments": [
      "(int) -> str"
    ],
    "samples": 136
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda_combined_scheduling.py",
    "line": 17,
    "func_name": "CUDACombinedScheduling",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda_combined_scheduling.py",
    "line": 34,
    "func_name": "CUDACombinedScheduling.get_backend_features",
    "type_comments": [
      "(torch.device) -> Dict[torch._inductor.codegen.common.BackendFeature, None]"
    ],
    "samples": 157
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda_combined_scheduling.py",
    "line": 44,
    "func_name": "CUDACombinedScheduling.can_fuse_vertical",
    "type_comments": [
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool"
    ],
    "samples": 1409
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda_combined_scheduling.py",
    "line": 49,
    "func_name": "CUDACombinedScheduling.can_fuse_horizontal",
    "type_comments": [
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool"
    ],
    "samples": 482
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda_combined_scheduling.py",
    "line": 57,
    "func_name": "CUDACombinedScheduling.group_fn",
    "type_comments": [
      "(Tuple[List[sympy.core.numbers.Integer], List]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]",
      "(Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.mul.Mul]",
      "(Tuple[List[sympy.core.numbers.Integer], List[sympy.core.mul.Mul]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.mul.Mul]",
      "(Tuple[List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[List, List[sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.numbers.One, sympy.core.symbol.Symbol]",
      "(Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List]) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.One]",
      "(Tuple[List[sympy.core.numbers.Integer], List[sympy.core.add.Add]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.add.Add]",
      "(Tuple[List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]",
      "(Tuple[List, List[sympy.core.mul.Mul]]) -> Tuple[sympy.core.numbers.One, sympy.core.mul.Mul]",
      "(Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]",
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.One]",
      "(Tuple[List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]]) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]",
      "(Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List]) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.One]",
      "(Tuple[List, List[sympy.core.numbers.Integer]]) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]",
      "(Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]",
      "(Tuple[List[sympy.core.mul.Mul], List]) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.One]",
      "(Tuple[List, List]) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.One]",
      "(Tuple[List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], List]) -> Tuple[sympy.core.add.Add, sympy.core.numbers.One]",
      "(Tuple[List[sympy.core.numbers.Integer], List[torch.utils._sympy.functions.FloorDiv]]) -> Tuple[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]"
    ],
    "samples": 1718
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda_combined_scheduling.py",
    "line": 80,
    "func_name": "CUDACombinedScheduling.codegen_node",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> None",
      "(torch._inductor.scheduler.FusedSchedulerNode) -> None"
    ],
    "samples": 709
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda_combined_scheduling.py",
    "line": 86,
    "func_name": "CUDACombinedScheduling.flush",
    "type_comments": [
      "() -> None"
    ],
    "samples": 630
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/halide.py",
    "line": 85,
    "func_name": "HalidePrinter",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/halide.py",
    "line": 237,
    "func_name": "HalideOverrides",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/halide.py",
    "line": 559,
    "func_name": "HalideCSEVariable",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/halide.py",
    "line": 593,
    "func_name": "DimensionInfo",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/halide.py",
    "line": 654,
    "func_name": "HalideKernel",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/halide.py",
    "line": 1640,
    "func_name": "HalideScheduling",
    "type_comments": [
      "() -> None"
    ],
    "samples": 59
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 26,
    "func_name": "LiveRange",
    "type_comments": [
      "() -> None"
    ],
    "samples": 52
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 51,
    "func_name": "LiveRanges",
    "type_comments": [
      "() -> None"
    ],
    "samples": 53
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 94,
    "func_name": "AllocationTreeNode",
    "type_comments": [
      "() -> None"
    ],
    "samples": 54
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 126,
    "func_name": "Allocation",
    "type_comments": [
      "() -> None"
    ],
    "samples": 50
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 184,
    "func_name": "Empty",
    "type_comments": [
      "() -> None"
    ],
    "samples": 48
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 206,
    "func_name": "MemorySplitProtocol",
    "type_comments": [
      "() -> None"
    ],
    "samples": 54
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 215,
    "func_name": "ClearCacheOnAllocateMixin",
    "type_comments": [
      "() -> None"
    ],
    "samples": 51
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 233,
    "func_name": "TemporalSplit",
    "type_comments": [
      "() -> None"
    ],
    "samples": 53
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 314,
    "func_name": "SpatialSplit",
    "type_comments": [
      "() -> None"
    ],
    "samples": 54
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 360,
    "func_name": "AllocationPool",
    "type_comments": [
      "() -> None"
    ],
    "samples": 52
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 440,
    "func_name": "AllocationPools",
    "type_comments": [
      "() -> None"
    ],
    "samples": 53
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 503,
    "func_name": "BufferGroup",
    "type_comments": [
      "() -> None"
    ],
    "samples": 56
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 547,
    "func_name": "PoolMemoryPlanningLine",
    "type_comments": [
      "() -> None"
    ],
    "samples": 52
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 559,
    "func_name": "AllocFromPoolLine",
    "type_comments": [
      "() -> None"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 589,
    "func_name": "DeallocFromPoolLine",
    "type_comments": [
      "() -> None"
    ],
    "samples": 57
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/memory_planning.py",
    "line": 601,
    "func_name": "MemoryPlanner",
    "type_comments": [
      "() -> None"
    ],
    "samples": 57
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/multi_kernel.py",
    "line": 82,
    "func_name": "MultiKernelState.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 166
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/rocm/rocm_cpp_scheduling.py",
    "line": 17,
    "func_name": "ROCmCPPScheduling",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/rocm/rocm_cpp_scheduling.py",
    "line": 26,
    "func_name": "ROCmCPPScheduling.__init__",
    "type_comments": [
      "(None) -> None",
      "(torch._inductor.scheduler.Scheduler) -> None"
    ],
    "samples": 299
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 83,
    "func_name": "IterationRanges.__init__",
    "type_comments": [
      "(str, List, Dict, sympy.core.symbol.Symbol, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.numbers.Integer, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List, Dict, torch.utils._sympy.functions.FloorDiv, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.numbers.One, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List, Dict, sympy.core.numbers.One, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.mul.Mul, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List, Dict, sympy.core.numbers.One, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.symbol.Symbol, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List[sympy.core.symbol.Symbol], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], sympy.core.numbers.Integer, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.Integer, sympy.core.numbers.Integer, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List[sympy.core.symbol.Symbol], Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul], sympy.core.symbol.Symbol, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.numbers.Integer, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List, Dict, sympy.core.symbol.Symbol, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.numbers.One, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List, Dict, sympy.core.numbers.Integer, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.numbers.Integer, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List, Dict, sympy.core.numbers.One, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, torch.utils._sympy.functions.FloorDiv, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List[sympy.core.symbol.Symbol], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], sympy.core.mul.Mul, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.numbers.Integer, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List[sympy.core.symbol.Symbol], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], sympy.core.numbers.Integer, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.numbers.Integer, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List[sympy.core.symbol.Symbol], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], sympy.core.numbers.Integer, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.Integer, sympy.core.mul.Mul, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List[sympy.core.symbol.Symbol], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], sympy.core.numbers.One, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.mul.Mul, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List[sympy.core.symbol.Symbol], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], sympy.core.numbers.One, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.mul.Mul, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List[sympy.core.symbol.Symbol], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], sympy.core.numbers.Integer, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.Integer, sympy.core.symbol.Symbol, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List, Dict, sympy.core.numbers.Integer, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.numbers.One, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List[sympy.core.symbol.Symbol], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], sympy.core.numbers.One, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.numbers.Integer, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List[sympy.core.symbol.Symbol], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], sympy.core.mul.Mul, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.Integer, sympy.core.numbers.Integer, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List, Dict, sympy.core.numbers.One, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.numbers.One, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List, Dict, sympy.core.numbers.One, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.numbers.Integer, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List[sympy.core.symbol.Symbol], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], sympy.core.numbers.Integer, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.Integer, sympy.core.symbol.Symbol, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List, Dict, sympy.core.add.Add, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.numbers.Integer, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List, Dict, sympy.core.mul.Mul, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.numbers.One, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, List, Dict, sympy.core.mul.Mul, str, torch._inductor.codegen.triton.TritonKernel, sympy.core.numbers.One, sympy.core.numbers.Integer, torch._inductor.codegen.simd.IterationRangesRoot) -> None"
    ],
    "samples": 2315
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 107,
    "func_name": "IterationRanges.symbol",
    "type_comments": [
      "() -> sympy.core.symbol.Symbol"
    ],
    "samples": 6876
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 112,
    "func_name": "IterationRangesRoot.__init__",
    "type_comments": [
      "(str, sympy.core.numbers.One, str, int, torch._inductor.codegen.triton.TritonKernel, Dict, bool, int, int, bool) -> None",
      "(str, sympy.core.numbers.One, str, int, torch._inductor.codegen.triton.TritonKernel, Dict, bool, None, None, bool) -> None",
      "(str, sympy.core.mul.Mul, str, int, torch._inductor.codegen.triton.TritonKernel, Dict, bool, int, int, bool) -> None",
      "(str, sympy.core.symbol.Symbol, str, int, torch._inductor.codegen.triton.TritonKernel, Dict, bool, int, None, bool) -> None",
      "(str, sympy.core.numbers.Integer, str, int, torch._inductor.codegen.triton.TritonKernel, Dict[str, str], bool, int, int, bool) -> None",
      "(str, sympy.core.numbers.One, str, int, torch._inductor.codegen.triton.TritonKernel, Dict[str, str], bool, None, None, bool) -> None",
      "(str, sympy.core.numbers.Integer, str, int, torch._inductor.codegen.triton.TritonKernel, Dict, bool, int, None, bool) -> None",
      "(str, sympy.core.symbol.Symbol, str, int, torch._inductor.codegen.triton.TritonKernel, Dict, bool, int, int, bool) -> None",
      "(str, sympy.core.numbers.Integer, str, int, torch._inductor.codegen.triton.TritonKernel, Dict, bool, int, int, bool) -> None",
      "(str, sympy.core.numbers.Integer, str, int, torch._inductor.codegen.triton.TritonKernel, Dict, bool, None, int, bool) -> None",
      "(str, sympy.core.symbol.Symbol, str, int, torch._inductor.codegen.triton.TritonKernel, Dict, bool, None, int, bool) -> None",
      "(str, sympy.core.numbers.One, str, int, torch._inductor.codegen.triton.TritonKernel, Dict[str, str], bool, int, int, bool) -> None",
      "(str, sympy.core.add.Add, str, int, torch._inductor.codegen.triton.TritonKernel, Dict, bool, int, int, bool) -> None",
      "(str, sympy.core.mul.Mul, str, int, torch._inductor.codegen.triton.TritonKernel, Dict, bool, None, int, bool) -> None",
      "(str, sympy.core.mul.Mul, str, int, torch._inductor.codegen.triton.TritonKernel, Dict, bool, int, None, bool) -> None",
      "(str, sympy.core.numbers.One, str, int, torch._inductor.codegen.triton.TritonKernel, Dict, bool, None, int, bool) -> None"
    ],
    "samples": 1446
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 162,
    "func_name": "IterationRangesRoot.index_sym",
    "type_comments": [
      "() -> sympy.core.symbol.Symbol"
    ],
    "samples": 3638
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 165,
    "func_name": "IterationRangesRoot.lookup",
    "type_comments": [
      "(sympy.core.numbers.One, torch.utils._sympy.functions.FloorDiv) -> torch._inductor.codegen.simd.IterationRangesEntry",
      "(sympy.core.numbers.One, sympy.core.numbers.Integer) -> torch._inductor.codegen.simd.IterationRangesEntry",
      "(sympy.core.numbers.One, sympy.core.symbol.Symbol) -> torch._inductor.codegen.simd.IterationRangesEntry",
      "(sympy.core.numbers.One, sympy.core.mul.Mul) -> torch._inductor.codegen.simd.IterationRangesEntry",
      "(sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> torch._inductor.codegen.simd.IterationRangesEntry",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> torch._inductor.codegen.simd.IterationRangesEntry",
      "(sympy.core.numbers.Integer, sympy.core.mul.Mul) -> torch._inductor.codegen.simd.IterationRangesEntry"
    ],
    "samples": 3637
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 188,
    "func_name": "IterationRangesRoot.construct_entries",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> List[torch._inductor.codegen.simd.IterationRangesEntry]",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]) -> List[torch._inductor.codegen.simd.IterationRangesEntry]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> List[torch._inductor.codegen.simd.IterationRangesEntry]",
      "(List[sympy.core.add.Add]) -> List[torch._inductor.codegen.simd.IterationRangesEntry]",
      "(List[sympy.core.symbol.Symbol]) -> List[torch._inductor.codegen.simd.IterationRangesEntry]",
      "(List) -> List",
      "(List[torch.utils._sympy.functions.FloorDiv]) -> List[torch._inductor.codegen.simd.IterationRangesEntry]",
      "(List[sympy.core.numbers.Integer]) -> List[torch._inductor.codegen.simd.IterationRangesEntry]",
      "(List[sympy.core.mul.Mul]) -> List[torch._inductor.codegen.simd.IterationRangesEntry]"
    ],
    "samples": 4518
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 196,
    "func_name": "IterationRangesRoot.construct",
    "type_comments": [
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> List[sympy.core.symbol.Symbol]",
      "(List[torch.utils._sympy.functions.FloorDiv]) -> List[sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> List[sympy.core.symbol.Symbol]",
      "(List) -> List",
      "(List[sympy.core.numbers.Integer]) -> List[sympy.core.symbol.Symbol]",
      "(List[sympy.core.add.Add]) -> List[sympy.core.symbol.Symbol]",
      "(List[sympy.core.mul.Mul]) -> List[sympy.core.symbol.Symbol]"
    ],
    "samples": 4518
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 199,
    "func_name": "IterationRangesRoot.vars_and_sizes",
    "type_comments": [
      "(torch.utils._sympy.functions.FloorDiv) -> Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]]",
      "(sympy.core.mul.Mul) -> Tuple[List, List]",
      "(sympy.core.mul.Mul) -> Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]]",
      "(sympy.functions.elementary.miscellaneous.Max) -> Tuple[List, List]",
      "(sympy.core.add.Add) -> Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]]",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.mul.Mul]]",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]",
      "(torch.utils._sympy.functions.ModularIndexing) -> Tuple[List, List]",
      "(sympy.functions.elementary.miscellaneous.Max) -> Tuple[List[sympy.core.symbol.Symbol], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]",
      "(torch.utils._sympy.functions.ModularIndexing) -> Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]]",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add) -> Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]",
      "(sympy.functions.elementary.complexes.Abs) -> Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add) -> Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.mul.Mul]]",
      "(sympy.core.add.Add) -> Tuple[List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(sympy.core.mul.Mul) -> Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.mul.Mul]]",
      "(sympy.core.mul.Mul) -> Tuple[List[sympy.core.symbol.Symbol], List[torch.utils._sympy.functions.FloorDiv]]",
      "(sympy.core.add.Add) -> Tuple[List[sympy.core.symbol.Symbol], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]",
      "(sympy.core.mul.Mul) -> Tuple[List[sympy.core.symbol.Symbol], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]",
      "(sympy.functions.elementary.miscellaneous.Min) -> Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.mul.Mul]]",
      "(torch.utils._sympy.functions.Identity) -> Tuple[List, List]",
      "(sympy.core.mul.Mul) -> Tuple[List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(sympy.core.add.Add) -> Tuple[List, List]",
      "(sympy.core.add.Add) -> Tuple[List[sympy.core.symbol.Symbol], List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]]",
      "(sympy.core.add.Add) -> Tuple[List[sympy.core.symbol.Symbol], List[torch.utils._sympy.functions.FloorDiv]]",
      "(sympy.core.add.Add) -> Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.add.Add]]",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> Tuple[List, List]",
      "(torch.utils._sympy.functions.FloorDiv) -> Tuple[List, List]"
    ],
    "samples": 1221
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 212,
    "func_name": "add",
    "type_comments": [
      "(torch._inductor.codegen.simd.IterationRangesEntry) -> None"
    ],
    "samples": 1536
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 232,
    "func_name": "IterationRangesEntry.__init__",
    "type_comments": [
      "(str, sympy.core.numbers.Integer, sympy.core.symbol.Symbol, torch.utils._sympy.functions.FloorDiv, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, sympy.core.numbers.One, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, sympy.core.numbers.One, torch.utils._sympy.functions.FloorDiv, sympy.core.symbol.Symbol, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, sympy.core.numbers.Integer, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, sympy.core.numbers.One, sympy.core.numbers.Integer, torch.utils._sympy.functions.ModularIndexing, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.symbol.Symbol, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.symbol.Symbol, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, sympy.core.numbers.Integer, sympy.core.add.Add, torch.utils._sympy.functions.ModularIndexing, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, sympy.core.numbers.Integer, sympy.core.mul.Mul, torch.utils._sympy.functions.FloorDiv, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, sympy.core.numbers.Integer, sympy.core.numbers.Integer, torch.utils._sympy.functions.ModularIndexing, torch._inductor.codegen.simd.IterationRangesRoot) -> None",
      "(str, sympy.core.add.Add, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv, torch._inductor.codegen.simd.IterationRangesRoot) -> None"
    ],
    "samples": 1372
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 266,
    "func_name": "IterationRangesEntry._codegen",
    "type_comments": [
      "() -> str"
    ],
    "samples": 1305
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 270,
    "func_name": "IterationRangesEntry.precomputed_args",
    "type_comments": [
      "() -> List"
    ],
    "samples": 3851
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 292,
    "func_name": "constant_repr",
    "type_comments": [
      "(bool) -> str",
      "(float) -> str",
      "(int) -> str"
    ],
    "samples": 2050
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 311,
    "func_name": "SIMDKernel.__init__",
    "type_comments": [
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, None, *Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, None, *Union[sympy.core.add.Add, sympy.core.numbers.One]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, None, *Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, None, *Union[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, None, *Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, None, *Union[sympy.core.mul.Mul, sympy.core.numbers.One]) -> None",
      "(str, Set[str], Dict[str, str], torch._inductor.runtime.hints.ReductionHint, None, *sympy.core.numbers.One) -> None",
      "(str, Set[str], None, torch._inductor.runtime.hints.ReductionHint, None, *Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, None, *Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]) -> None",
      "(str, Set[str], None, torch._inductor.runtime.hints.ReductionHint, None, *Union[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> None",
      "(str, Set[str], None, torch._inductor.runtime.hints.ReductionHint, None, *Union[sympy.core.mul.Mul, sympy.core.numbers.One]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, None, *sympy.core.numbers.Integer) -> None",
      "(str, Set[str], None, torch._inductor.runtime.hints.ReductionHint, None, *sympy.core.numbers.Integer) -> None",
      "(str, Set[str], None, torch._inductor.runtime.hints.ReductionHint, None, *sympy.core.numbers.One) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, bool, *sympy.core.numbers.Integer) -> None",
      "(str, Set[str], None, torch._inductor.runtime.hints.ReductionHint, None, *Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]) -> None",
      "(str, Set[str], Dict[str, str], torch._inductor.runtime.hints.ReductionHint, None, *Union[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, None, *Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> None"
    ],
    "samples": 959
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 344,
    "func_name": "simplify_indexing",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.add.Add) -> sympy.core.symbol.Symbol",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(sympy.core.numbers.Zero) -> sympy.core.numbers.Zero",
      "(sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add) -> sympy.core.add.Add",
      "(sympy.functions.elementary.miscellaneous.Min) -> sympy.functions.elementary.miscellaneous.Min",
      "(sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.mul.Mul) -> sympy.core.mul.Mul",
      "(torch.utils._sympy.functions.FloorDiv) -> torch.utils._sympy.functions.FloorDiv",
      "(sympy.functions.elementary.complexes.Abs) -> sympy.functions.elementary.complexes.Abs"
    ],
    "samples": 1586
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 358,
    "func_name": "SIMDKernel.initialize_range_tree",
    "type_comments": [
      "(Dict[str, str]) -> None",
      "(Dict) -> None"
    ],
    "samples": 959
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 394,
    "func_name": "SIMDKernel.finalize_indexing",
    "type_comments": [
      "(dict_keys) -> None"
    ],
    "samples": 959
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 412,
    "func_name": "SIMDKernel.var_ranges",
    "type_comments": [
      "() -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "() -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "() -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]",
      "() -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "() -> Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]",
      "() -> Dict",
      "() -> Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "() -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "() -> Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]"
    ],
    "samples": 4488
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 419,
    "func_name": "SIMDKernel.triton_tensor_ndim",
    "type_comments": [
      "() -> int"
    ],
    "samples": 3770
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 422,
    "func_name": "SIMDKernel.indexing_size_str",
    "type_comments": [
      "(int) -> str"
    ],
    "samples": 1063
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 427,
    "func_name": "SIMDKernel.dense_size_list",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 1466
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 437,
    "func_name": "SIMDKernel.dense_size_str",
    "type_comments": [
      "() -> str"
    ],
    "samples": 1466
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 441,
    "func_name": "SIMDKernel.combine_modular_indexing_pairs",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing) -> torch.utils._sympy.functions.ModularIndexing",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(sympy.core.numbers.Zero) -> sympy.core.numbers.Zero",
      "(sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add) -> sympy.core.add.Add",
      "(sympy.functions.elementary.miscellaneous.Min) -> sympy.functions.elementary.miscellaneous.Min",
      "(sympy.core.mul.Mul) -> sympy.core.mul.Mul",
      "(sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(torch.utils._sympy.functions.FloorDiv) -> torch.utils._sympy.functions.FloorDiv",
      "(sympy.functions.elementary.complexes.Abs) -> sympy.functions.elementary.complexes.Abs"
    ],
    "samples": 1586
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 459,
    "func_name": "SIMDKernel.combine_contiguous_dims",
    "type_comments": [
      "(sympy.functions.elementary.miscellaneous.Min, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.functions.elementary.miscellaneous.Min",
      "(torch.utils._sympy.functions.FloorDiv, torch._inductor.codegen.simd.IterationRangesRoot) -> torch.utils._sympy.functions.FloorDiv",
      "(torch.utils._sympy.functions.ModularIndexing, torch._inductor.codegen.simd.IterationRangesRoot) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.symbol.Symbol, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.core.symbol.Symbol",
      "(sympy.functions.elementary.miscellaneous.Max, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.functions.elementary.miscellaneous.Max",
      "(sympy.core.mul.Mul, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.core.mul.Mul",
      "(sympy.core.add.Add, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.core.add.Add",
      "(sympy.core.numbers.Integer, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Zero, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.core.numbers.Zero",
      "(sympy.functions.elementary.complexes.Abs, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.functions.elementary.complexes.Abs",
      "(torch.utils._sympy.functions.FloatTrueDiv, torch._inductor.codegen.simd.IterationRangesRoot) -> torch.utils._sympy.functions.FloatTrueDiv"
    ],
    "samples": 2702
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 466,
    "func_name": "SIMDKernel._combine_contiguous_dims",
    "type_comments": [
      "(sympy.functions.elementary.miscellaneous.Min, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.functions.elementary.miscellaneous.Min",
      "(torch.utils._sympy.functions.FloorDiv, torch._inductor.codegen.simd.IterationRangesRoot) -> torch.utils._sympy.functions.FloorDiv",
      "(torch.utils._sympy.functions.ModularIndexing, torch._inductor.codegen.simd.IterationRangesRoot) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.symbol.Symbol, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.core.symbol.Symbol",
      "(sympy.functions.elementary.miscellaneous.Max, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.functions.elementary.miscellaneous.Max",
      "(sympy.core.mul.Mul, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.core.mul.Mul",
      "(sympy.core.add.Add, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.core.add.Add",
      "(sympy.core.numbers.Integer, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Zero, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.core.numbers.Zero",
      "(sympy.functions.elementary.complexes.Abs, torch._inductor.codegen.simd.IterationRangesRoot) -> sympy.functions.elementary.complexes.Abs",
      "(torch.utils._sympy.functions.FloatTrueDiv, torch._inductor.codegen.simd.IterationRangesRoot) -> torch.utils._sympy.functions.FloatTrueDiv"
    ],
    "samples": 2702
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 484,
    "func_name": "SIMDKernel.set_last_usage",
    "type_comments": [
      "(itertools.takewhile) -> None"
    ],
    "samples": 1043
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 493,
    "func_name": "SIMDKernel.disable_reduction",
    "type_comments": [
      "() -> contextlib._GeneratorContextManager"
    ],
    "samples": 389
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 496,
    "func_name": "ctx",
    "type_comments": [
      "() -> Iterator"
    ],
    "samples": 561
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 517,
    "func_name": "SIMDKernel.set_ranges",
    "type_comments": [
      "(*List[sympy.core.symbol.Symbol]) -> List[List[sympy.core.symbol.Symbol]]",
      "(*Union[List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]) -> List[Union[List, List[sympy.core.symbol.Symbol]]]",
      "(*Union[List, List[sympy.core.numbers.Integer]]) -> List[Union[List, List[sympy.core.symbol.Symbol]]]",
      "(*Union[List, List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]]) -> List[Union[List, List[sympy.core.symbol.Symbol]]]",
      "(*List[sympy.core.numbers.Integer]) -> List[List[sympy.core.symbol.Symbol]]",
      "(*List) -> List[List]",
      "(*Union[List, List[sympy.core.mul.Mul]]) -> List[Union[List, List[sympy.core.symbol.Symbol]]]",
      "(*Union[List[sympy.core.numbers.Integer], List[torch.utils._sympy.functions.FloorDiv]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(*Union[List, List[sympy.core.symbol.Symbol]]) -> List[Union[List, List[sympy.core.symbol.Symbol]]]",
      "(*Union[List, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]) -> List[Union[List, List[sympy.core.symbol.Symbol]]]",
      "(*List[sympy.core.mul.Mul]) -> List[List[sympy.core.symbol.Symbol]]",
      "(*Union[List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(*Union[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[sympy.core.numbers.Integer]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(*Union[List[sympy.core.add.Add], List[sympy.core.numbers.Integer]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(*Union[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(*Union[List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(*Union[List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]) -> List[Union[List, List[sympy.core.symbol.Symbol]]]"
    ],
    "samples": 2440
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 524,
    "func_name": "_split_iteration_ranges",
    "type_comments": [
      "(Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One], Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List]) -> Tuple[List[Union[List, List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]]], List[Union[List, List[operator.itemgetter]]]]",
      "(Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer], Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List]) -> Tuple[List[Union[List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]]], List[Union[List, List[operator.itemgetter]]]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], Tuple[List[sympy.core.mul.Mul], List]) -> Tuple[List[List[sympy.core.mul.Mul]], List[Union[List, List[operator.itemgetter]]]]",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer], Tuple[List[sympy.core.numbers.Integer], List]) -> Tuple[List[List[sympy.core.numbers.Integer]], List[Union[List, List[operator.itemgetter]]]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List]) -> Tuple[List[Union[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[sympy.core.numbers.Integer]]], List[Union[List, List[operator.itemgetter]]]]",
      "(Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer], Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List]) -> Tuple[List[Union[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[sympy.core.numbers.Integer]]], List[Union[List, List[operator.itemgetter]]]]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[List[sympy.core.numbers.Integer], List]) -> Tuple[List[List[sympy.core.numbers.Integer]], List[Union[List, List[Union[function, operator.itemgetter]]]]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], Tuple[List[sympy.core.mul.Mul], List]) -> Tuple[List[Union[List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol]]], List[Union[List, List[function]]]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List]) -> Tuple[List[Union[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]], List[Union[List, List[operator.itemgetter]]]]",
      "(List[sympy.core.numbers.Integer], Tuple[List[sympy.core.numbers.Integer], List]) -> Tuple[List[List[sympy.core.numbers.Integer]], List[Union[List, List[Union[function, operator.itemgetter]]]]]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.add.Add], Tuple[List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], List]) -> Tuple[List[Union[List[sympy.core.add.Add], List[sympy.core.numbers.Integer]]], List[Union[List, List[operator.itemgetter]]]]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[List[sympy.core.numbers.Integer], List]) -> Tuple[List[List[sympy.core.numbers.Integer]], List[Union[List, List[operator.itemgetter]]]]",
      "(Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer], Tuple[List[sympy.core.mul.Mul], List]) -> Tuple[List[Union[List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]]], List[Union[List, List[function]]]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], Tuple[List[sympy.core.numbers.Integer], List]) -> Tuple[List[Union[List, List[sympy.core.numbers.Integer]]], List[Union[List, List[operator.itemgetter]]]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], Tuple[List[sympy.core.mul.Mul], List]) -> Tuple[List[Union[List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]]], List[Union[List, List[function]]]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List]) -> Tuple[List[Union[List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]], List[Union[List, List[operator.itemgetter]]]]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[List[sympy.core.numbers.Integer], List]) -> Tuple[List[List[sympy.core.numbers.Integer]], List[Union[List, List[function]]]]",
      "(Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer], Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List]) -> Tuple[List[Union[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]], List[Union[List, List[operator.itemgetter]]]]",
      "(Tuple[sympy.core.numbers.One, sympy.core.mul.Mul], Tuple[List[sympy.core.mul.Mul], List]) -> Tuple[List[List[sympy.core.mul.Mul]], List[Union[List, List[operator.itemgetter]]]]",
      "(List[sympy.core.numbers.Integer], Tuple[List[sympy.core.numbers.Integer], List]) -> Tuple[List[List[sympy.core.numbers.Integer]], List[Union[List, List[function]]]]",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], Tuple[List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], List]) -> Tuple[List[Union[List[sympy.core.add.Add], List[sympy.core.numbers.Integer]]], List[Union[List, List[operator.itemgetter]]]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], Tuple[List[sympy.core.numbers.Integer], List]) -> Tuple[List[List[sympy.core.numbers.Integer]], List[Union[List, List[operator.itemgetter]]]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List]) -> Tuple[List[Union[List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]]], List[Union[List, List[operator.itemgetter]]]]",
      "(List[sympy.core.numbers.Integer], Tuple[List[sympy.core.numbers.Integer], List]) -> Tuple[List[List[sympy.core.numbers.Integer]], List[Union[List, List[operator.itemgetter]]]]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One], Tuple[List[sympy.core.numbers.Integer], List]) -> Tuple[List[Union[List, List[sympy.core.numbers.Integer]]], List[Union[List, List[operator.itemgetter]]]]",
      "(Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One], Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List]) -> Tuple[List[Union[List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]], List[Union[List, List[operator.itemgetter]]]]"
    ],
    "samples": 620
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 533,
    "func_name": "add_range",
    "type_comments": [
      "(int, sympy.core.symbol.Symbol) -> int",
      "(int, sympy.core.numbers.Integer) -> int",
      "(int, sympy.core.mul.Mul) -> int",
      "(int, sympy.core.add.Add) -> int"
    ],
    "samples": 1114
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 592,
    "func_name": "is_compatible",
    "type_comments": [
      "(Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer], Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List]) -> bool",
      "(Tuple[sympy.core.numbers.One, sympy.core.mul.Mul], Tuple[List[sympy.core.mul.Mul], List]) -> bool",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.add.Add], Tuple[List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], List]) -> bool",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer], Tuple[List[sympy.core.numbers.Integer], List]) -> bool",
      "(Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One], Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List]) -> bool",
      "(Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One], Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List]) -> bool",
      "(Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer], Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List]) -> bool",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], Tuple[List[sympy.core.mul.Mul], List]) -> bool",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[List[sympy.core.numbers.Integer], List]) -> bool",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One], Tuple[List[sympy.core.numbers.Integer], List]) -> bool",
      "(Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer], Tuple[List[sympy.core.mul.Mul], List]) -> bool"
    ],
    "samples": 387
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 602,
    "func_name": "SIMDKernel.split_and_set_ranges",
    "type_comments": [
      "(Tuple[List[sympy.core.numbers.Integer], List[sympy.core.add.Add]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(Tuple[List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(Tuple[List, List[sympy.core.numbers.Integer]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(Tuple[List[sympy.core.numbers.Integer], List[sympy.core.mul.Mul]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(Tuple[List, List[sympy.core.symbol.Symbol]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(Tuple[List[sympy.core.numbers.Integer], List]) -> List[Union[List, List[sympy.core.add.Add]]]",
      "(Tuple[List[sympy.core.numbers.Integer], List]) -> List[Union[List, List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]]]",
      "(Tuple[List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List]) -> List[Union[List, List[sympy.core.symbol.Symbol]]]",
      "(Tuple[List[sympy.core.numbers.Integer], List]) -> List[Union[List, List[sympy.core.symbol.Symbol]]]",
      "(Tuple[List[sympy.core.mul.Mul], List]) -> List[Union[List, List[sympy.core.symbol.Symbol]]]",
      "(Tuple[List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], List]) -> List[Union[List, List[sympy.core.symbol.Symbol]]]",
      "(Tuple[List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List]) -> List[Union[List, List[sympy.core.symbol.Symbol]]]",
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> List[Union[List, List[sympy.core.symbol.Symbol]]]",
      "(Tuple[List, List[sympy.core.mul.Mul]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(Tuple[List[sympy.core.numbers.Integer], List[torch.utils._sympy.functions.FloorDiv]]) -> List[List[sympy.core.symbol.Symbol]]",
      "(Tuple[List[sympy.core.mul.Mul], List]) -> List[Union[List, List[sympy.core.add.Add]]]",
      "(Tuple[List, List]) -> List[List]"
    ],
    "samples": 2440
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 631,
    "func_name": "SIMDKernel.is_indirect_indexing",
    "type_comments": [
      "(torch.utils._sympy.functions.Identity) -> bool",
      "(torch.utils._sympy.functions.ModularIndexing) -> bool",
      "(sympy.core.numbers.Zero) -> bool",
      "(sympy.core.symbol.Symbol) -> bool",
      "(sympy.core.mul.Mul) -> bool",
      "(sympy.core.add.Add) -> bool",
      "(sympy.core.numbers.Integer) -> bool"
    ],
    "samples": 4751
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 635,
    "func_name": "SIMDKernel.is_broadcasted",
    "type_comments": [
      "(sympy.core.numbers.Zero) -> bool",
      "(sympy.core.symbol.Symbol) -> bool",
      "(sympy.core.mul.Mul) -> bool",
      "(sympy.core.add.Add) -> bool",
      "(sympy.core.numbers.Integer) -> bool"
    ],
    "samples": 3038
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 657,
    "func_name": "SIMDKernel.index_to_str",
    "type_comments": [
      "(torch.utils._sympy.functions.FloorDiv) -> str",
      "(sympy.core.numbers.Integer) -> str",
      "(sympy.core.numbers.Zero) -> str",
      "(sympy.functions.elementary.complexes.Abs) -> str",
      "(sympy.core.add.Add) -> str",
      "(sympy.core.mul.Mul) -> str",
      "(sympy.core.symbol.Symbol) -> str",
      "(torch.utils._sympy.functions.ModularIndexing) -> str",
      "(sympy.functions.elementary.miscellaneous.Min) -> str",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> str"
    ],
    "samples": 3430
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 670,
    "func_name": "SIMDKernel.prepare_indexing",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.add.Add) -> torch.utils._sympy.functions.FloorDiv",
      "(sympy.core.add.Add) -> sympy.core.symbol.Symbol",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(sympy.core.numbers.Zero) -> sympy.core.numbers.Zero",
      "(sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add) -> sympy.core.add.Add",
      "(sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.functions.elementary.miscellaneous.Min) -> sympy.functions.elementary.miscellaneous.Min",
      "(sympy.core.mul.Mul) -> sympy.core.mul.Mul",
      "(sympy.functions.elementary.complexes.Abs) -> sympy.functions.elementary.complexes.Abs"
    ],
    "samples": 3430
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 708,
    "func_name": "SIMDKernel.active_range_trees",
    "type_comments": [
      "(bool) -> List[torch._inductor.codegen.simd.IterationRangesRoot]"
    ],
    "samples": 3753
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 720,
    "func_name": "SIMDKernel.codegen_indexing",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing) -> torch.utils._sympy.functions.ModularIndexing",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(sympy.core.numbers.Zero) -> sympy.core.numbers.Zero",
      "(sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add) -> sympy.core.add.Add",
      "(sympy.functions.elementary.miscellaneous.Min) -> sympy.functions.elementary.miscellaneous.Min",
      "(sympy.core.mul.Mul) -> sympy.core.mul.Mul",
      "(sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(torch.utils._sympy.functions.FloorDiv) -> torch.utils._sympy.functions.FloorDiv",
      "(sympy.functions.elementary.complexes.Abs) -> sympy.functions.elementary.complexes.Abs"
    ],
    "samples": 3430
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 736,
    "func_name": "mask_loads",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, None) -> Iterator",
      "(torch._inductor.codegen.triton.TritonCSEVariable, float) -> Iterator",
      "(torch._inductor.codegen.triton.TritonCSEVariable, int) -> Iterator",
      "(torch._inductor.codegen.triton.TritonCSEVariable, int) -> Iterator[torch._inductor.codegen.triton.TritonCSEVariable]",
      "(torch._inductor.codegen.triton.TritonCSEVariable, float) -> Iterator[torch._inductor.codegen.triton.TritonCSEVariable]",
      "(torch._inductor.codegen.triton.TritonCSEVariable, None) -> Iterator[torch._inductor.codegen.triton.TritonCSEVariable]"
    ],
    "samples": 295
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 754,
    "func_name": "SIMDKernel.get_strides_of_load",
    "type_comments": [
      "(sympy.core.add.Add) -> Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]",
      "(sympy.core.symbol.Symbol) -> Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add) -> Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(sympy.core.add.Add) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.NegativeOne, sympy.core.numbers.Zero]]",
      "(sympy.core.mul.Mul) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol) -> Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(sympy.core.add.Add) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Zero]]",
      "(torch.utils._sympy.functions.Identity) -> Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(sympy.core.add.Add) -> Dict[sympy.core.symbol.Symbol, sympy.core.add.Add]",
      "(sympy.core.numbers.Integer) -> Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(sympy.core.add.Add) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.numbers.NegativeOne, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.One]]",
      "(sympy.core.add.Add) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.add.Add) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.Zero) -> Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(sympy.core.add.Add) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(torch.utils._sympy.functions.ModularIndexing) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]"
    ],
    "samples": 2236
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 778,
    "func_name": "_map_tuple_or_scalar",
    "type_comments": [
      "(function, torch._inductor.codegen.triton.TritonCSEVariable) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(function, Tuple[int, int, int]) -> Tuple[str, str, str]",
      "(function, int) -> str",
      "(function, Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable]) -> Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable]",
      "(function, float) -> str"
    ],
    "samples": 593
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 938,
    "func_name": "SIMDScheduling.__init__",
    "type_comments": [
      "(None) -> None",
      "(torch._inductor.scheduler.Scheduler) -> None"
    ],
    "samples": 317
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 942,
    "func_name": "SIMDScheduling.group_fn",
    "type_comments": [
      "(Tuple[List[sympy.core.numbers.Integer], List]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]",
      "(Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.mul.Mul]",
      "(Tuple[List[sympy.core.numbers.Integer], List[sympy.core.mul.Mul]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.mul.Mul]",
      "(Tuple[List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[List, List[sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.numbers.One, sympy.core.symbol.Symbol]",
      "(Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List]) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.One]",
      "(Tuple[List[sympy.core.numbers.Integer], List[sympy.core.add.Add]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.add.Add]",
      "(Tuple[List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]",
      "(Tuple[List, List[sympy.core.mul.Mul]]) -> Tuple[sympy.core.numbers.One, sympy.core.mul.Mul]",
      "(Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]",
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.One]",
      "(Tuple[List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]]) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]",
      "(Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List]) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.One]",
      "(Tuple[List, List[sympy.core.numbers.Integer]]) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]",
      "(Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]",
      "(Tuple[List[sympy.core.mul.Mul], List]) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.One]",
      "(Tuple[List, List]) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.One]",
      "(Tuple[List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], List]) -> Tuple[sympy.core.add.Add, sympy.core.numbers.One]",
      "(Tuple[List[sympy.core.numbers.Integer], List[torch.utils._sympy.functions.FloorDiv]]) -> Tuple[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]"
    ],
    "samples": 1718
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 945,
    "func_name": "SIMDScheduling.can_fuse",
    "type_comments": [
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool"
    ],
    "samples": 1829
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1059,
    "func_name": "SIMDScheduling.generate_node_schedule",
    "type_comments": [
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.mul.Mul, sympy.core.numbers.Integer) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.numbers.Integer) -> List[Union[torch._inductor.scheduler.SchedulerNode, type]]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.symbol.Symbol) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.numbers.Integer) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.symbol.Symbol, sympy.core.numbers.Integer) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.symbol.Symbol, sympy.core.numbers.One) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.mul.Mul) -> List[Union[torch._inductor.scheduler.SchedulerNode, type]]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.numbers.One) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> List[Union[torch._inductor.scheduler.SchedulerNode, type]]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.add.Add, sympy.core.numbers.One) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.mul.Mul, sympy.core.numbers.Integer) -> List[Union[torch._inductor.scheduler.SchedulerNode, type]]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.numbers.One) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> List[Union[torch._inductor.scheduler.SchedulerNode, type]]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.mul.Mul) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.mul.Mul, sympy.core.numbers.One) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.mul.Mul) -> List[torch._inductor.scheduler.SchedulerNode]"
    ],
    "samples": 959
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1069,
    "func_name": "fits_in_main_body",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> bool"
    ],
    "samples": 1465
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1075,
    "func_name": "fits_outside_reduction",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> bool"
    ],
    "samples": 266
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1079,
    "func_name": "schedule_node_in_loop",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> None"
    ],
    "samples": 1365
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1094,
    "func_name": "end_current_reduction_loop",
    "type_comments": [
      "() -> Iterator"
    ],
    "samples": 489
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1121,
    "func_name": "requires_closing_previous_reduction",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode, List[torch._inductor.scheduler.SchedulerNode]) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, List[Union[torch._inductor.scheduler.SchedulerNode, type]]) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, List) -> bool"
    ],
    "samples": 1365
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1147,
    "func_name": "SIMDScheduling.codegen_node",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> None",
      "(torch._inductor.scheduler.FusedSchedulerNode) -> None"
    ],
    "samples": 709
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1168,
    "func_name": "reduction_hint",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> torch._inductor.runtime.hints.ReductionHint"
    ],
    "samples": 414
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1179,
    "func_name": "can_use_32bit_indexing",
    "type_comments": [
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ConstantBuffer, torch._inductor.ir.ExternKernelAlloc, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ConstantBuffer]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ExternKernelAlloc]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.DeviceCopy]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ConstantBuffer, torch._inductor.ir.ExternKernelOut]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.MutationOutput]]) -> bool",
      "(sympy.core.mul.Mul, List[Union[torch._inductor.ir.ExternKernelOut, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ConcatKernel, torch._inductor.ir.ExternKernelOut]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ExternKernelOut, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ConcatKernel, torch._inductor.ir.ConstantBuffer]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.RandomSeeds]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.RandomSeeds, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ConstantBuffer, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.MutationOutput, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.mul.Mul, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.MultiOutput, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.mul.Mul, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ExternKernelOut, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.mul.Mul, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.RandomSeeds]]) -> bool",
      "(sympy.core.symbol.Symbol, List[torch._inductor.ir.ComputedBuffer]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ExternKernelOut, torch._inductor.ir.RandomSeeds, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.mul.Mul, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ExternKernelAlloc, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.mul.Mul, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ExternKernelAlloc]]) -> bool",
      "(sympy.core.mul.Mul, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ExternKernelOut]]) -> bool",
      "(sympy.core.mul.Mul, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ExternKernelOut]]) -> bool",
      "(sympy.core.numbers.One, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.mul.Mul, List[torch._inductor.ir.ComputedBuffer]) -> bool",
      "(sympy.core.mul.Mul, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.MultiOutput]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.MultiOutput]]) -> bool",
      "(sympy.core.numbers.Integer, List[torch._inductor.ir.ComputedBuffer]) -> bool",
      "(sympy.core.symbol.Symbol, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.mul.Mul, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.RandomSeeds, torch._inductor.ir.TensorBox]]) -> bool",
      "(sympy.core.numbers.Integer, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ConstantBuffer, torch._inductor.ir.ExternKernelAlloc]]) -> bool"
    ],
    "samples": 959
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1187,
    "func_name": "within_32bit",
    "type_comments": [
      "(sympy.core.numbers.One) -> bool",
      "(sympy.core.symbol.Symbol) -> bool",
      "(sympy.core.mul.Mul) -> bool",
      "(sympy.core.add.Add) -> bool",
      "(sympy.core.numbers.Integer) -> bool"
    ],
    "samples": 3121
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1216,
    "func_name": "select_index_dtype",
    "type_comments": [
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> str",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.symbol.Symbol, sympy.core.numbers.One) -> str",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.add.Add, sympy.core.numbers.One) -> str",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.numbers.One) -> str",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.symbol.Symbol, sympy.core.numbers.Integer) -> str",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.mul.Mul) -> str",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.mul.Mul, sympy.core.numbers.One) -> str",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.numbers.Integer) -> str",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> str",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.mul.Mul, sympy.core.numbers.Integer) -> str",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.One, sympy.core.numbers.Integer) -> str",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> str",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.numbers.One) -> str",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.mul.Mul) -> str",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.mul.Mul, sympy.core.numbers.Integer) -> str",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.mul.Mul) -> str",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv) -> str",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.symbol.Symbol) -> str"
    ],
    "samples": 959
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1246,
    "func_name": "SIMDScheduling.has_non_contiguous_pw_in_reduction_kernel",
    "type_comments": [
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.mul.Mul) -> bool",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.mul.Mul, sympy.core.numbers.Integer) -> bool",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.One, sympy.core.symbol.Symbol) -> bool",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.symbol.Symbol, sympy.core.numbers.Integer) -> bool",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.mul.Mul, sympy.core.numbers.Integer) -> bool",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.One, sympy.core.numbers.Integer) -> bool",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.numbers.Integer) -> bool",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.mul.Mul) -> bool",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> bool",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.symbol.Symbol) -> bool",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> bool",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv) -> bool",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.mul.Mul) -> bool",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.add.Add) -> bool"
    ],
    "samples": 259
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1269,
    "func_name": "SIMDScheduling.get_kernel_args",
    "type_comments": [
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.mul.Mul, sympy.core.numbers.Integer) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.mul.Mul) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set[str], str]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.numbers.One) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set[str], str]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.symbol.Symbol) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.symbol.Symbol, sympy.core.numbers.Integer) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.mul.Mul, sympy.core.numbers.One) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set[str], str]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.numbers.Integer) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.numbers.One) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set[str], str]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.mul.Mul, sympy.core.numbers.One) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.mul.Mul, sympy.core.numbers.Integer) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.mul.Mul) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set[str], str]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.mul.Mul) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.mul.Mul, sympy.core.numbers.Integer) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set[str], str]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.numbers.One) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.symbol.Symbol, sympy.core.numbers.One) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.One, sympy.core.numbers.Integer) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.mul.Mul) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set[str], str]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.add.Add, sympy.core.numbers.One) -> Tuple[torch._inductor.runtime.hints.ReductionHint, Set, str]"
    ],
    "samples": 959
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1303,
    "func_name": "SIMDScheduling.codegen_node_schedule",
    "type_comments": [
      "(List[torch._inductor.scheduler.SchedulerNode], collections.defaultdict, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> None",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], collections.defaultdict, sympy.core.mul.Mul, sympy.core.numbers.Integer) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode], collections.defaultdict, sympy.core.numbers.Integer, sympy.core.numbers.One) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode], collections.defaultdict, sympy.core.symbol.Symbol, sympy.core.numbers.One) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode], collections.defaultdict, sympy.core.numbers.One, sympy.core.mul.Mul) -> None",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], collections.defaultdict, sympy.core.numbers.Integer, sympy.core.mul.Mul) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode], collections.defaultdict, sympy.core.symbol.Symbol, sympy.core.numbers.Integer) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode], collections.defaultdict, sympy.core.numbers.One, sympy.core.numbers.Integer) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode], collections.defaultdict, sympy.core.numbers.Integer, sympy.core.mul.Mul) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode], collections.defaultdict, sympy.core.mul.Mul, sympy.core.numbers.Integer) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode], collections.defaultdict, sympy.core.mul.Mul, sympy.core.numbers.One) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode], collections.defaultdict, sympy.core.add.Add, sympy.core.numbers.One) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode], collections.defaultdict, sympy.core.numbers.One, sympy.core.numbers.One) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode], collections.defaultdict, sympy.core.numbers.One, sympy.core.symbol.Symbol) -> None",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], collections.defaultdict, sympy.core.numbers.One, sympy.core.numbers.Integer) -> None",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], collections.defaultdict, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> None",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], collections.defaultdict, sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode], collections.defaultdict, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv) -> None"
    ],
    "samples": 709
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1330,
    "func_name": "_node_has_sort",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> bool",
      "(type) -> bool"
    ],
    "samples": 1175
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1416,
    "func_name": "SIMDScheduling.codegen_node_schedule_with_kernel",
    "type_comments": [
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], torch._inductor.codegen.triton.TritonKernel) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode], torch._inductor.codegen.triton.TritonKernel) -> None"
    ],
    "samples": 959
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1417,
    "func_name": "current_reduction_nodes",
    "type_comments": [
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]]) -> itertools.takewhile",
      "(List[type]) -> itertools.takewhile",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> itertools.takewhile"
    ],
    "samples": 1043
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1556,
    "func_name": "candidate_tilings",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> List[torch._inductor.codegen.simd.CandidateTiling]",
      "(torch._inductor.scheduler.SchedulerNode) -> List",
      "(torch._inductor.scheduler.SchedulerNode) -> Tuple[]"
    ],
    "samples": 2890
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1625,
    "func_name": "select_tiling",
    "type_comments": [
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.symbol.Symbol) -> Tuple[sympy.core.numbers.One, sympy.core.symbol.Symbol]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.symbol.Symbol, sympy.core.numbers.One) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.One]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.mul.Mul, sympy.core.numbers.Integer) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.One, sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.add.Add, sympy.core.numbers.One) -> Tuple[sympy.core.add.Add, sympy.core.numbers.One]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.mul.Mul, sympy.core.numbers.One) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.mul.Mul) -> Tuple[sympy.core.numbers.Integer, sympy.core.mul.Mul]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], sympy.core.numbers.Integer, sympy.core.add.Add) -> Tuple[sympy.core.numbers.Integer, sympy.core.add.Add]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.numbers.One) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.One]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.mul.Mul, sympy.core.numbers.One) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.One]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.numbers.One) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.mul.Mul, sympy.core.numbers.Integer) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.mul.Mul) -> Tuple[sympy.core.numbers.Integer, sympy.core.mul.Mul]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.numbers.One) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.One, sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]",
      "(List[torch._inductor.scheduler.SchedulerNode], sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv) -> Tuple[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]"
    ],
    "samples": 3084
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1693,
    "func_name": "SIMDScheduling.flush",
    "type_comments": [
      "() -> None"
    ],
    "samples": 630
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1780,
    "func_name": "filter",
    "type_comments": [
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]]) -> Iterator[torch._inductor.scheduler.SchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> Iterator",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> Iterator[torch._inductor.scheduler.SchedulerNode]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]]) -> Iterator"
    ],
    "samples": 7176
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 85,
    "func_name": "gen_attr_descriptor_import",
    "type_comments": [
      "() -> str"
    ],
    "samples": 59
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 102,
    "func_name": "gen_common_triton_imports",
    "type_comments": [
      "() -> str"
    ],
    "samples": 59
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 144,
    "func_name": "IndexingOptions.has_mask",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 814
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 147,
    "func_name": "IndexingOptions.has_indirect",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 2241
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 150,
    "func_name": "IndexingOptions.has_rindex",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 2436
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 153,
    "func_name": "IndexingOptions.has_tmpmask",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 3955
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 156,
    "func_name": "IndexingOptions.has_rmask",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 743
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 397,
    "func_name": "TritonPrinter._print_FloorDiv",
    "type_comments": [
      "(torch.utils._sympy.functions.FloorDiv) -> str"
    ],
    "samples": 500
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 526,
    "func_name": "triton_compute_type",
    "type_comments": [
      "(torch.dtype) -> str"
    ],
    "samples": 2610
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 555,
    "func_name": "triton_acc_type",
    "type_comments": [
      "(torch.dtype) -> str"
    ],
    "samples": 391
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 563,
    "func_name": "TritonCSEVariable.__init__",
    "type_comments": [
      "(str, torch.utils._sympy.value_ranges.ValueRanges) -> None"
    ],
    "samples": 6686
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 568,
    "func_name": "TritonCSEVariable.update_on_args",
    "type_comments": [
      "(str, Tuple[str, int], Dict) -> None",
      "(str, Tuple[bool, torch.dtype], Dict) -> None",
      "(str, Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.ir.LoopBodyBlock, int], Dict) -> None",
      "(str, Tuple[float, torch.dtype], Dict) -> None",
      "(str, Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable], Dict) -> None",
      "(str, Tuple[torch._inductor.codegen.triton.TritonCSEVariable], Dict) -> None",
      "(str, Tuple[torch._inductor.codegen.triton.TritonCSEVariable, int], Dict) -> None",
      "(str, Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch.dtype], Dict[str, torch.dtype]) -> None",
      "(str, Tuple[int, torch.dtype], Dict) -> None",
      "(str, Tuple[str, torch._inductor.codegen.triton.TritonCSEVariable], Dict) -> None",
      "(str, Tuple[sympy.core.mul.Mul, torch.dtype], Dict) -> None",
      "(str, Tuple[torch.utils._sympy.functions.FloatTrueDiv, torch.dtype], Dict) -> None",
      "(str, Tuple[sympy.core.numbers.Integer, torch.dtype], Dict) -> None",
      "(str, Tuple[sympy.functions.elementary.miscellaneous.Min, torch.dtype], Dict) -> None",
      "(str, Tuple[sympy.core.add.Add, torch.dtype], Dict) -> None",
      "(str, Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable], Dict) -> None",
      "(str, Tuple[sympy.core.symbol.Symbol, torch.dtype], Dict) -> None",
      "(str, Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.ir.LoopBodyBlock, float], Dict) -> None"
    ],
    "samples": 5844
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 582,
    "func_name": "to_dtype",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch.dtype, None) -> str",
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch.dtype, torch.dtype) -> str"
    ],
    "samples": 941
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 584,
    "func_name": "_get_min_elements_per_thread",
    "type_comments": [
      "(torch.dtype, torch.dtype) -> int"
    ],
    "samples": 864
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 644,
    "func_name": "_shaped_constant",
    "type_comments": [
      "(bool, torch.dtype, List[int]) -> str",
      "(int, torch.dtype, List[int]) -> str",
      "(float, torch.dtype, List[int]) -> str"
    ],
    "samples": 1811
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 662,
    "func_name": "abs",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 18
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 670,
    "func_name": "exp",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 99
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 694,
    "func_name": "relu",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> torch._inductor.codegen.triton.TritonCSEVariable"
    ],
    "samples": 199
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 712,
    "func_name": "minimum",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 56
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 716,
    "func_name": "maximum",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable) -> str",
      "(str, torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 243
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 720,
    "func_name": "where",
    "type_comments": [
      "(str, torch._inductor.virtualized.OpsValue, str) -> str",
      "(str, torch._inductor.codegen.triton.TritonCSEVariable, str) -> str",
      "(str, str, str) -> str",
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 634
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 893,
    "func_name": "log1p",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 905,
    "func_name": "sigmoid",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 22
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 994,
    "func_name": "constant",
    "type_comments": [
      "(int, torch.dtype) -> str",
      "(bool, torch.dtype) -> str",
      "(float, torch.dtype) -> str"
    ],
    "samples": 1811
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1003,
    "func_name": "index_expr",
    "type_comments": [
      "(sympy.core.numbers.Integer, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch.utils._sympy.functions.ModularIndexing, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(sympy.core.add.Add, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(sympy.core.symbol.Symbol, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(sympy.core.mul.Mul, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(sympy.functions.elementary.complexes.Abs, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(sympy.functions.elementary.miscellaneous.Max, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(sympy.core.numbers.One, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch.utils._sympy.functions.FloorDiv, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch.utils._sympy.functions.FloatTrueDiv, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch.utils._sympy.functions.Identity, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable"
    ],
    "samples": 528
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1016,
    "func_name": "masked",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.ir.LoopBodyBlock, int) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.ir.LoopBodyBlock, float) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.ir.LoopBodyBlock, float) -> torch._inductor.codegen.triton.TritonCSEVariable"
    ],
    "samples": 216
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1087,
    "func_name": "HelperFunctions.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 959
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1113,
    "func_name": "HelperFunctions.__iter__",
    "type_comments": [
      "() -> list_iterator"
    ],
    "samples": 709
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1146,
    "func_name": "TritonKernel.__init__",
    "type_comments": [
      "(str, Set[str], None, torch._inductor.runtime.hints.ReductionHint, int, None, *Union[sympy.core.mul.Mul, sympy.core.numbers.One]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, int, None, *Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, int, None, *Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, int, bool, *sympy.core.numbers.Integer) -> None",
      "(str, Set[str], Dict[str, str], torch._inductor.runtime.hints.ReductionHint, int, None, *Union[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, int, None, *Union[sympy.core.add.Add, sympy.core.numbers.One]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, int, None, *Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]) -> None",
      "(str, Set[str], None, torch._inductor.runtime.hints.ReductionHint, int, None, *Union[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> None",
      "(str, Set[str], Dict[str, str], torch._inductor.runtime.hints.ReductionHint, int, None, *sympy.core.numbers.One) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, int, None, *Union[sympy.core.mul.Mul, sympy.core.numbers.One]) -> None",
      "(str, Set[str], None, torch._inductor.runtime.hints.ReductionHint, int, None, *sympy.core.numbers.Integer) -> None",
      "(str, Set[str], None, torch._inductor.runtime.hints.ReductionHint, int, None, *Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]) -> None",
      "(str, Set[str], None, torch._inductor.runtime.hints.ReductionHint, int, None, *Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]) -> None",
      "(str, Set[str], None, torch._inductor.runtime.hints.ReductionHint, int, None, *sympy.core.numbers.One) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, int, None, *Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, int, None, *Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, int, None, *Union[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> None",
      "(str, Set, None, torch._inductor.runtime.hints.ReductionHint, int, None, *sympy.core.numbers.Integer) -> None"
    ],
    "samples": 959
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1189,
    "func_name": "TritonKernel.codegen_range_tree",
    "type_comments": [
      "() -> None"
    ],
    "samples": 959
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1211,
    "func_name": "TritonKernel.should_use_persistent_reduction",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 958
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1231,
    "func_name": "TritonKernel.want_no_x_dim",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 959
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1243,
    "func_name": "TritonKernel.indexing",
    "type_comments": [
      "(sympy.core.numbers.Zero, None, bool, None, bool) -> torch._inductor.codegen.triton.IndexingOptions",
      "(sympy.functions.elementary.miscellaneous.Min, None, bool, None, bool) -> torch._inductor.codegen.triton.IndexingOptions",
      "(sympy.functions.elementary.complexes.Abs, None, bool, None, bool) -> torch._inductor.codegen.triton.IndexingOptions",
      "(sympy.core.mul.Mul, None, bool, None, bool) -> torch._inductor.codegen.triton.IndexingOptions",
      "(sympy.core.numbers.Integer, None, bool, None, bool) -> torch._inductor.codegen.triton.IndexingOptions",
      "(torch.utils._sympy.functions.FloatTrueDiv, None, bool, None, bool) -> torch._inductor.codegen.triton.IndexingOptions",
      "(sympy.core.symbol.Symbol, None, bool, None, bool) -> torch._inductor.codegen.triton.IndexingOptions",
      "(torch.utils._sympy.functions.ModularIndexing, None, bool, None, bool) -> torch._inductor.codegen.triton.IndexingOptions",
      "(sympy.core.add.Add, None, bool, None, bool) -> torch._inductor.codegen.triton.IndexingOptions"
    ],
    "samples": 3430
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1653,
    "func_name": "TritonKernel.get_load_buffer",
    "type_comments": [
      "(torch._inductor.codegen.triton.IndexingOptions) -> torch._inductor.utils.IndentedBuffer"
    ],
    "samples": 2241
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1668,
    "func_name": "TritonKernel.load",
    "type_comments": [
      "(str, torch.utils._sympy.functions.Identity) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, sympy.core.numbers.Zero) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, sympy.core.mul.Mul) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, sympy.core.numbers.Integer) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, sympy.core.symbol.Symbol) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, torch.utils._sympy.functions.ModularIndexing) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, sympy.core.add.Add) -> torch._inductor.codegen.triton.TritonCSEVariable"
    ],
    "samples": 2236
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1760,
    "func_name": "TritonKernel.store",
    "type_comments": [
      "(str, sympy.core.numbers.Zero, torch._inductor.codegen.triton.TritonCSEVariable, None) -> None",
      "(str, sympy.core.add.Add, torch._inductor.codegen.triton.TritonCSEVariable, None) -> None",
      "(str, sympy.core.add.Add, torch._inductor.codegen.triton.TritonCSEVariable, str) -> None",
      "(str, sympy.core.symbol.Symbol, torch._inductor.codegen.triton.TritonCSEVariable, str) -> None",
      "(str, sympy.core.symbol.Symbol, torch._inductor.codegen.triton.TritonCSEVariable, None) -> None"
    ],
    "samples": 1287
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1838,
    "func_name": "TritonKernel.reduction_resize",
    "type_comments": [
      "(str) -> str",
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 432
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1847,
    "func_name": "TritonKernel.reduction",
    "type_comments": [
      "(torch.dtype, torch.dtype, str, torch._inductor.codegen.triton.TritonCSEVariable) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch.dtype, torch.dtype, str, torch._inductor.codegen.triton.TritonCSEVariable) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.dtype, torch.dtype, str, torch._inductor.codegen.triton.TritonCSEVariable) -> Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable]",
      "(torch.dtype, torch.dtype, str, Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable]) -> Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable]"
    ],
    "samples": 429
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1879,
    "func_name": "final_reduction",
    "type_comments": [
      "(str) -> str",
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 339
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1906,
    "func_name": "where_cond",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue, str) -> str",
      "(torch._inductor.codegen.triton.TritonCSEVariable, str) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch._inductor.codegen.triton.TritonCSEVariable, str) -> str",
      "(str, str) -> str"
    ],
    "samples": 441
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1915,
    "func_name": "_mask_value",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, str) -> torch._inductor.codegen.triton.TritonCSEVariable"
    ],
    "samples": 303
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2071,
    "func_name": "TritonKernel.store_reduction",
    "type_comments": [
      "(str, sympy.core.numbers.Zero, torch._inductor.codegen.triton.TritonCSEVariable) -> None",
      "(str, sympy.core.symbol.Symbol, torch._inductor.codegen.triton.TritonCSEVariable) -> None",
      "(str, sympy.core.add.Add, torch._inductor.codegen.triton.TritonCSEVariable) -> None"
    ],
    "samples": 413
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2310,
    "func_name": "TritonKernel.codegen_body",
    "type_comments": [
      "() -> None"
    ],
    "samples": 1065
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2463,
    "func_name": "TritonKernel._get_heuristic",
    "type_comments": [
      "() -> str"
    ],
    "samples": 709
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2471,
    "func_name": "inductor_meta_common",
    "type_comments": [
      "() -> Dict[str, Union[bool, str]]"
    ],
    "samples": 812
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2508,
    "func_name": "TritonKernel.codegen_kernel",
    "type_comments": [
      "(None) -> str"
    ],
    "samples": 709
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2677,
    "func_name": "TritonKernel._get_persistent_RBLOCK",
    "type_comments": [
      "(sympy.core.numbers.Integer) -> int"
    ],
    "samples": 974
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2689,
    "func_name": "TritonKernel.codegen_static_numels",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> None"
    ],
    "samples": 709
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2719,
    "func_name": "TritonKernel._get_grid_fn",
    "type_comments": [
      "() -> str"
    ],
    "samples": 709
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2722,
    "func_name": "TritonKernel.add_numel_to_call_args_and_grid",
    "type_comments": [
      "(str, List[str], List[torch.dtype], List) -> None",
      "(str, List[Union[int, str]], List[Union[torch.dtype, type]], List) -> None",
      "(str, List[Union[str, sympy.core.symbol.Symbol]], List[Union[sympy.core.assumptions.ManagedProperties, torch.dtype]], List) -> None"
    ],
    "samples": 709
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2736,
    "func_name": "TritonKernel.call_kernel",
    "type_comments": [
      "(str, None) -> None"
    ],
    "samples": 709
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2784,
    "func_name": "TritonKernel.create_cse_var",
    "type_comments": [
      "(*Union[str, torch.utils._sympy.value_ranges.ValueRanges]) -> torch._inductor.codegen.triton.TritonCSEVariable"
    ],
    "samples": 6686
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2787,
    "func_name": "TritonKernel.codegen_iteration_ranges_entry",
    "type_comments": [
      "(torch._inductor.codegen.simd.IterationRangesEntry) -> None"
    ],
    "samples": 1305
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2795,
    "func_name": "TritonKernel.iteration_ranges_ranges_code",
    "type_comments": [
      "(torch._inductor.codegen.simd.IterationRangesRoot) -> str"
    ],
    "samples": 1063
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2802,
    "func_name": "TritonKernel.iteration_ranges_scalar_code",
    "type_comments": [
      "(torch._inductor.codegen.simd.IterationRangesRoot, str) -> str"
    ],
    "samples": 124
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2808,
    "func_name": "TritonKernel.iteration_ranges_get_pid",
    "type_comments": [
      "(torch._inductor.codegen.simd.IterationRangesRoot) -> str"
    ],
    "samples": 967
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2827,
    "func_name": "TritonKernel._has_constant_mask",
    "type_comments": [
      "(torch._inductor.codegen.simd.IterationRangesRoot) -> bool"
    ],
    "samples": 6648
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2847,
    "func_name": "TritonKernel.filter_masks",
    "type_comments": [
      "(Set[str]) -> None",
      "(Set) -> None",
      "(Set[Union[str, torch._inductor.codegen.triton.TritonCSEVariable]]) -> None"
    ],
    "samples": 3278
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2852,
    "func_name": "TritonKernel.iteration_ranges_codegen_header",
    "type_comments": [
      "(torch._inductor.codegen.simd.IterationRangesRoot, torch._inductor.utils.IndentedBuffer) -> None"
    ],
    "samples": 1098
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2904,
    "func_name": "get_backend_features",
    "type_comments": [
      "(torch.device) -> Dict[torch._inductor.codegen.common.BackendFeature, None]"
    ],
    "samples": 158
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2908,
    "func_name": "TritonScheduling.codegen_comment",
    "type_comments": [
      "(List[torch._inductor.scheduler.SchedulerNode]) -> None",
      "(List[torch._inductor.scheduler.ForeachKernelSchedulerNode]) -> None",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]]) -> None"
    ],
    "samples": 812
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2934,
    "func_name": "TritonScheduling.define_kernel",
    "type_comments": [
      "(str, List[torch._inductor.scheduler.ForeachKernelSchedulerNode], torch._inductor.codegen.triton_foreach.ForeachKernel) -> str",
      "(str, List[torch._inductor.scheduler.SchedulerNode], torch._inductor.codegen.triton.TritonKernel) -> str",
      "(str, List[Union[torch._inductor.scheduler.SchedulerNode, type]], torch._inductor.codegen.triton.TritonKernel) -> str"
    ],
    "samples": 812
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_split_scan.py",
    "line": 17,
    "func_name": "TritonSplitScanKernel",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 59
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_utils.py",
    "line": 15,
    "func_name": "signature_of",
    "type_comments": [
      "(torch._inductor.codegen.common.TensorArg, str) -> str",
      "(torch._inductor.codegen.common.SizeArg, str) -> str"
    ],
    "samples": 2958
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_utils.py",
    "line": 56,
    "func_name": "signature_to_meta",
    "type_comments": [
      "(List[torch._inductor.codegen.common.TensorArg], str, None) -> Dict[int, str]",
      "(List[Union[torch._inductor.codegen.common.SizeArg, torch._inductor.codegen.common.TensorArg]], str, None) -> Dict[int, str]"
    ],
    "samples": 812
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_utils.py",
    "line": 70,
    "func_name": "is_unaligned_buffer",
    "type_comments": [
      "(torch._inductor.codegen.common.TensorArg) -> bool"
    ],
    "samples": 2423
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_utils.py",
    "line": 97,
    "func_name": "config_of",
    "type_comments": [
      "(List[Union[torch._inductor.codegen.common.SizeArg, torch._inductor.codegen.common.TensorArg]], None) -> triton.compiler.compiler.AttrsDescriptor",
      "(List[torch._inductor.codegen.common.TensorArg], None) -> triton.compiler.compiler.AttrsDescriptor"
    ],
    "samples": 812
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_utils.py",
    "line": 105,
    "func_name": "is_aligned",
    "type_comments": [
      "(torch._inductor.codegen.common.TensorArg, int, bool) -> bool",
      "(torch._inductor.codegen.common.SizeArg, int, bool) -> bool"
    ],
    "samples": 5360
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 73,
    "func_name": "buffer_reuse_key",
    "type_comments": [
      "(torch._inductor.ir.ComputedBuffer) -> Tuple[torch.device, torch.dtype, str]",
      "(torch._inductor.ir.ExternKernelAlloc) -> Tuple[torch.device, torch.dtype, str]",
      "(torch._inductor.ir.StorageBox) -> Tuple[torch.device, torch.dtype, str]",
      "(torch._inductor.ir.ConcatKernel) -> Tuple[torch.device, torch.dtype, str]",
      "(torch._inductor.ir.RandomSeeds) -> Tuple[torch.device, torch.dtype, str]",
      "(torch._inductor.ir.ExternKernelOut) -> Tuple[torch.device, torch.dtype, str]",
      "(torch._inductor.ir.DeviceCopy) -> Tuple[torch.device, torch.dtype, str]",
      "(torch._inductor.ir.MultiOutput) -> Tuple[torch.device, torch.dtype, str]"
    ],
    "samples": 1520
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 243,
    "func_name": "MemoryPlanningState.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 250,
    "func_name": "MemoryPlanningState.__contains__",
    "type_comments": [
      "(Tuple[torch.device, torch.dtype, str]) -> bool"
    ],
    "samples": 917
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 258,
    "func_name": "MemoryPlanningState.push",
    "type_comments": [
      "(Tuple[torch.device, torch.dtype, str], torch._inductor.codegen.wrapper.FreeIfNotReusedLine) -> None"
    ],
    "samples": 619
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 297,
    "func_name": "EnterDeviceContextManagerLine.codegen",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> None"
    ],
    "samples": 159
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 340,
    "func_name": "ExitDeviceContextManagerLine.codegen",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> None"
    ],
    "samples": 159
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 376,
    "func_name": "AllocateLine.plan",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.MemoryPlanningState) -> torch._inductor.codegen.wrapper.AllocateLine",
      "(torch._inductor.codegen.wrapper.MemoryPlanningState) -> torch._inductor.codegen.wrapper.NullLine",
      "(torch._inductor.codegen.wrapper.MemoryPlanningState) -> torch._inductor.codegen.wrapper.ReuseLine"
    ],
    "samples": 1223
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 396,
    "func_name": "AllocateLine.codegen",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> None"
    ],
    "samples": 713
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 407,
    "func_name": "FreeIfNotReusedLine.plan",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.MemoryPlanningState) -> torch._inductor.codegen.wrapper.FreeIfNotReusedLine"
    ],
    "samples": 641
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 419,
    "func_name": "FreeIfNotReusedLine.codegen",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> None"
    ],
    "samples": 641
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 431,
    "func_name": "ReuseLine.plan",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.MemoryPlanningState) -> torch._inductor.codegen.wrapper.NullLine",
      "(torch._inductor.codegen.wrapper.MemoryPlanningState) -> torch._inductor.codegen.wrapper.ReuseLine"
    ],
    "samples": 275
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 438,
    "func_name": "ReuseLine.codegen",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> None"
    ],
    "samples": 528
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 458,
    "func_name": "WrapperCodeGen.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 166
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 532,
    "func_name": "WrapperCodeGen.write_header",
    "type_comments": [
      "() -> None"
    ],
    "samples": 166
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 569,
    "func_name": "WrapperCodeGen.write_kernel_autotune_defs_header",
    "type_comments": [
      "() -> None"
    ],
    "samples": 166
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 583,
    "func_name": "write_triton_header_once",
    "type_comments": [
      "() -> None"
    ],
    "samples": 158
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 595,
    "func_name": "write_get_raw_stream_header_once",
    "type_comments": [
      "() -> None"
    ],
    "samples": 158
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 616,
    "func_name": "get_output_refs",
    "type_comments": [
      "() -> List",
      "() -> List[str]"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 620,
    "func_name": "WrapperCodeGen.mark_output_type",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 623,
    "func_name": "WrapperCodeGen.codegen_input_size_asserts",
    "type_comments": [
      "() -> None"
    ],
    "samples": 166
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 646,
    "func_name": "WrapperCodeGen.write_prefix",
    "type_comments": [
      "() -> None"
    ],
    "samples": 166
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 675,
    "func_name": "WrapperCodeGen.write_get_raw_stream",
    "type_comments": [
      "(int, torch._inductor.graph.GraphLowering) -> str"
    ],
    "samples": 158
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 684,
    "func_name": "WrapperCodeGen.push_codegened_graph",
    "type_comments": [
      "(torch._inductor.graph.GraphLowering) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 687,
    "func_name": "WrapperCodeGen.pop_codegened_graph",
    "type_comments": [
      "() -> torch._inductor.graph.GraphLowering"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 698,
    "func_name": "WrapperCodeGen.next_kernel_suffix",
    "type_comments": [
      "() -> str"
    ],
    "samples": 562
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 701,
    "func_name": "WrapperCodeGen.codegen_device_guard_enter",
    "type_comments": [
      "(int) -> None"
    ],
    "samples": 159
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 720,
    "func_name": "WrapperCodeGen.codegen_device_guard_exit",
    "type_comments": [
      "() -> None"
    ],
    "samples": 159
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 723,
    "func_name": "WrapperCodeGen.generate_return",
    "type_comments": [
      "(List[str]) -> None",
      "(List) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 729,
    "func_name": "WrapperCodeGen.generate_before_suffix",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 732,
    "func_name": "WrapperCodeGen.generate_end",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 735,
    "func_name": "WrapperCodeGen.generate_fallback_kernel",
    "type_comments": [
      "(torch._inductor.ir.FallbackKernel, List[str]) -> None"
    ],
    "samples": 121
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 738,
    "func_name": "WrapperCodeGen.generate_extern_kernel_alloc",
    "type_comments": [
      "(torch._inductor.ir.FallbackKernel, List[str]) -> None",
      "(torch._inductor.ir.ExternKernelAlloc, List[str]) -> None"
    ],
    "samples": 200
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 767,
    "func_name": "WrapperCodeGen.generate_extern_kernel_out",
    "type_comments": [
      "(str, str, None, List[str]) -> None"
    ],
    "samples": 339
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 832,
    "func_name": "generate",
    "type_comments": [
      "(bool) -> Tuple[str, List[Tuple[int, torch.fx.node.Node]]]"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 934,
    "func_name": "WrapperCodeGen.memory_plan_reuse",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 980,
    "func_name": "WrapperCodeGen.codegen_inputs",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer, Dict[str, torch._inductor.ir.TensorBox]) -> None",
      "(torch._inductor.utils.IndentedBuffer, Dict[str, sympy.core.symbol.Symbol]) -> None",
      "(torch._inductor.utils.IndentedBuffer, Dict[str, Union[sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox]]) -> None",
      "(torch._inductor.utils.IndentedBuffer, Dict[str, Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox]]) -> None"
    ],
    "samples": 166
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 998,
    "func_name": "is_expr",
    "type_comments": [
      "(Tuple[str, sympy.core.symbol.Symbol]) -> bool",
      "(Tuple[str, torch._inductor.ir.TensorBox]) -> bool"
    ],
    "samples": 1889
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1039,
    "func_name": "WrapperCodeGen.finalize_prefix",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1042,
    "func_name": "WrapperCodeGen.codegen_python_sizevar",
    "type_comments": [
      "(sympy.core.numbers.One, bool) -> str",
      "(int, bool) -> str",
      "(sympy.core.numbers.Zero, bool) -> str",
      "(sympy.core.numbers.Integer, bool) -> str",
      "(sympy.core.symbol.Symbol, bool) -> str",
      "(sympy.core.add.Add, bool) -> str",
      "(sympy.core.mul.Mul, bool) -> str"
    ],
    "samples": 8489
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1045,
    "func_name": "WrapperCodeGen.codegen_sizevar",
    "type_comments": [
      "(sympy.core.numbers.Integer) -> str",
      "(sympy.core.numbers.Zero) -> str",
      "(sympy.core.numbers.One) -> str",
      "(int) -> str"
    ],
    "samples": 649
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1048,
    "func_name": "WrapperCodeGen.codegen_tuple_access",
    "type_comments": [
      "(str, str, str) -> str"
    ],
    "samples": 146
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1051,
    "func_name": "WrapperCodeGen.codegen_python_shape_tuple",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, int, int, int]) -> str",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> str",
      "(List[int]) -> str",
      "(Tuple[int]) -> str",
      "(List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.numbers.One]) -> str",
      "(List[sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> str",
      "(Tuple[torch.utils._sympy.functions.FloorDiv, int, int, int, int]) -> str",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, int, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, int]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(torch.Size) -> str",
      "(Tuple[sympy.core.numbers.Integer]) -> str",
      "(Tuple[]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, int, sympy.core.numbers.Integer]) -> str",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> str",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> str",
      "(List) -> str",
      "(List[sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, int, int]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str"
    ],
    "samples": 4710
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1059,
    "func_name": "WrapperCodeGen.codegen_shape_tuple",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, int, int, int]) -> str",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> str",
      "(Tuple[int]) -> str",
      "(List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.numbers.One]) -> str",
      "(List[sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> str",
      "(Tuple[torch.utils._sympy.functions.FloorDiv, int, int, int, int]) -> str",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, int, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, int]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, int, sympy.core.numbers.Integer]) -> str",
      "(Tuple[]) -> str",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> str",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> str",
      "(List) -> str",
      "(List[sympy.core.numbers.One]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, int, int]) -> str",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str"
    ],
    "samples": 3291
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1075,
    "func_name": "WrapperCodeGen.codegen_reinterpret_view",
    "type_comments": [
      "(torch._inductor.ir.StorageBox, List[sympy.core.mul.Mul], List[sympy.core.numbers.One], sympy.core.numbers.Zero, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[int, sympy.core.numbers.Integer]], sympy.core.numbers.Zero, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[sympy.core.numbers.Integer], List[sympy.core.numbers.One], sympy.core.numbers.Zero, None) -> str",
      "(torch._inductor.ir.ComputedBuffer, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], sympy.core.numbers.Zero, None) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero, None) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Integer, None) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.One], sympy.core.numbers.Integer, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.ComputedBuffer, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.ExternKernelAlloc, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Integer, None) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero, None) -> str",
      "(torch._inductor.ir.ExternKernelOut, List[int], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.ExternKernelOut, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.ComputedBuffer, List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero, None) -> str",
      "(torch._inductor.ir.StorageBox, List[sympy.core.numbers.Integer], List[sympy.core.numbers.One], sympy.core.numbers.Integer, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero, None) -> str",
      "(torch._inductor.ir.ComputedBuffer, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero, None) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Integer, None) -> str",
      "(torch._inductor.ir.StorageBox, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Integer, None) -> str",
      "(torch._inductor.ir.StorageBox, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Integer, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[sympy.core.numbers.Integer], List[sympy.core.numbers.One], sympy.core.numbers.Integer, None) -> str",
      "(torch._inductor.ir.StorageBox, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Integer, None) -> str",
      "(torch._inductor.ir.ExternKernelOut, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[sympy.core.numbers.Integer], List[sympy.core.numbers.One], sympy.core.numbers.Zero, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.ExternKernelAlloc, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.MultiOutput, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero, None) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[int, sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.ExternKernelOut, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer], sympy.core.numbers.Zero, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero, None) -> str",
      "(torch._inductor.ir.ComputedBuffer, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.ExternKernelOut, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer], sympy.core.numbers.One, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Integer, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[int, sympy.core.numbers.One]], sympy.core.numbers.Zero, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.ComputedBuffer, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.ComputedBuffer, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int, torch._inductor.utils.IndentedBuffer) -> str",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero, torch._inductor.utils.IndentedBuffer) -> str"
    ],
    "samples": 649
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1084,
    "func_name": "WrapperCodeGen.codegen_multi_output",
    "type_comments": [
      "(str, str) -> None"
    ],
    "samples": 147
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1108,
    "func_name": "WrapperCodeGen.benchmark_compiled_module",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1109,
    "func_name": "add_fake_input",
    "type_comments": [
      "(str, List, List, torch.device, torch.dtype) -> None",
      "(str, torch.Size, Tuple[int, int, int], torch.device, torch.dtype) -> None",
      "(str, torch.Size, Tuple[int, int, int, int], torch.device, torch.dtype) -> None",
      "(str, List[int], List[int], torch.device, torch.dtype) -> None",
      "(str, torch.Size, Tuple[int], torch.device, torch.dtype) -> None",
      "(str, torch.Size, Tuple[int, int], torch.device, torch.dtype) -> None"
    ],
    "samples": 1212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1188,
    "func_name": "WrapperCodeGen.add_benchmark_harness",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1206,
    "func_name": "WrapperCodeGen.define_kernel",
    "type_comments": [
      "(str, str, None, bool) -> None",
      "(str, str, str, bool) -> None"
    ],
    "samples": 562
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1503,
    "func_name": "WrapperCodeGen.generate_default_grid",
    "type_comments": [
      "(str, List[sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Integer]",
      "(str, List[Union[sympy.core.numbers.Integer, torch._inductor.codegen.wrapper.SymbolicCallArg]]) -> List[Union[sympy.core.numbers.Integer, torch._inductor.codegen.wrapper.SymbolicCallArg]]",
      "(str, List[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(str, List[torch._inductor.codegen.wrapper.SymbolicCallArg]) -> List[torch._inductor.codegen.wrapper.SymbolicCallArg]",
      "(str, List[sympy.core.numbers.One]) -> List[sympy.core.numbers.One]"
    ],
    "samples": 709
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1506,
    "func_name": "WrapperCodeGen.prepare_triton_kernel_call",
    "type_comments": [
      "(int, List[Union[str, torch._inductor.codegen.wrapper.SymbolicCallArg]]) -> Tuple[int, List[str]]",
      "(int, List[str]) -> Tuple[int, List[str]]",
      "(int, List[Union[int, str, sympy.core.numbers.Integer]]) -> Tuple[int, List[str]]",
      "(int, List[Union[str, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[int, List[str]]",
      "(int, List[Union[int, str, torch._inductor.codegen.wrapper.SymbolicCallArg]]) -> Tuple[int, List[str]]",
      "(int, List[Union[str, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[int, List[str]]",
      "(int, List[Union[str, sympy.core.numbers.Integer]]) -> Tuple[int, List[str]]",
      "(int, List[Union[str, sympy.core.symbol.Symbol]]) -> Tuple[int, List[str]]",
      "(None, List[str]) -> Tuple[int, List[str]]",
      "(int, List[Union[str, sympy.core.numbers.Integer, torch._inductor.codegen.wrapper.SymbolicCallArg]]) -> Tuple[int, List[str]]",
      "(int, List[Union[str, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[int, List[str]]",
      "(int, List[Union[str, sympy.core.numbers.One]]) -> Tuple[int, List[str]]",
      "(int, List[Union[int, str]]) -> Tuple[int, List[str]]"
    ],
    "samples": 812
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1507,
    "func_name": "wrap_arg",
    "type_comments": [
      "(str) -> str",
      "(torch._inductor.codegen.wrapper.SymbolicCallArg) -> str",
      "(sympy.core.numbers.One) -> str",
      "(int) -> str",
      "(sympy.core.numbers.Integer) -> str",
      "(sympy.core.symbol.Symbol) -> str"
    ],
    "samples": 2958
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1574,
    "func_name": "WrapperCodeGen.generate_kernel_call",
    "type_comments": [
      "(str, List[str], List[torch._inductor.codegen.wrapper.SymbolicCallArg], int, bool, bool, List[torch.dtype], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[int, str]], List[sympy.core.numbers.Integer], int, bool, bool, List[Union[torch.dtype, type]], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[str, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.One], int, bool, bool, List[Union[sympy.core.assumptions.ManagedProperties, sympy.core.singleton.Singleton, torch.dtype]], None, str, Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[str, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol], int, bool, bool, List[Union[sympy.core.assumptions.ManagedProperties, torch.dtype]], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[int, str]], List[sympy.core.numbers.Integer], int, bool, bool, List[Union[torch.dtype, type]], None, str, Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[str, sympy.core.numbers.One]], List[sympy.core.numbers.One], int, bool, bool, List[Union[sympy.core.singleton.Singleton, torch.dtype]], None, str, Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[str], None, None, bool, bool, List[str], None, str, None) -> None",
      "(str, List[str], Tuple[int, int, int], None, bool, bool, List[torch.dtype], None, str, None) -> None",
      "(str, List[Union[str, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer], int, bool, bool, List[Union[sympy.core.assumptions.ManagedProperties, torch.dtype]], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[str, sympy.core.symbol.Symbol]], List[torch._inductor.codegen.wrapper.SymbolicCallArg], int, bool, bool, List[Union[sympy.core.assumptions.ManagedProperties, torch.dtype]], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[str, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol], int, bool, bool, List[Union[sympy.core.assumptions.ManagedProperties, torch.dtype]], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[str, sympy.core.numbers.Integer]], List[sympy.core.numbers.Integer], int, bool, bool, List[Union[sympy.core.assumptions.ManagedProperties, torch.dtype]], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[str, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer], int, bool, bool, List[Union[sympy.core.assumptions.ManagedProperties, torch.dtype]], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[str], List[sympy.core.numbers.One], int, bool, bool, List[torch.dtype], None, str, Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[str, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.One], int, bool, bool, List[Union[sympy.core.assumptions.ManagedProperties, sympy.core.singleton.Singleton, torch.dtype]], None, str, Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[str, torch._inductor.codegen.wrapper.SymbolicCallArg]], List[torch._inductor.codegen.wrapper.SymbolicCallArg], int, bool, bool, List[Union[torch.dtype, type]], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[str, torch._inductor.codegen.wrapper.SymbolicCallArg]], List[Union[sympy.core.numbers.Integer, torch._inductor.codegen.wrapper.SymbolicCallArg]], int, bool, bool, List[Union[torch.dtype, type]], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[str], List[sympy.core.numbers.Integer], int, bool, bool, List[torch.dtype], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[str], List[sympy.core.symbol.Symbol], int, bool, bool, List[torch.dtype], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[str, sympy.core.numbers.Integer, torch._inductor.codegen.wrapper.SymbolicCallArg]], List[sympy.core.numbers.Integer], int, bool, bool, List[Union[sympy.core.assumptions.ManagedProperties, torch.dtype, type]], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[int, str, sympy.core.numbers.Integer]], List[sympy.core.numbers.Integer], int, bool, bool, List[Union[sympy.core.assumptions.ManagedProperties, torch.dtype, type]], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[str, sympy.core.numbers.Integer, torch._inductor.codegen.wrapper.SymbolicCallArg]], List[Union[sympy.core.numbers.Integer, torch._inductor.codegen.wrapper.SymbolicCallArg]], int, bool, bool, List[Union[sympy.core.assumptions.ManagedProperties, torch.dtype, type]], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[int, str, torch._inductor.codegen.wrapper.SymbolicCallArg]], List[torch._inductor.codegen.wrapper.SymbolicCallArg], int, bool, bool, List[Union[torch.dtype, type]], None, str, Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None",
      "(str, List[Union[int, str]], List[torch._inductor.codegen.wrapper.SymbolicCallArg], int, bool, bool, List[Union[torch.dtype, type]], None, str, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]]) -> None"
    ],
    "samples": 813
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1676,
    "func_name": "WrapperCodeGen.writeline",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.ReuseLine) -> None",
      "(torch._inductor.codegen.wrapper.FreeIfNotReusedLine) -> None",
      "(torch._inductor.codegen.common.DeferredLine) -> None",
      "(torch._inductor.codegen.wrapper.AllocateLine) -> None",
      "(torch._inductor.codegen.wrapper.ExitDeviceContextManagerLine) -> None",
      "(torch._inductor.codegen.wrapper.EnterDeviceContextManagerLine) -> None",
      "(str) -> None"
    ],
    "samples": 3440
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1683,
    "func_name": "WrapperCodeGen.enter_context",
    "type_comments": [
      "(torch.fx.node.Node) -> None"
    ],
    "samples": 960
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1686,
    "func_name": "WrapperCodeGen.val_to_arg_str",
    "type_comments": [
      "(List[int], None) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.fx.immutable_collections.immutable_list, None) -> pyannotate_runtime.collect_types.UnknownType",
      "(None, None) -> str",
      "(Tuple[int, int], None) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.SymInt, None) -> str",
      "(float, None) -> str",
      "(Tuple[int], None) -> pyannotate_runtime.collect_types.UnknownType",
      "(bool, None) -> str",
      "(int, None) -> str",
      "(torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, None) -> str",
      "(str, None) -> str"
    ],
    "samples": 919
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1716,
    "func_name": "WrapperCodeGen.make_buffer_allocation",
    "type_comments": [
      "(torch._inductor.ir.RandomSeeds) -> str",
      "(torch._inductor.ir.StorageBox) -> str",
      "(torch._inductor.ir.ComputedBuffer) -> str",
      "(torch._inductor.ir.ExternKernelOut) -> str",
      "(torch._inductor.ir.DeviceCopy) -> str"
    ],
    "samples": 713
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1723,
    "func_name": "WrapperCodeGen.make_allocation",
    "type_comments": [
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, int, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One], Tuple[sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(str, torch.device, torch.dtype, Tuple[int, int, int], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[int, int, sympy.core.numbers.One], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[torch.utils._sympy.functions.FloorDiv, int, int, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer], Tuple[sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.mul.Mul]) -> str",
      "(str, torch.device, torch.dtype, Tuple[], Tuple[]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.mul.Mul]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, int, int], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One, int], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.One], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, int], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One], Tuple[sympy.core.numbers.Integer, int, sympy.core.numbers.Integer]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, int, sympy.core.numbers.One], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.mul.Mul]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, int]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, int, int, int], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[int], Tuple[sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, int, int, int], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One], Tuple[sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.One, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, int]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.numbers.One, sympy.core.numbers.One], Tuple[sympy.core.mul.Mul, sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.mul.Mul]) -> str",
      "(str, torch.device, torch.dtype, Tuple[torch.utils._sympy.functions.FloorDiv, int, int, int, int], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.mul.Mul]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.mul.Mul], Tuple[sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, int]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, int, sympy.core.numbers.One], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.One], Tuple[sympy.core.numbers.One, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str",
      "(str, torch.device, torch.dtype, Tuple[sympy.core.symbol.Symbol, int], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> str"
    ],
    "samples": 713
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1743,
    "func_name": "WrapperCodeGen.make_buffer_free",
    "type_comments": [
      "(torch._inductor.ir.RandomSeeds) -> str",
      "(torch._inductor.ir.InputBuffer) -> str",
      "(torch._inductor.ir.ExternKernelAlloc) -> str",
      "(torch._inductor.ir.MultiOutput) -> str",
      "(torch._inductor.ir.ComputedBuffer) -> str",
      "(torch._inductor.ir.ExternKernelOut) -> str",
      "(torch._inductor.ir.FallbackKernel) -> str",
      "(torch._inductor.ir.ConcatKernel) -> str"
    ],
    "samples": 1491
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1749,
    "func_name": "WrapperCodeGen.codegen_exact_buffer_reuse",
    "type_comments": [
      "(str, str, str) -> str"
    ],
    "samples": 403
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1752,
    "func_name": "WrapperCodeGen.make_buffer_reuse",
    "type_comments": [
      "(torch._inductor.ir.ExternKernelAlloc, torch._inductor.ir.StorageBox, bool) -> str",
      "(torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ComputedBuffer, bool) -> str",
      "(torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ExternKernelOut, bool) -> str",
      "(torch._inductor.ir.ExternKernelAlloc, torch._inductor.ir.ComputedBuffer, bool) -> str",
      "(torch._inductor.ir.ExternKernelOut, torch._inductor.ir.ComputedBuffer, bool) -> str",
      "(torch._inductor.ir.MultiOutput, torch._inductor.ir.ExternKernelOut, bool) -> str",
      "(torch._inductor.ir.ExternKernelOut, torch._inductor.ir.ExternKernelOut, bool) -> str",
      "(torch._inductor.ir.MultiOutput, torch._inductor.ir.ComputedBuffer, bool) -> str"
    ],
    "samples": 528
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1772,
    "func_name": "WrapperCodeGen.codegen_deferred_allocation",
    "type_comments": [
      "(str, torch._inductor.ir.NonOwningLayout) -> None"
    ],
    "samples": 70
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1781,
    "func_name": "WrapperCodeGen.codegen_allocation",
    "type_comments": [
      "(torch._inductor.ir.ExternKernelOut) -> None",
      "(torch._inductor.ir.ConcatKernel) -> None",
      "(torch._inductor.ir.ExternKernelAlloc) -> None",
      "(torch._inductor.ir.ComputedBuffer) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.StorageBox) -> None",
      "(torch._inductor.ir.ComputedBuffer) -> None",
      "(torch._inductor.ir.RandomSeeds) -> None",
      "(torch._inductor.ir.MultiOutput) -> None"
    ],
    "samples": 1614
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1808,
    "func_name": "WrapperCodeGen.codegen_free",
    "type_comments": [
      "(torch._inductor.ir.FallbackKernel) -> None",
      "(torch._inductor.ir.ExternKernelOut) -> None",
      "(torch._inductor.ir.ConcatKernel) -> None",
      "(torch._inductor.ir.ExternKernelAlloc) -> None",
      "(torch._inductor.ir.InputBuffer) -> None",
      "(torch._inductor.ir.ComputedBuffer) -> None",
      "(torch._inductor.ir.RandomSeeds) -> None",
      "(torch._inductor.ir.MultiOutput) -> None"
    ],
    "samples": 1453
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1826,
    "func_name": "WrapperCodeGen.can_reuse",
    "type_comments": [
      "(torch._inductor.ir.RandomSeeds, None) -> bool",
      "(torch._inductor.ir.ComputedBuffer, None) -> bool",
      "(torch._inductor.ir.MultiOutput, None) -> bool",
      "(torch._inductor.ir.ConcatKernel, None) -> bool",
      "(torch._inductor.ir.ExternKernelOut, None) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.ir.FallbackKernel, None) -> bool",
      "(torch._inductor.ir.ExternKernelAlloc, None) -> bool",
      "(torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool"
    ],
    "samples": 1385
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1845,
    "func_name": "WrapperCodeGen.codegen_inplace_reuse",
    "type_comments": [
      "(torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ComputedBuffer) -> None",
      "(torch._inductor.ir.ExternKernelOut, torch._inductor.ir.ComputedBuffer) -> None",
      "(torch._inductor.ir.ExternKernelAlloc, torch._inductor.ir.ComputedBuffer) -> None",
      "(torch._inductor.ir.MultiOutput, torch._inductor.ir.ComputedBuffer) -> None"
    ],
    "samples": 275
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1953,
    "func_name": "statically_known_int_or_none",
    "type_comments": [
      "(sympy.core.numbers.Integer) -> int",
      "(sympy.core.numbers.One) -> int",
      "(sympy.core.symbol.Symbol) -> None",
      "(sympy.core.mul.Mul) -> None",
      "(sympy.core.add.Add) -> None"
    ],
    "samples": 578
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1965,
    "func_name": "statically_known_list_of_ints_or_none",
    "type_comments": [
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> None",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> None",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> List[int]",
      "(List[sympy.core.numbers.Integer]) -> List[int]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(List) -> List",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> None"
    ],
    "samples": 329
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/xpu/device_op_overrides.py",
    "line": 5,
    "func_name": "XPUDeviceOpOverrides",
    "type_comments": [
      "() -> None"
    ],
    "samples": 54
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/comms.py",
    "line": 324,
    "func_name": "reinplace_fsdp_all_gather",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/comms.py",
    "line": 361,
    "func_name": "remove_unused_getitem",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 99,
    "func_name": "get_expanded_dims",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor) -> List"
    ],
    "samples": 1202
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 105,
    "func_name": "index_expanded_dims",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, List) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 1202
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 111,
    "func_name": "complex_memory_overlap",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor) -> bool"
    ],
    "samples": 1202
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 130,
    "func_name": "get_static_input_idxs",
    "type_comments": [
      "(int) -> List",
      "(int) -> List[int]"
    ],
    "samples": 174
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 143,
    "func_name": "_step_logger",
    "type_comments": [
      "() -> function"
    ],
    "samples": 61
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 235,
    "func_name": "_get_subgraph_names",
    "type_comments": [
      "(torch.fx.GraphModule) -> Iterator"
    ],
    "samples": 584
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 256,
    "func_name": "_recursive_pre_grad_passes",
    "type_comments": [
      "(torch.fx.GraphModule, List[Union[torch.Tensor, torch.nn.parameter.Parameter]]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[torch.Tensor]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[torch.nn.parameter.Parameter]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[torch.SymInt]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch.Tensor, torch.nn.parameter.Parameter]]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch.Tensor]]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]]) -> torch.fx.GraphModule"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 265,
    "func_name": "_recursive_joint_graph_passes",
    "type_comments": [
      "(torch.fx.GraphModule) -> None"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 272,
    "func_name": "_recursive_post_grad_passes",
    "type_comments": [
      "(torch.fx.GraphModule, bool) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 336,
    "func_name": "is_tf32_warning_applicable",
    "type_comments": [
      "(torch.fx.GraphModule) -> bool"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 355,
    "func_name": "maybe_disable_comprehensive_padding",
    "type_comments": [
      "(List[torch._subclasses.fake_tensor.FakeTensor]) -> contextlib.nullcontext",
      "(List[torch.SymInt]) -> torch.utils._config_module:ConfigModule.patch.<locals>.ConfigPatch",
      "(List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]]) -> contextlib.nullcontext",
      "(List[torch.SymInt]) -> contextlib.nullcontext"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 371,
    "func_name": "fake_tensor_prop",
    "type_comments": [
      "(torch.fx.GraphModule, List, bool) -> torch._subclasses.fake_tensor.FakeTensorMode",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], bool) -> torch._subclasses.fake_tensor.FakeTensorMode",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], bool) -> torch._subclasses.fake_tensor.FakeTensorMode",
      "(torch.fx.GraphModule, List[torch.SymInt], bool) -> torch._subclasses.fake_tensor.FakeTensorMode"
    ],
    "samples": 284
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 399,
    "func_name": "should_use_remote_fx_graph_cache",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 182
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 423,
    "func_name": "wrapper",
    "type_comments": [
      "(*Union[List[torch.SymInt], torch.fx.GraphModule]) -> torch._inductor.codecache.CompiledFxGraph",
      "(*Union[List, torch.fx.GraphModule]) -> function",
      "(*Union[List[torch._subclasses.fake_tensor.FakeTensor], torch.fx.GraphModule]) -> function",
      "(*Union[List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch.fx.GraphModule]) -> pyannotate_runtime.collect_types.NoReturnType",
      "(*Union[List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch.fx.GraphModule]) -> torch._inductor.codecache.CompiledFxGraph",
      "(*Union[List[torch._subclasses.fake_tensor.FakeTensor], torch.fx.GraphModule]) -> torch._inductor.codecache.CompiledFxGraph",
      "(*Union[List[torch._subclasses.fake_tensor.FakeTensor], torch.fx.GraphModule]) -> pyannotate_runtime.collect_types.NoReturnType"
    ],
    "samples": 245
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 438,
    "func_name": "compile_fx_inner",
    "type_comments": [
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch._inductor.utils.BoxedBool, List[int], bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], None, None) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], bool, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List, torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict, bool, None) -> function",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], bool, None) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch.fx.GraphModule, List, torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict, None, None) -> function",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], None, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List[int], bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], None, None) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List[int], bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], None, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List[int], bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict, None, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch._inductor.utils.BoxedBool, List[int], bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], None, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch.SymInt], torch._inductor.utils.BoxedBool, List[int], bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], None, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], None, None) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], None, None) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], None, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch.SymInt], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], None, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], bool, None) -> function",
      "(torch.fx.GraphModule, List, torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], bool, None) -> function",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, torch._inductor.cudagraph_utils.BoxedDeviceIndex, Dict[str, None], bool, None) -> torch._inductor.codecache.CompiledFxGraph"
    ],
    "samples": 245
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 712,
    "func_name": "fx_codegen_and_compile",
    "type_comments": [
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, Dict[str, None], bool, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, Dict[str, None], bool, None) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, Dict[str, None], None, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch.SymInt], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, Dict[str, None], None, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List[int], bool, int, bool, bool, bool, Dict[str, None], None, None) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch._inductor.utils.BoxedBool, List[int], bool, int, bool, bool, bool, Dict[str, None], None, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch._inductor.utils.BoxedBool, List[int], bool, int, bool, bool, bool, Dict[str, None], None, None) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List[int], bool, int, bool, bool, bool, Dict[str, None], None, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch.SymInt], torch._inductor.utils.BoxedBool, List[int], bool, int, bool, bool, bool, Dict[str, None], None, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List[int], bool, int, bool, bool, bool, Dict, None, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, Dict[str, None], None, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, Dict[str, None], bool, None) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, Dict[str, None], None, None) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch._inductor.utils.BoxedBool, List, bool, int, bool, bool, bool, Dict[str, None], None, None) -> pyannotate_runtime.collect_types.NoReturnType"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 942,
    "func_name": "get_input_idxs_to_check",
    "type_comments": [
      "(List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List[int]) -> List",
      "(List[torch.SymInt], List) -> List",
      "(List[torch._subclasses.fake_tensor.FakeTensor], List) -> List[int]",
      "(List[torch.SymInt], List[int]) -> List[int]",
      "(List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List[int]) -> List[int]",
      "(List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List) -> List[int]",
      "(List[torch._subclasses.fake_tensor.FakeTensor], List[int]) -> List[int]"
    ],
    "samples": 182
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 990,
    "func_name": "cudagraphify",
    "type_comments": [
      "(function, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List, int, List[str], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List[Optional[str]], bool, bool, Tuple[torch.Tensor, torch.Tensor], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List[str], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[int, int, int, int, int, int, int, int, int, int]) -> function",
      "(function, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List[int], int, List, bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List[str], bool, bool, Tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor], Tuple[torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List[str], bool, bool, Tuple[torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter], Tuple[torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List, bool, bool, Tuple[torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor], Tuple[torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List, bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[int, int, int, int, int, int, int, int, int, int]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List, bool, bool, Tuple[], Tuple[torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List, int, List[Optional[str]], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List[Optional[str]], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List[Optional[str]], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List, bool, bool, Tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor], Tuple[torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List[Optional[str]], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List, int, List[str], bool, bool, Tuple[torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List[str], bool, bool, Tuple[torch.nn.parameter.Parameter, torch.Tensor], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List, int, List[str], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List[int], int, List[Optional[str]], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List[int], int, List[str], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List, bool, bool, Tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List[str], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List[int], int, List[Optional[str]], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List[Optional[str]], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[int, int, int, int, int, int, int, int, int, int]) -> function",
      "(function, List[torch.SymInt], List[int], int, List[str], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List, bool, bool, Tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor], Tuple[torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List[Optional[str]], bool, bool, Tuple[torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List[str], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List, int, List[Optional[str]], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List[int], int, List[Optional[str]], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List[str], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List[str], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List[int], int, List[str], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List[str], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List[int], int, List[Optional[str]], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List[str], bool, bool, Tuple[torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter], Tuple[torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List[Optional[str]], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List[Optional[str]], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[int, int, int, int, int, int, int, int, int]) -> function",
      "(function, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List, int, List[str], bool, bool, Tuple[torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List[str], bool, bool, Tuple[], Tuple[torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List[str], bool, bool, Tuple[torch.Tensor, torch.Tensor], Tuple[torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List, bool, bool, Tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List[str], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List[int], int, List[Optional[str]], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List[str], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List, bool, bool, Tuple[torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.nn.parameter.Parameter, torch.Tensor, torch.Tensor], Tuple[torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List, int, List[str], bool, bool, Tuple[torch.Tensor], Tuple[torch.fx.node.Node], Tuple[]) -> function",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], List[int], int, List[Optional[str]], bool, bool, Tuple[], Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node], Tuple[]) -> function"
    ],
    "samples": 173
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 1286,
    "func_name": "compile_fx",
    "type_comments": [
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch.Tensor, torch.nn.parameter.Parameter]], function, None, None) -> function",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch.Tensor]], function, None, None) -> function",
      "(torch.fx.GraphModule, List[torch.SymInt], function, None, None) -> function",
      "(torch.fx.GraphModule, List[torch.Tensor], function, None, None) -> function",
      "(torch.fx.GraphModule, List[torch.Tensor], function, Dict, None) -> function",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch.Tensor]], function, None, None) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch.fx.GraphModule, List[torch.nn.parameter.Parameter], function, None, None) -> function",
      "(torch.fx.GraphModule, List[torch.Tensor], function, None, None) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch.fx.GraphModule, List, function, None, None) -> function",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], function, None, None) -> function",
      "(torch.fx.GraphModule, List[Union[torch.Tensor, torch.nn.parameter.Parameter]], function, None, None) -> function"
    ],
    "samples": 210
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 1389,
    "func_name": "fw_compiler_base",
    "type_comments": [
      "(torch.fx.GraphModule, List, bool) -> function",
      "(torch.fx.GraphModule, List[torch.SymInt], bool) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], bool) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], bool) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], bool) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], bool) -> pyannotate_runtime.collect_types.NoReturnType"
    ],
    "samples": 174
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 1481,
    "func_name": "partition_fn",
    "type_comments": [
      "(torch.fx.GraphModule, Tuple[List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], List[torch._subclasses.fake_tensor.FakeTensor]]) -> Tuple[torch.fx.GraphModule, torch.fx.GraphModule]",
      "(torch.fx.GraphModule, Tuple[List[torch._subclasses.fake_tensor.FakeTensor], List[torch._subclasses.fake_tensor.FakeTensor]]) -> Tuple[torch.fx.GraphModule, torch.fx.GraphModule]"
    ],
    "samples": 76
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 1559,
    "func_name": "_shape_env_from_inputs",
    "type_comments": [
      "(List[torch.SymInt]) -> torch.fx.experimental.symbolic_shapes.ShapeEnv",
      "(List[torch._subclasses.fake_tensor.FakeTensor]) -> torch.fx.experimental.symbolic_shapes.ShapeEnv",
      "(List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]]) -> torch.fx.experimental.symbolic_shapes.ShapeEnv"
    ],
    "samples": 304
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 1580,
    "func_name": "graph_returns_tuple",
    "type_comments": [
      "(torch.fx.GraphModule) -> bool"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 1646,
    "func_name": "_check_triton_bf16_support",
    "type_comments": [
      "(torch._inductor.graph.GraphLowering) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_worker/subproc_pool.py",
    "line": 38,
    "func_name": "_pack_msg",
    "type_comments": [
      "(int, int) -> bytes"
    ],
    "samples": 566
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_worker/subproc_pool.py",
    "line": 51,
    "func_name": "_send_msg",
    "type_comments": [
      "(_io.BufferedWriter, int, bytes) -> None"
    ],
    "samples": 566
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_worker/subproc_pool.py",
    "line": 143,
    "func_name": "SubprocPool.submit",
    "type_comments": [
      "(function, *Union[Dict[str, str], functools.partial]) -> concurrent.futures._base.Future"
    ],
    "samples": 566
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/config.py",
    "line": 9,
    "func_name": "is_fbcode",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 940
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/constant_folding.py",
    "line": 48,
    "func_name": "ConstantFolder.__init__",
    "type_comments": [
      "(torch.fx.GraphModule, bool) -> None"
    ],
    "samples": 330
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/constant_folding.py",
    "line": 70,
    "func_name": "ConstantFolder.is_impure",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 567
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/constant_folding.py",
    "line": 90,
    "func_name": "ConstantFolder.node_to_last_non_output_use",
    "type_comments": [
      "() -> collections.defaultdict"
    ],
    "samples": 330
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/constant_folding.py",
    "line": 99,
    "func_name": "add_use",
    "type_comments": [
      "(torch.fx.node.Node) -> None"
    ],
    "samples": 10431
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/constant_folding.py",
    "line": 115,
    "func_name": "ConstantFolder.run_node",
    "type_comments": [
      "(torch.fx.node.Node) -> Tuple[]",
      "(torch.fx.node.Node) -> torch.SymInt",
      "(torch.fx.node.Node) -> torch.nn.parameter.Parameter",
      "(torch.fx.node.Node) -> Tuple[object]",
      "(torch.fx.node.Node) -> Tuple[object, object, object]",
      "(torch.fx.node.Node) -> object",
      "(torch.fx.node.Node) -> torch.fx.immutable_collections.immutable_list",
      "(torch.fx.node.Node) -> torch.Tensor",
      "(torch.fx.node.Node) -> Tuple[object, object]"
    ],
    "samples": 6855
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/constant_folding.py",
    "line": 119,
    "func_name": "set_env",
    "type_comments": [
      "(torch.fx.node.Node) -> None"
    ],
    "samples": 641
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/constant_folding.py",
    "line": 205,
    "func_name": "ConstantFolder.run",
    "type_comments": [
      "() -> Tuple[object, object]",
      "() -> Tuple[object, object, object]",
      "() -> Tuple[object]",
      "() -> Tuple[object, object, object, object, object, object]",
      "() -> Tuple[Tuple[object, object, object], List[object]]",
      "() -> Tuple[Tuple[object, object], List]",
      "() -> Tuple[Tuple[object, object, object, object], List[Optional[object]]]",
      "() -> Tuple[Tuple[object, object], List[object]]",
      "() -> Tuple[Tuple[object], List[Optional[object]]]",
      "() -> Tuple[Tuple[object, object], List[Optional[object]]]",
      "() -> Tuple[Tuple[object, object, object, object, object], List[object]]",
      "() -> Tuple[]",
      "() -> Tuple[Tuple[object, object, object, object, object, object, object, object, object, object], List[object]]",
      "() -> Tuple[Tuple[object, object, object, object], List[object]]",
      "() -> Tuple[Tuple[object, object, object, object, object], List]",
      "() -> Tuple[Tuple[object], List[object]]",
      "() -> Tuple[object, object, object, object]"
    ],
    "samples": 330
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_trees.py",
    "line": 121,
    "func_name": "GraphID",
    "type_comments": [
      "() -> None"
    ],
    "samples": 52
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_trees.py",
    "line": 183,
    "func_name": "TreeManagerContainer",
    "type_comments": [
      "() -> None"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_trees.py",
    "line": 285,
    "func_name": "MarkStepBox",
    "type_comments": [
      "() -> None"
    ],
    "samples": 54
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_trees.py",
    "line": 416,
    "func_name": "StorageWeakRefWrapper",
    "type_comments": [
      "() -> None"
    ],
    "samples": 57
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_trees.py",
    "line": 539,
    "func_name": "CUDAWarmupNode",
    "type_comments": [
      "() -> None"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_trees.py",
    "line": 684,
    "func_name": "OutputAliasInfo",
    "type_comments": [
      "() -> None"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_trees.py",
    "line": 688,
    "func_name": "_UnaliasedStorage",
    "type_comments": [
      "() -> None"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_trees.py",
    "line": 696,
    "func_name": "AliasesPriorGraphOutput",
    "type_comments": [
      "() -> None"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_trees.py",
    "line": 707,
    "func_name": "AliasesNewOutput",
    "type_comments": [
      "() -> None"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_trees.py",
    "line": 719,
    "func_name": "CUDAGraphNode",
    "type_comments": [
      "() -> None"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_trees.py",
    "line": 1723,
    "func_name": "ExecutionState",
    "type_comments": [
      "() -> None"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_trees.py",
    "line": 1735,
    "func_name": "CompilationMode",
    "type_comments": [
      "() -> None"
    ],
    "samples": 57
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_trees.py",
    "line": 1741,
    "func_name": "CUDAGraphTreeManager",
    "type_comments": [
      "() -> None"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_utils.py",
    "line": 34,
    "func_name": "get_placeholders",
    "type_comments": [
      "(torch.fx.graph.Graph) -> List[torch.fx.node.Node]"
    ],
    "samples": 173
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_utils.py",
    "line": 107,
    "func_name": "check_multiple_devices_or_any_cpu_nodes",
    "type_comments": [
      "(Dict[torch.device, torch.fx.node.Node]) -> str",
      "(Dict[torch.device, torch.fx.node.Node]) -> None"
    ],
    "samples": 152
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_utils.py",
    "line": 127,
    "func_name": "check_lowering_disable_cudagraph",
    "type_comments": [
      "(Dict[torch.device, torch.fx.node.Node]) -> str",
      "(Dict[torch.device, torch.fx.node.Node]) -> None"
    ],
    "samples": 152
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_utils.py",
    "line": 142,
    "func_name": "BoxedDeviceIndex.set",
    "type_comments": [
      "(int) -> None"
    ],
    "samples": 74
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/debug.py",
    "line": 255,
    "func_name": "enable_aot_logging",
    "type_comments": [
      "() -> pyannotate_runtime.collect_types.NoReturnType",
      "() -> Iterator"
    ],
    "samples": 422
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/debug.py",
    "line": 301,
    "func_name": "inner",
    "type_comments": [
      "(*Union[List[torch.SymInt], torch.fx.GraphModule]) -> torch._inductor.codecache.CompiledFxGraph",
      "(*Union[List, torch.fx.GraphModule]) -> function",
      "(*Union[List[torch._subclasses.fake_tensor.FakeTensor], torch.fx.GraphModule]) -> function",
      "(*Union[List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch.fx.GraphModule]) -> pyannotate_runtime.collect_types.NoReturnType",
      "(*Union[List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch.fx.GraphModule]) -> torch._inductor.codecache.CompiledFxGraph",
      "(*Union[List[torch._subclasses.fake_tensor.FakeTensor], torch.fx.GraphModule]) -> torch._inductor.codecache.CompiledFxGraph",
      "(*Union[List[torch._subclasses.fake_tensor.FakeTensor], torch.fx.GraphModule]) -> pyannotate_runtime.collect_types.NoReturnType"
    ],
    "samples": 245
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/debug.py",
    "line": 322,
    "func_name": "DebugContext.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 245
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/debug.py",
    "line": 327,
    "func_name": "DebugContext.copy",
    "type_comments": [
      "(str) -> None"
    ],
    "samples": 153
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/debug.py",
    "line": 369,
    "func_name": "DebugContext.__enter__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 245
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/debug.py",
    "line": 404,
    "func_name": "DebugContext.__exit__",
    "type_comments": [
      "(None, None, None) -> None",
      "(type, torch._inductor.compile_worker.subproc_pool.SubprocException, traceback) -> None"
    ],
    "samples": 245
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/debug.py",
    "line": 425,
    "func_name": "DebugContext.__getattr__",
    "type_comments": [
      "(str) -> function"
    ],
    "samples": 640
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/debug.py",
    "line": 433,
    "func_name": "ignored",
    "type_comments": [
      "(*List[torch._inductor.scheduler.SchedulerNode]) -> None",
      "(*List[torch._inductor.scheduler.ExternKernelSchedulerNode]) -> None",
      "(*Union[List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch.fx.GraphModule]) -> None",
      "(*List[torch._inductor.scheduler.ForeachKernelSchedulerNode]) -> None",
      "(*List[torch._inductor.scheduler.FusedSchedulerNode]) -> None",
      "(*List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]) -> None",
      "(*List[Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(*Union[List[torch._subclasses.fake_tensor.FakeTensor], torch.fx.GraphModule]) -> None",
      "(*List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(*List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(*Union[List[torch.SymInt], torch.fx.GraphModule]) -> None",
      "(*List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None"
    ],
    "samples": 640
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 145,
    "func_name": "full",
    "type_comments": [
      "(List, int) -> NotImplementedType",
      "(List[Union[int, torch.SymInt]], float) -> NotImplementedType",
      "(List[int], int) -> NotImplementedType",
      "(List[int], float) -> NotImplementedType",
      "(List[Union[int, torch.SymInt]], int) -> NotImplementedType",
      "(List, float) -> NotImplementedType"
    ],
    "samples": 254
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 225,
    "func_name": "addmm",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, int, int) -> NotImplementedType"
    ],
    "samples": 287
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 248,
    "func_name": "mm",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor) -> NotImplementedType"
    ],
    "samples": 441
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 282,
    "func_name": "cat",
    "type_comments": [
      "(List[torch._subclasses.fake_tensor.FakeTensor], int) -> NotImplementedType",
      "(List[torch._subclasses.fake_tensor.FakeTensor], int) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 141
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 286,
    "func_name": "non_empty_tensor",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor) -> bool"
    ],
    "samples": 199
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 342,
    "func_name": "add",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None) -> NotImplementedType",
      "(torch._subclasses.fake_tensor.FakeTensor, int, None) -> NotImplementedType",
      "(torch._subclasses.fake_tensor.FakeTensor, float, None) -> NotImplementedType"
    ],
    "samples": 612
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 634,
    "func_name": "fast_random_decomps",
    "type_comments": [
      "() -> Dict[torch._ops.OpOverload, function]"
    ],
    "samples": 61
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 639,
    "func_name": "select_decomp_table",
    "type_comments": [
      "() -> Dict[torch._ops.OpOverload, function]"
    ],
    "samples": 529
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 121,
    "func_name": "MemoryDep.get_numel",
    "type_comments": [
      "() -> sympy.core.numbers.Integer",
      "() -> int",
      "() -> sympy.core.numbers.One",
      "() -> sympy.core.add.Add",
      "() -> sympy.core.mul.Mul"
    ],
    "samples": 1693
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 132,
    "func_name": "MemoryDep.rename",
    "type_comments": [
      "(Dict) -> torch._inductor.dependencies.MemoryDep",
      "(Dict[str, str]) -> torch._inductor.dependencies.MemoryDep"
    ],
    "samples": 4056
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 143,
    "func_name": "MemoryDep.numbytes_hint",
    "type_comments": [
      "() -> int"
    ],
    "samples": 1039
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 148,
    "func_name": "MemoryDep.has_unbacked_symbols",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 1039
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 151,
    "func_name": "MemoryDep.is_contiguous",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 950
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 188,
    "func_name": "MemoryDep.is_indirect",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 1693
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 205,
    "func_name": "StarDep.rename",
    "type_comments": [
      "(Dict) -> torch._inductor.dependencies.StarDep",
      "(Dict[str, str]) -> torch._inductor.dependencies.StarDep"
    ],
    "samples": 1357
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 280,
    "func_name": "ReadWrites.rename",
    "type_comments": [
      "(Dict) -> torch._inductor.dependencies.ReadWrites",
      "(Dict[str, str]) -> torch._inductor.dependencies.ReadWrites"
    ],
    "samples": 1919
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 309,
    "func_name": "merge_list",
    "type_comments": [
      "(List[torch._inductor.dependencies.ReadWrites]) -> torch._inductor.dependencies.ReadWrites"
    ],
    "samples": 952
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 321,
    "func_name": "ReadWrites.remove_reads",
    "type_comments": [
      "(Set[torch._inductor.dependencies.WeakDep]) -> torch._inductor.dependencies.ReadWrites",
      "(Set) -> torch._inductor.dependencies.ReadWrites"
    ],
    "samples": 1662
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 350,
    "func_name": "_RecordLoadStoreInner.__init__",
    "type_comments": [
      "(Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer]], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, Union[int, torch.utils._sympy.functions.FloorDiv]], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, int], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], bool) -> None",
      "(Dict, bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]], bool) -> None"
    ],
    "samples": 10164
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 358,
    "func_name": "_RecordLoadStoreInner.canonicalize",
    "type_comments": [
      "(int) -> Tuple[int, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.mul.Mul) -> Tuple[sympy.core.mul.Mul, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(torch.utils._sympy.functions.Identity) -> Tuple[torch.utils._sympy.functions.Identity, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.Integer, Tuple[], Tuple[]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]",
      "(torch.utils._sympy.functions.Identity) -> Tuple[torch.utils._sympy.functions.Identity, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.Zero) -> Tuple[sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]",
      "(sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> Tuple[torch.utils._sympy.functions.FloatTrueDiv, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.Zero) -> Tuple[sympy.core.numbers.Zero, Tuple[], Tuple[]]",
      "(sympy.core.numbers.Zero) -> Tuple[sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.Zero) -> Tuple[sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(int) -> Tuple[int, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(torch.utils._sympy.functions.ModularIndexing) -> Tuple[torch.utils._sympy.functions.ModularIndexing, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul]]",
      "(sympy.core.numbers.Zero) -> Tuple[sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(torch.utils._sympy.functions.ModularIndexing) -> Tuple[torch.utils._sympy.functions.ModularIndexing, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.One) -> Tuple[sympy.core.numbers.One, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.Zero) -> Tuple[sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[torch.utils._sympy.functions.FloorDiv, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.Zero) -> Tuple[sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(sympy.core.mul.Mul) -> Tuple[sympy.core.mul.Mul, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.One) -> Tuple[sympy.core.numbers.One, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul]]",
      "(sympy.core.add.Add) -> Tuple[sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol) -> Tuple[sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]]",
      "(int) -> Tuple[int, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]]"
    ],
    "samples": 20498
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 403,
    "func_name": "_RecordLoadStoreInner.load",
    "type_comments": [
      "(str, sympy.core.numbers.Zero) -> str",
      "(str, torch.utils._sympy.functions.ModularIndexing) -> str",
      "(str, sympy.core.add.Add) -> str",
      "(str, sympy.core.numbers.Integer) -> str",
      "(str, sympy.core.symbol.Symbol) -> str",
      "(str, torch.utils._sympy.functions.Identity) -> str",
      "(str, sympy.core.mul.Mul) -> str"
    ],
    "samples": 17210
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 411,
    "func_name": "_RecordLoadStoreInner.store",
    "type_comments": [
      "(str, sympy.core.add.Add, str, str) -> str",
      "(None, sympy.core.add.Add, str, None) -> str",
      "(str, sympy.core.add.Add, str, None) -> str",
      "(None, sympy.core.numbers.Zero, str, None) -> str",
      "(None, sympy.core.symbol.Symbol, str, None) -> str",
      "(str, sympy.core.symbol.Symbol, str, str) -> str",
      "(str, sympy.core.numbers.Zero, str, None) -> str",
      "(str, sympy.core.symbol.Symbol, str, None) -> str"
    ],
    "samples": 6890
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 415,
    "func_name": "_RecordLoadStoreInner.store_reduction",
    "type_comments": [
      "(None, sympy.core.symbol.Symbol, str) -> str",
      "(None, sympy.core.add.Add, str) -> str",
      "(str, sympy.core.symbol.Symbol, str) -> str",
      "(str, sympy.core.add.Add, str) -> str",
      "(str, sympy.core.numbers.Zero, str) -> str",
      "(None, sympy.core.symbol.Symbol, Tuple[str, str, str]) -> str",
      "(None, sympy.core.add.Add, Tuple[str, str, str]) -> str"
    ],
    "samples": 1052
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 418,
    "func_name": "_RecordLoadStoreInner.index_expr",
    "type_comments": [
      "(int, torch.dtype) -> str",
      "(sympy.core.numbers.One, torch.dtype) -> str",
      "(sympy.functions.elementary.miscellaneous.Max, torch.dtype) -> str",
      "(sympy.core.symbol.Symbol, torch.dtype) -> str",
      "(sympy.functions.elementary.complexes.Abs, torch.dtype) -> str",
      "(torch.utils._sympy.functions.ModularIndexing, torch.dtype) -> str",
      "(sympy.core.numbers.Integer, torch.dtype) -> str",
      "(sympy.functions.elementary.miscellaneous.Min, torch.dtype) -> str",
      "(torch.utils._sympy.functions.Identity, torch.dtype) -> str",
      "(torch.utils._sympy.functions.FloorDiv, torch.dtype) -> str",
      "(sympy.core.mul.Mul, torch.dtype) -> str",
      "(sympy.core.add.Add, torch.dtype) -> str",
      "(sympy.core.numbers.Zero, torch.dtype) -> str",
      "(torch.utils._sympy.functions.FloatTrueDiv, torch.dtype) -> str"
    ],
    "samples": 2462
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 437,
    "func_name": "_OpCounter.__init__",
    "type_comments": [
      "(torch._inductor.dependencies._RecordLoadStoreInner) -> None"
    ],
    "samples": 10164
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 442,
    "func_name": "_OpCounter.__getattr__",
    "type_comments": [
      "(str) -> function",
      "(str) -> method"
    ],
    "samples": 27781
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 448,
    "func_name": "RecordLoadStore.__init__",
    "type_comments": [
      "(Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer]], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, Union[int, torch.utils._sympy.functions.FloorDiv]], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, int], bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], bool) -> None",
      "(Dict, bool) -> None",
      "(Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]], bool) -> None"
    ],
    "samples": 10164
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 457,
    "func_name": "var_builder",
    "type_comments": [
      "(str) -> Tuple[Dict, function]"
    ],
    "samples": 14712
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 461,
    "func_name": "add_var",
    "type_comments": [
      "(torch.utils._sympy.functions.FloorDiv) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add) -> sympy.core.symbol.Symbol",
      "(sympy.core.mul.Mul) -> sympy.core.symbol.Symbol",
      "(sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.numbers.Integer) -> sympy.core.symbol.Symbol",
      "(int) -> sympy.core.symbol.Symbol"
    ],
    "samples": 19698
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 469,
    "func_name": "index_vars_no_squeeze",
    "type_comments": [
      "(str, *List) -> Tuple[List[List], Dict]",
      "(str, *List[sympy.core.symbol.Symbol]) -> Tuple[List[List[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]",
      "(str, *Union[List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]) -> Tuple[List[Union[List, List[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *Union[List, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]) -> Tuple[List[Union[List, List[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]) -> Tuple[List[List[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *Union[List, List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[List, List[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List[sympy.core.numbers.Integer], List[torch.utils._sympy.functions.FloorDiv]]) -> Tuple[List[List[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]]",
      "(str, *List[sympy.core.numbers.Integer]) -> Tuple[List[List[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List, List[sympy.core.symbol.Symbol]]) -> Tuple[List[Union[List, List[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]",
      "(str, *Union[List, List[sympy.core.mul.Mul]]) -> Tuple[List[Union[List, List[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]]",
      "(str, *Union[List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol]]) -> Tuple[List[List[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *Union[List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]]) -> Tuple[List[List[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]",
      "(str, *List[sympy.core.mul.Mul]) -> Tuple[List[List[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]]",
      "(str, *Union[List, List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]]) -> Tuple[List[Union[List, List[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer]]]",
      "(str, *Union[List[sympy.core.add.Add], List[sympy.core.numbers.Integer]]) -> Tuple[List[List[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer]]]"
    ],
    "samples": 1723
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 477,
    "func_name": "index_vars_squeeze",
    "type_comments": [
      "(str, *List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *Union[List, List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]) -> Tuple[List[Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[sympy.core.numbers.Integer]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]) -> Tuple[List[Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *List[sympy.core.numbers.Integer]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List, List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]",
      "(str, *List[sympy.core.numbers.Integer]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[sympy.core.mul.Mul]) -> Tuple[List[Union[Tuple[], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]]",
      "(str, *Union[List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]) -> Tuple[List[Union[Tuple[], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List, List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul]]) -> Tuple[List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]",
      "(str, *List[int]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, int]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List, List[sympy.core.mul.Mul]]) -> Tuple[List[Union[Tuple[], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]]",
      "(str, *List[sympy.core.numbers.Integer]) -> Tuple[List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]",
      "(str, *Union[List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]) -> Tuple[List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]]",
      "(str, *List) -> Tuple[List[Tuple[]], Dict]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *List[sympy.core.numbers.One]) -> Tuple[List[Tuple[sympy.core.numbers.Zero]], Dict]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]",
      "(str, *Union[List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int]]) -> Tuple[List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul]]) -> Tuple[List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[int]]) -> Tuple[List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]]",
      "(str, *List[int]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, int]]",
      "(str, *Union[List[Union[int, torch.utils._sympy.functions.FloorDiv]], List[int]]) -> Tuple[List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[int, torch.utils._sympy.functions.FloorDiv]]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Union[Tuple[], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List, List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[sympy.core.numbers.Integer]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *Union[List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]) -> Tuple[List[Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *List[sympy.core.numbers.One]) -> Tuple[List[Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero]], Dict]",
      "(str, *Union[List, List[Union[int, sympy.core.symbol.Symbol]]]) -> Tuple[List[Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]]",
      "(str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]]",
      "(str, *List[Union[int, sympy.core.numbers.One]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, int]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[torch.utils._sympy.functions.FloorDiv]]) -> Tuple[List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]]",
      "(str, *Union[List[int], List[sympy.core.numbers.Integer]]) -> Tuple[List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]]",
      "(str, *List[sympy.core.mul.Mul]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]]",
      "(str, *List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]]",
      "(str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]) -> Tuple[List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(str, *List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]]"
    ],
    "samples": 11506
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 490,
    "func_name": "extract_read_writes",
    "type_comments": [
      "(functools.partial, bool, str, *List[sympy.core.mul.Mul]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *List[Union[int, sympy.core.symbol.Symbol]]) -> torch._inductor.dependencies.ReadWrites",
      "(function, bool, str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.dependencies.ReadWrites",
      "(function, bool, str, *List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *Union[List[sympy.core.numbers.Integer], List[sympy.core.numbers.One]]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.dependencies.ReadWrites",
      "(function, bool, str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> torch._inductor.dependencies.ReadWrites",
      "(function, bool, str, *List) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *Union[List[Union[int, torch.utils._sympy.functions.FloorDiv]], List[int]]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *List[sympy.core.numbers.One]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *List) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *List[int]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> torch._inductor.dependencies.ReadWrites",
      "(torch._inductor.ir.LoopBody, bool, str, *Union[List, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]) -> torch._inductor.dependencies.ReadWrites",
      "(function, bool, str, *List[Union[int, sympy.core.symbol.Symbol]]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[torch.utils._sympy.functions.FloorDiv]]) -> torch._inductor.dependencies.ReadWrites",
      "(torch._inductor.ir.LoopBody, bool, str, *Union[List, List[sympy.core.numbers.Integer]]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]]) -> torch._inductor.dependencies.ReadWrites",
      "(function, bool, str, *List[sympy.core.mul.Mul]) -> torch._inductor.dependencies.ReadWrites",
      "(function, bool, str, *List[sympy.core.numbers.Integer]) -> torch._inductor.dependencies.ReadWrites",
      "(torch._inductor.ir.LoopBody, bool, str, *Union[List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]) -> torch._inductor.dependencies.ReadWrites",
      "(function, bool, str, *List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> torch._inductor.dependencies.ReadWrites",
      "(function, bool, str, *List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch._inductor.dependencies.ReadWrites",
      "(torch._inductor.ir.LoopBody, bool, str, *List[sympy.core.numbers.Integer]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *List[sympy.core.numbers.Integer]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]) -> torch._inductor.dependencies.ReadWrites",
      "(torch._inductor.ir.LoopBody, bool, str, *Union[List, List[sympy.core.mul.Mul]]) -> torch._inductor.dependencies.ReadWrites",
      "(function, bool, str, *List[int]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *Union[List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]) -> torch._inductor.dependencies.ReadWrites",
      "(function, bool, str, *List[sympy.core.numbers.One]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[int]]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]) -> torch._inductor.dependencies.ReadWrites",
      "(functools.partial, bool, str, *Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul]]) -> torch._inductor.dependencies.ReadWrites"
    ],
    "samples": 10164
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 581,
    "func_name": "canonicalization_prefix",
    "type_comments": [
      "() -> str"
    ],
    "samples": 4558
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 589,
    "func_name": "FreeUnbackedSymbolsOpsHandler.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 1910
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 592,
    "func_name": "FreeUnbackedSymbolsOpsHandler.__getattr__",
    "type_comments": [
      "(str) -> function"
    ],
    "samples": 9666
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 593,
    "func_name": "inner",
    "type_comments": [
      "(*Union[sympy.core.numbers.Zero, torch.dtype]) -> None",
      "(*Union[sympy.core.numbers.Integer, torch.dtype]) -> None",
      "(*Optional[Union[function, int]]) -> None",
      "(*Union[str, sympy.core.symbol.Symbol]) -> None",
      "(*Union[str, sympy.core.numbers.Zero]) -> None",
      "(*Union[sympy.core.mul.Mul, torch.dtype]) -> None",
      "(*Union[float, torch.dtype]) -> None",
      "(*Union[str, sympy.core.add.Add]) -> None",
      "(*Union[sympy.core.add.Add, torch.dtype]) -> None",
      "(*sympy.core.add.Add) -> None",
      "(*None) -> None",
      "(*Union[int, torch.dtype]) -> None",
      "(*Union[str, torch.utils._sympy.functions.ModularIndexing]) -> None",
      "(*Union[sympy.core.symbol.Symbol, torch.dtype]) -> None",
      "(*Union[bool, torch.dtype]) -> None",
      "(*Union[sympy.core.numbers.One, torch.dtype]) -> None",
      "(*sympy.core.symbol.Symbol) -> None",
      "(*Optional[Union[float, function]]) -> None",
      "(*Union[int, str]) -> None",
      "(*Optional[torch.dtype]) -> None"
    ],
    "samples": 9666
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 631,
    "func_name": "extract_free_unbacked_symbols",
    "type_comments": [
      "(function, List, List[sympy.core.symbol.Symbol]) -> Set",
      "(function, List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Set",
      "(function, List[sympy.core.symbol.Symbol], None) -> Set",
      "(function, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Set",
      "(functools.partial, List[sympy.core.symbol.Symbol], None) -> Set",
      "(functools.partial, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], None) -> Set",
      "(function, List, None) -> Set",
      "(function, List, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Set",
      "(function, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], None) -> Set",
      "(function, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol]) -> Set",
      "(function, List[sympy.core.numbers.Zero], List[sympy.core.symbol.Symbol]) -> Set",
      "(function, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> Set"
    ],
    "samples": 1910
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/dedupe_symint_uses.py",
    "line": 35,
    "func_name": "_SymHashingDict.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 693
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/dedupe_symint_uses.py",
    "line": 54,
    "func_name": "dedupe_symints",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 529
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/fuse_attention.py",
    "line": 583,
    "func_name": "_sfdp_extra_check",
    "type_comments": [
      "(torch._ops.OpOverload, bool) -> function"
    ],
    "samples": 305
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/fuse_attention.py",
    "line": 603,
    "func_name": "partialize_and_update_signature",
    "type_comments": [
      "(function) -> function"
    ],
    "samples": 366
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/fuse_attention.py",
    "line": 626,
    "func_name": "_get_sfdp_patterns",
    "type_comments": [
      "() -> Iterator[Tuple[str, Dict[str, Union[List[torch._subclasses.fake_tensor.FakeTensor], function, torch._inductor.pattern_matcher.PatternMatcherPass]]]]"
    ],
    "samples": 366
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/fuse_attention.py",
    "line": 904,
    "func_name": "_sfdp_init",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 103,
    "func_name": "GroupBatchFusionBase.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 1060
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 171,
    "func_name": "BatchPointwiseOpsFusionFactory.__init__",
    "type_comments": [
      "(function) -> None",
      "(builtin_function_or_method) -> None"
    ],
    "samples": 636
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 498,
    "func_name": "BatchLinearLHSFusion.match",
    "type_comments": [
      "(torch.fx.node.Node) -> None",
      "(torch.fx.node.Node) -> Tuple[str, bool, torch.fx.node.Node]"
    ],
    "samples": 7390
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 564,
    "func_name": "is_node_meta_valid",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 856
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 570,
    "func_name": "_is_mutable_node",
    "type_comments": [
      "(str) -> bool",
      "(function) -> bool",
      "(builtin_function_or_method) -> bool"
    ],
    "samples": 90
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 584,
    "func_name": "is_linear_node_can_be_fused",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 349
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 607,
    "func_name": "PreGradBatchLinearFusion._getitem_args",
    "type_comments": [
      "(torch.fx.node.Node) -> None"
    ],
    "samples": 85
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 614,
    "func_name": "PreGradBatchLinearFusion.match",
    "type_comments": [
      "(torch.fx.node.Node) -> None",
      "(torch.fx.node.Node) -> Tuple[str, None, str, str, bool, str]"
    ],
    "samples": 7390
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 704,
    "func_name": "BatchLayernormFusion.match",
    "type_comments": [
      "(torch.fx.node.Node) -> None",
      "(torch.fx.node.Node) -> Tuple[str, str, str, str, str, str, str]"
    ],
    "samples": 7386
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 872,
    "func_name": "BatchPointwiseOpsPreGradFusion.__init__",
    "type_comments": [
      "(function) -> None",
      "(builtin_function_or_method) -> None"
    ],
    "samples": 636
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 876,
    "func_name": "BatchPointwiseOpsPreGradFusion.match",
    "type_comments": [
      "(torch.fx.node.Node) -> None",
      "(torch.fx.node.Node) -> Tuple[str, str, str, str]"
    ],
    "samples": 16186
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 994,
    "func_name": "BatchTanhPreGradFusion.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 1000,
    "func_name": "BatchSigmoidPreGradFusion.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 1006,
    "func_name": "BatchReLuPreGradFusion.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 1154,
    "func_name": "get_fusion_candidates",
    "type_comments": [
      "(torch._inductor.fx_passes.group_batch_fusion.PreGradBatchLinearFusion, torch.fx.node.Node, Set) -> collections.defaultdict",
      "(torch._inductor.fx_passes.group_batch_fusion.BatchLinearLHSFusion, torch.fx.node.Node, Set) -> collections.defaultdict",
      "(torch._inductor.fx_passes.group_batch_fusion.BatchReLuPreGradFusion, torch.fx.node.Node, Set) -> collections.defaultdict",
      "(torch._inductor.fx_passes.group_batch_fusion.BatchLayernormFusion, torch.fx.node.Node, Set) -> collections.defaultdict",
      "(torch._inductor.fx_passes.group_batch_fusion.BatchTanhPreGradFusion, torch.fx.node.Node, Set) -> collections.defaultdict",
      "(torch._inductor.fx_passes.group_batch_fusion.BatchSigmoidPreGradFusion, torch.fx.node.Node, Set) -> collections.defaultdict"
    ],
    "samples": 7267
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 1197,
    "func_name": "apply_group_batch_fusion",
    "type_comments": [
      "(torch.fx.graph.Graph, torch._inductor.fx_passes.group_batch_fusion.PreGradBatchLinearFusion) -> None",
      "(torch.fx.graph.Graph, torch._inductor.fx_passes.group_batch_fusion.BatchReLuPreGradFusion) -> None",
      "(torch.fx.graph.Graph, torch._inductor.fx_passes.group_batch_fusion.BatchTanhPreGradFusion) -> None",
      "(torch.fx.graph.Graph, torch._inductor.fx_passes.group_batch_fusion.BatchLayernormFusion) -> None",
      "(torch.fx.graph.Graph, torch._inductor.fx_passes.group_batch_fusion.BatchLinearLHSFusion) -> None"
    ],
    "samples": 1060
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 1222,
    "func_name": "generate_fusion_from_config",
    "type_comments": [
      "(Dict[str, Dict], bool) -> List[Union[torch._inductor.fx_passes.group_batch_fusion.BatchLayernormFusion, torch._inductor.fx_passes.group_batch_fusion.BatchLinearLHSFusion, torch._inductor.fx_passes.group_batch_fusion.BatchTanhPreGradFusion, torch._inductor.fx_passes.group_batch_fusion.PreGradBatchLinearFusion]]",
      "(Dict, bool) -> List"
    ],
    "samples": 372
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/group_batch_fusion.py",
    "line": 1235,
    "func_name": "group_batch_fusion_passes",
    "type_comments": [
      "(torch.fx.graph.Graph, bool) -> None"
    ],
    "samples": 372
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 41,
    "func_name": "lazy_init",
    "type_comments": [
      "() -> None"
    ],
    "samples": 61
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 52,
    "func_name": "remove_no_ops",
    "type_comments": [
      "(torch.fx.GraphModule, Set, Set) -> None",
      "(torch.fx.GraphModule, Set[torch.fx.node.Node], Set[torch.fx.node.Node]) -> None",
      "(torch.fx.GraphModule, Set, Set[torch.fx.node.Node]) -> None",
      "(torch.fx.GraphModule, Set[torch.fx.node.Node], Set) -> None"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 129,
    "func_name": "visit",
    "type_comments": [
      "(torch.fx.node.Node) -> None"
    ],
    "samples": 550
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 148,
    "func_name": "remove_redundant_views",
    "type_comments": [
      "(torch.fx.GraphModule) -> None"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 198,
    "func_name": "UniformValueConstantFolder.__init__",
    "type_comments": [
      "(torch.fx.GraphModule, bool) -> None"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 234,
    "func_name": "UniformValueConstantFolder.insertable_tensor_check",
    "type_comments": [
      "(torch.Tensor) -> bool"
    ],
    "samples": 329
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 237,
    "func_name": "UniformValueConstantFolder.add_node_replacement",
    "type_comments": [
      "(torch.fx.node.Node, torch.Tensor) -> None"
    ],
    "samples": 329
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 242,
    "func_name": "UniformValueConstantFolder.insert_placerholder_values",
    "type_comments": [
      "(Dict) -> None"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 249,
    "func_name": "UniformValueConstantFolder._deduce_value",
    "type_comments": [
      "(torch.fx.node.Node) -> torch.SymInt",
      "(torch.fx.node.Node) -> torch.Tensor",
      "(torch.fx.node.Node) -> object"
    ],
    "samples": 374
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 322,
    "func_name": "constant_fold_uniform_value",
    "type_comments": [
      "(torch.fx.GraphModule) -> None"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 427,
    "func_name": "joint_graph_passes",
    "type_comments": [
      "(torch.fx.GraphModule) -> torch.fx.GraphModule"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 497,
    "func_name": "pointless_view",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, torch.fx.node.Node, torch.fx.immutable_collections.immutable_list) -> None"
    ],
    "samples": 712
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/misc_patterns.py",
    "line": 15,
    "func_name": "_misc_patterns_init",
    "type_comments": [
      "() -> None"
    ],
    "samples": 61
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/misc_patterns.py",
    "line": 33,
    "func_name": "randperm_index_add_pattern",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]"
    ],
    "samples": 61
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/misc_patterns.py",
    "line": 54,
    "func_name": "randperm_index_pattern",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, int) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]"
    ],
    "samples": 61
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/misc_patterns.py",
    "line": 90,
    "func_name": "NumpyCompatNormalization.__call__",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 40,
    "func_name": "_conv_call",
    "type_comments": [
      "(int) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 45,
    "func_name": "_linear_call",
    "type_comments": [
      "(int) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 295
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 50,
    "func_name": "_conv_transpose_call",
    "type_comments": [
      "(int) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 290
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 57,
    "func_name": "_to_float",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, int) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 65,
    "func_name": "_to_bf16",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 295
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 73,
    "func_name": "_to_fp16",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 295
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 81,
    "func_name": "_unary_fusion_pattern",
    "type_comments": [
      "(function, function, int, torch.dtype) -> torch._inductor.pattern_matcher.CallFunction",
      "(function, function, int, None) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 360
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 94,
    "func_name": "_gelu_fusion_1",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 108,
    "func_name": "_gelu_fusion_2",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 140,
    "func_name": "_hardswish_fusion",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 157,
    "func_name": "_silu_fusion",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 162,
    "func_name": "_hardsigmoid_fusion",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 175,
    "func_name": "_leaky_relu_fusion",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 183,
    "func_name": "_hardtanh_fusion",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 190,
    "func_name": "_combined_fusion",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverloadPacket) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 194,
    "func_name": "_binary_fusion_v1",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, function) -> torch._inductor.pattern_matcher.CallFunction",
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverloadPacket) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 198,
    "func_name": "_binary_fusion_v2",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, function) -> torch._inductor.pattern_matcher.CallFunction",
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverloadPacket) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 295
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 201,
    "func_name": "_is_single_computation_op",
    "type_comments": [
      "(torch._ops.OpOverload, torch.dtype) -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 218,
    "func_name": "_is_valid_computation_unary_fusion",
    "type_comments": [
      "(torch._ops.OpOverload, torch.dtype) -> function",
      "(torch._ops.OpOverload, None) -> function"
    ],
    "samples": 360
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 240,
    "func_name": "_register_unary_fusion_lowering",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch._inductor.fx_passes.mkldnn_fusion.UnaryAttr, torch._ops.OpOverload, None) -> function",
      "(torch._inductor.pattern_matcher.CallFunction, torch._inductor.fx_passes.mkldnn_fusion.UnaryAttr, torch._ops.OpOverload, torch.dtype) -> function"
    ],
    "samples": 360
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 257,
    "func_name": "_register_leaky_relu_fusion_lowering",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverload, torch.dtype) -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 299,
    "func_name": "_register_hardtanh_fusion_lowering",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverload, torch.dtype) -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 383,
    "func_name": "_is_valid_computation_binary",
    "type_comments": [
      "(torch._ops.OpOverload, function, None) -> function",
      "(torch._ops.OpOverload, torch._ops.OpOverloadPacket, None) -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 434,
    "func_name": "_is_valid_computation_binary_inplace",
    "type_comments": [
      "(torch._ops.OpOverload, function, int) -> function",
      "(torch._ops.OpOverload, torch._ops.OpOverloadPacket, int) -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 470,
    "func_name": "_register_binary_unary_fusion_lowering",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverload, torch._ops.OpOverloadPacket, torch._ops.OpOverload, torch._inductor.fx_passes.mkldnn_fusion.UnaryAttr) -> function",
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverload, function, torch._ops.OpOverload, torch._inductor.fx_passes.mkldnn_fusion.UnaryAttr) -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 509,
    "func_name": "_register_binary_unary_maybe_inplace_fusion_lowering",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverload, function, torch._ops.OpOverload, torch._ops.OpOverload, torch._inductor.fx_passes.mkldnn_fusion.UnaryAttr, int) -> function",
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverload, torch._ops.OpOverloadPacket, torch._ops.OpOverload, torch._ops.OpOverload, torch._inductor.fx_passes.mkldnn_fusion.UnaryAttr, int) -> function",
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverload, torch._ops.OpOverloadPacket, torch._ops.OpOverload, torch._ops.OpOverload, None, int) -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 554,
    "func_name": "UnaryAttr",
    "type_comments": [
      "() -> None"
    ],
    "samples": 59
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 555,
    "func_name": "UnaryAttr.__init__",
    "type_comments": [
      "(str, None, None) -> None",
      "(str, None, str) -> None"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 560,
    "func_name": "_register_unary_fusion",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 563,
    "func_name": "_unary_fusion_patterns",
    "type_comments": [
      "(torch.dtype) -> Dict[torch._inductor.fx_passes.mkldnn_fusion.UnaryAttr, List[torch._inductor.pattern_matcher.CallFunction]]",
      "(None) -> Dict[torch._inductor.fx_passes.mkldnn_fusion.UnaryAttr, List[torch._inductor.pattern_matcher.CallFunction]]"
    ],
    "samples": 180
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 631,
    "func_name": "_register_inplace_fusion",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 677,
    "func_name": "_register_binary_fusion",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 699,
    "func_name": "_register_binary_unary_fusion",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 1244,
    "func_name": "_mkldnn_fusion_init",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 65,
    "func_name": "get_alignment_size_dtype",
    "type_comments": [
      "(torch.dtype) -> int"
    ],
    "samples": 808
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 74,
    "func_name": "check_device",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor) -> bool"
    ],
    "samples": 464
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 78,
    "func_name": "check_dtype",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor) -> bool"
    ],
    "samples": 441
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 82,
    "func_name": "should_pad_common",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None) -> bool",
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor) -> bool"
    ],
    "samples": 464
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 87,
    "func_name": "valid_shape_and_stride",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor) -> bool",
      "(None) -> bool"
    ],
    "samples": 802
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 117,
    "func_name": "get_padded_length",
    "type_comments": [
      "(int, int) -> int",
      "(torch.SymInt, int) -> int"
    ],
    "samples": 808
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 142,
    "func_name": "should_pad_addmm",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 248
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 209,
    "func_name": "is_mm_compute_bound",
    "type_comments": [
      "(torch.SymInt, int, int, torch.dtype) -> torch.SymBool",
      "(int, torch.SymInt, int, torch.dtype) -> torch.SymBool",
      "(int, int, int, torch.dtype) -> bool"
    ],
    "samples": 69
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 242,
    "func_name": "get_pad_cache",
    "type_comments": [
      "() -> torch._inductor.codecache.LocalCache"
    ],
    "samples": 19
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 247,
    "func_name": "get_cached_should_pad",
    "type_comments": [
      "(str) -> bool",
      "(str) -> None"
    ],
    "samples": 69
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 263,
    "func_name": "should_pad_bench_key",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, torch.Tensor, torch.Tensor, torch._ops.OpOverloadPacket, None, bool) -> str",
      "(torch._inductor.pattern_matcher.Match, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._ops.OpOverloadPacket, None, bool) -> str",
      "(torch._inductor.pattern_matcher.Match, torch.Tensor, torch.Tensor, torch._ops.OpOverloadPacket, torch._subclasses.fake_tensor.FakeTensor, bool) -> str",
      "(torch._inductor.pattern_matcher.Match, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._ops.OpOverloadPacket, torch._subclasses.fake_tensor.FakeTensor, bool) -> str"
    ],
    "samples": 96
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 271,
    "func_name": "tensor_key",
    "type_comments": [
      "(torch.Tensor) -> Tuple[torch.Size, Tuple[int, int, int], torch.dtype]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[torch.Size, Tuple[int, int, int], torch.dtype]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[torch.Size, Tuple[int, int], torch.dtype]",
      "(torch.Tensor) -> Tuple[torch.Size, Tuple[int, int], torch.dtype]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[torch.Size, Tuple[int], torch.dtype]"
    ],
    "samples": 112
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 278,
    "func_name": "fmt_pad",
    "type_comments": [
      "(str) -> str",
      "(str) -> None"
    ],
    "samples": 109
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 299,
    "func_name": "get_non_view_def",
    "type_comments": [
      "(torch.fx.node.Node) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.fx.node.Node) -> torch.fx.node.Node"
    ],
    "samples": 116
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 313,
    "func_name": "should_exclude_padding_time",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, str) -> bool"
    ],
    "samples": 109
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 341,
    "func_name": "should_pad_bench",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._ops.OpOverloadPacket, None) -> bool",
      "(torch._inductor.pattern_matcher.Match, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._ops.OpOverloadPacket, torch._subclasses.fake_tensor.FakeTensor) -> bool"
    ],
    "samples": 464
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 373,
    "func_name": "realize_symbols",
    "type_comments": [
      "(Tuple[int, int]) -> List[int]",
      "(torch.Size) -> List[int]",
      "(Tuple[int, int, int]) -> List[int]"
    ],
    "samples": 113
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 659,
    "func_name": "should_pad_mm",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 335
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 780,
    "func_name": "_pad_mm_init",
    "type_comments": [
      "() -> None"
    ],
    "samples": 61
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 73,
    "func_name": "post_grad_passes",
    "type_comments": [
      "(torch.fx.GraphModule, bool) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 152,
    "func_name": "lazy_init",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 193,
    "func_name": "register_lowering_pattern",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, function, int) -> function"
    ],
    "samples": 540
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 606,
    "func_name": "is_valid_splitwithsizes_cat",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 636,
    "func_name": "same_meta",
    "type_comments": [
      "(torch.fx.node.Node, torch.fx.node.Node) -> bool"
    ],
    "samples": 2030
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 667,
    "func_name": "slice_noop",
    "type_comments": [
      "(int, int, int, int) -> bool"
    ],
    "samples": 207
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 729,
    "func_name": "true_noop",
    "type_comments": [
      "(*torch._subclasses.fake_tensor.FakeTensor) -> bool"
    ],
    "samples": 450
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 735,
    "func_name": "remove_noop_ops",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 635
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 796,
    "func_name": "decompose_auto_functionalized",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 828,
    "func_name": "splitwithsizes_cat_replace",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 907,
    "func_name": "view_to_reshape",
    "type_comments": [
      "(torch.fx.GraphModule) -> None"
    ],
    "samples": 198
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 917,
    "func_name": "should_prefer_unfused_addmm",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 175
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 926,
    "func_name": "unfuse_bias_add_to_pointwise",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node) -> None"
    ],
    "samples": 131
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 932,
    "func_name": "repl",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 131
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 1051,
    "func_name": "ConstructorMoverPass.__init__",
    "type_comments": [
      "(str, bool) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 1108,
    "func_name": "ConstructorMoverPass.get_node_device",
    "type_comments": [
      "(torch.fx.node.Node) -> torch.device",
      "(torch.fx.node.Node) -> None"
    ],
    "samples": 5457
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 1136,
    "func_name": "ConstructorMoverPass.__call__",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 1247,
    "func_name": "move_constructors_to_cuda",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pre_grad.py",
    "line": 94,
    "func_name": "lazy_init",
    "type_comments": [
      "() -> None"
    ],
    "samples": 61
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pre_grad.py",
    "line": 102,
    "func_name": "pre_grad_passes",
    "type_comments": [
      "(torch.fx.GraphModule, List[Union[torch.Tensor, torch.nn.parameter.Parameter]]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[torch.Tensor]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[torch.nn.parameter.Parameter]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[torch.SymInt]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch.Tensor, torch.nn.parameter.Parameter]]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch.Tensor]]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]]) -> torch.fx.GraphModule"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pre_grad.py",
    "line": 251,
    "func_name": "fuse_fx",
    "type_comments": [
      "(torch.fx.GraphModule, List[Union[torch.Tensor, torch.nn.parameter.Parameter]]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[torch.Tensor]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[torch.nn.parameter.Parameter]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[torch.SymInt]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch.Tensor, torch.nn.parameter.Parameter]]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch.Tensor]]) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List) -> torch.fx.GraphModule",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]]) -> torch.fx.GraphModule"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pre_grad.py",
    "line": 564,
    "func_name": "sink_cat_after_pointwise",
    "type_comments": [
      "(torch.fx.GraphModule) -> torch.fx.GraphModule"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pre_grad.py",
    "line": 565,
    "func_name": "one_user",
    "type_comments": [
      "(torch.fx.node.Node) -> None",
      "(torch.fx.node.Node) -> torch.fx.node.Node"
    ],
    "samples": 114
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pre_grad.py",
    "line": 569,
    "func_name": "is_view",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 97
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pre_grad.py",
    "line": 573,
    "func_name": "is_pointwise_unary",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 96
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 67,
    "func_name": "_may_generate_pattern_with_dtype_convert",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.KeywordArg, bool, int) -> torch._inductor.pattern_matcher.CallFunction",
      "(torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.Arg, bool, int) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 526
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 109,
    "func_name": "_unary_fusion_pattern",
    "type_comments": [
      "(function, torch._inductor.pattern_matcher.CallFunction, int, bool) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 117,
    "func_name": "get_dequantize_per_tensor_activation_pattern",
    "type_comments": [
      "(bool) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 320
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 163,
    "func_name": "get_dequantize_qconv_pt2e_pattern",
    "type_comments": [
      "(int) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 187,
    "func_name": "get_qlinear_pt2e_pattern",
    "type_comments": [
      "(bool, int) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 360
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 223,
    "func_name": "generate_pattern_with_binary",
    "type_comments": [
      "(torch._ops.OpOverload, torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.KeywordArg, bool, bool) -> torch._inductor.pattern_matcher.CallFunction",
      "(torch._ops.OpOverload, torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.CallFunction, bool, bool) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 250,
    "func_name": "generate_pattern_with_unary",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverload) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 259,
    "func_name": "generate_pattern_with_output_quant",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, bool) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 360
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 286,
    "func_name": "_is_valid_quantized_conv2d_optimization_pattern",
    "type_comments": [
      "() -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 302,
    "func_name": "_register_quantized_conv_lowering",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, int, torch._ops.OpOverloadPacket, torch._inductor.fx_passes.quantization:_register_quantization_unary_fusion.<locals>.UnaryAttr) -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 373,
    "func_name": "_is_valid_quantized_linear_optimization_pattern",
    "type_comments": [
      "() -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 389,
    "func_name": "_register_quantized_linear_lowering",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, int, torch._ops.OpOverloadPacket, torch._inductor.fx_passes.quantization:_register_quantization_unary_fusion.<locals>.UnaryAttr) -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 447,
    "func_name": "_register_quantized_linear_binary_lowering",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, int, torch._ops.OpOverload, Any) -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 528,
    "func_name": "_is_valid_qconv_binary_optimization_pattern",
    "type_comments": [
      "() -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 534,
    "func_name": "_is_valid_qlinear_binary_optimization_pattern",
    "type_comments": [
      "() -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 542,
    "func_name": "_is_valid_quantized_op_binary_optimization_pattern",
    "type_comments": [
      "(torch._ops.OpOverloadPacket, bool) -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 619,
    "func_name": "_register_quantized_conv_binary_lowering",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, int, torch._ops.OpOverload, Any) -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 695,
    "func_name": "_register_quantization_unary_fusion",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 704,
    "func_name": "UnaryAttr",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 705,
    "func_name": "UnaryAttr.__init__",
    "type_comments": [
      "(str, List, str) -> None"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 892,
    "func_name": "_register_quantization_binary_fusion",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 893,
    "func_name": "BinaryUnaryAttr",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 894,
    "func_name": "BinaryUnaryAttr.__init__",
    "type_comments": [
      "(str, float, str, List, str) -> None"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1218,
    "func_name": "_is_valid_quantized_maxpool2d_optimization_pattern",
    "type_comments": [
      "() -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1228,
    "func_name": "_register_quantized_maxpool2d_lowering",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverload) -> function"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1276,
    "func_name": "_register_quantization_maxpool2d",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1338,
    "func_name": "_is_input_output_same_scale_zp",
    "type_comments": [
      "(torch._ops.OpOverload) -> function"
    ],
    "samples": 120
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1367,
    "func_name": "_register_quantized_cat_lowering",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverloadPacket) -> function"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1396,
    "func_name": "_register_quantization_cat",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1408,
    "func_name": "_register_quantized_reshape_lowering",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverloadPacket) -> function"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1426,
    "func_name": "_register_quantization_reshape",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1438,
    "func_name": "_is_valid_woq_optimization_pattern",
    "type_comments": [
      "() -> function"
    ],
    "samples": 180
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1460,
    "func_name": "_register_woq_lowering",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch._ops.OpOverload, torch._ops.OpOverloadPacket) -> function"
    ],
    "samples": 180
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1484,
    "func_name": "_register_woq_mm_int8_pattern1",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1509,
    "func_name": "_register_woq_mm_int8_pattern2",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1534,
    "func_name": "_register_woq_mm_int8_pattern3",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1559,
    "func_name": "_register_quantization_lowerings",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1567,
    "func_name": "_register_woq_lowerings",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 2496,
    "func_name": "quant_lift_up",
    "type_comments": [
      "(torch.fx.GraphModule) -> None"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 198,
    "func_name": "decompose_generalized_scatter",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 219,
    "func_name": "canonicalize_view_scatter_ops",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 242,
    "func_name": "handle_views",
    "type_comments": [
      "(torch.fx.node.Node) -> None"
    ],
    "samples": 1114
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 365,
    "func_name": "reinplace_inplaceable_ops_core",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 548,
    "func_name": "reinplace_inplaceable_ops",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/replace_random.py",
    "line": 22,
    "func_name": "replace_random_passes",
    "type_comments": [
      "(torch.fx.GraphModule) -> int"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/replace_random.py",
    "line": 36,
    "func_name": "fuse_seed_creation_pass",
    "type_comments": [
      "(torch.fx.graph.Graph) -> int"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/split_cat.py",
    "line": 83,
    "func_name": "construct_pattern_matcher_pass",
    "type_comments": [
      "(str) -> torch._inductor.pattern_matcher.PatternMatcherPass"
    ],
    "samples": 180
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_utils.py",
    "line": 74,
    "func_name": "FakeTensorUpdater.__init__",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_utils.py",
    "line": 81,
    "func_name": "FakeTensorUpdater.hash_node",
    "type_comments": [
      "(torch.fx.node.Node) -> Tuple[torch.fx.node.Node, builtin_function_or_method, int, int]",
      "(torch.fx.node.Node) -> Tuple[torch.fx.node.Node, str, int, int]",
      "(torch.fx.node.Node) -> Tuple[torch.fx.node.Node, torch._ops.OpOverload, int, int]"
    ],
    "samples": 9856
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_utils.py",
    "line": 85,
    "func_name": "FakeTensorUpdater.incremental_update",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_utils.py",
    "line": 91,
    "func_name": "is_intlist_same",
    "type_comments": [
      "(Tuple[int], Tuple[int]) -> bool",
      "(Tuple[int, int], Tuple[int, int]) -> bool",
      "(Tuple[int, int, int, int], Tuple[int, int, int, int]) -> bool",
      "(torch.Size, torch.Size) -> bool"
    ],
    "samples": 469
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_utils.py",
    "line": 94,
    "func_name": "is_fake_tensor_same",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor) -> bool",
      "(List[torch._subclasses.fake_tensor.FakeTensor], torch.fx.immutable_collections.immutable_list) -> bool"
    ],
    "samples": 322
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_utils.py",
    "line": 139,
    "func_name": "should_process_node",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 320
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_utils.py",
    "line": 187,
    "func_name": "get_storage",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor) -> int"
    ],
    "samples": 13900
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_utils.py",
    "line": 191,
    "func_name": "get_node_storage",
    "type_comments": [
      "(torch.fx.node.Node) -> None",
      "(torch.fx.node.Node) -> int"
    ],
    "samples": 13743
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_utils.py",
    "line": 201,
    "func_name": "get_fake",
    "type_comments": [
      "(torch.fx.node.Node) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]",
      "(float) -> float",
      "(torch.fx.node.Node) -> torch.SymInt",
      "(torch.fx.node.Node) -> torch._subclasses.fake_tensor.FakeTensor",
      "(bool) -> bool",
      "(torch.dtype) -> torch.dtype",
      "(int) -> int",
      "(None) -> None",
      "(torch.memory_format) -> torch.memory_format"
    ],
    "samples": 4970
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_utils.py",
    "line": 209,
    "func_name": "get_fake_args_kwargs",
    "type_comments": [
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch._subclasses.fake_tensor.FakeTensor, torch.fx.immutable_collections.immutable_list, float], torch.fx.immutable_collections.immutable_dict]",
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], torch.fx.immutable_collections.immutable_dict]",
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], torch.fx.immutable_collections.immutable_dict]",
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch._subclasses.fake_tensor.FakeTensor, torch.fx.immutable_collections.immutable_list, bool], torch.fx.immutable_collections.immutable_dict]",
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch.fx.immutable_collections.immutable_list, int], torch.fx.immutable_collections.immutable_dict]",
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch.fx.immutable_collections.immutable_list], torch.fx.immutable_collections.immutable_dict]",
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch._subclasses.fake_tensor.FakeTensor, torch.fx.immutable_collections.immutable_list], torch.fx.immutable_collections.immutable_dict]",
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch._subclasses.fake_tensor.FakeTensor, float], torch.fx.immutable_collections.immutable_dict]",
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch._subclasses.fake_tensor.FakeTensor, int, int, int], torch.fx.immutable_collections.immutable_dict]",
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], torch.fx.immutable_collections.immutable_dict]",
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], torch.fx.immutable_collections.immutable_dict]",
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch._subclasses.fake_tensor.FakeTensor, torch.dtype], torch.fx.immutable_collections.immutable_dict]",
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch._subclasses.fake_tensor.FakeTensor, int], torch.fx.immutable_collections.immutable_dict]",
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, int, int, int], torch.fx.immutable_collections.immutable_dict]",
      "(torch.fx.node.Node) -> Tuple[bool, Tuple[torch._subclasses.fake_tensor.FakeTensor], torch.fx.immutable_collections.immutable_dict]"
    ],
    "samples": 2186
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 113,
    "func_name": "log_module_code",
    "type_comments": [
      "(*str) -> None"
    ],
    "samples": 153
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 160,
    "func_name": "is_magic_method",
    "type_comments": [
      "(str) -> bool",
      "(torch._ops.OpOverload) -> bool",
      "(builtin_function_or_method) -> bool"
    ],
    "samples": 5160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 177,
    "func_name": "mark_nodes_dislike_padding",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 208,
    "func_name": "_get_overload_packet",
    "type_comments": [
      "(torch.fx.node.Node) -> None",
      "(torch.fx.node.Node) -> torch._ops.OpOverloadPacket"
    ],
    "samples": 6059
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 270,
    "func_name": "GraphLowering.static_sizes_strides",
    "type_comments": [
      "(torch.Tensor) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.One]]",
      "(torch.nn.parameter.Parameter) -> Tuple[List[sympy.core.numbers.Integer], List[sympy.core.numbers.One]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.One]]",
      "(torch.Tensor) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(torch.nn.parameter.Parameter) -> Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(torch.Tensor) -> Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[sympy.core.numbers.Integer], List[sympy.core.numbers.One]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[sympy.core.numbers.One], List[sympy.core.numbers.One]]",
      "(torch.Tensor) -> Tuple[List[sympy.core.numbers.Integer], List[sympy.core.numbers.One]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List, List]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(torch.nn.parameter.Parameter) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]"
    ],
    "samples": 1115
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 278,
    "func_name": "GraphLowering.__init__",
    "type_comments": [
      "(torch.fx.GraphModule, List[torch.SymInt], torch.fx.experimental.symbolic_shapes.ShapeEnv, int, bool, bool, Dict[str, None], None, None, bool, bool, None, None, None, None) -> None",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch.fx.experimental.symbolic_shapes.ShapeEnv, int, bool, bool, Dict[str, None], None, None, bool, bool, None, None, None, None) -> None",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch.fx.experimental.symbolic_shapes.ShapeEnv, int, bool, bool, Dict[str, None], None, None, bool, bool, None, None, None, None) -> None",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch.fx.experimental.symbolic_shapes.ShapeEnv, int, bool, bool, Dict, None, None, bool, bool, None, None, None, None) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 412,
    "func_name": "GraphLowering.has_feature",
    "type_comments": [
      "(torch.device, torch._inductor.codegen.common.BackendFeature) -> bool",
      "(torch._inductor.ir.ComputedBuffer, torch._inductor.codegen.common.BackendFeature) -> bool"
    ],
    "samples": 3918
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 416,
    "func_name": "decide_layout_opt",
    "type_comments": [
      "(torch.fx.GraphModule, bool) -> bool"
    ],
    "samples": 198
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 578,
    "func_name": "GraphLowering.qualify_name",
    "type_comments": [
      "(str) -> str"
    ],
    "samples": 2660
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 659,
    "func_name": "GraphLowering.warn_fallback",
    "type_comments": [
      "(None) -> None"
    ],
    "samples": 122
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 664,
    "func_name": "GraphLowering.add_device_info",
    "type_comments": [
      "(torch.device) -> None"
    ],
    "samples": 2640
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 671,
    "func_name": "fake_mode",
    "type_comments": [
      "() -> torch._subclasses.fake_tensor.FakeTensorMode"
    ],
    "samples": 201
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 675,
    "func_name": "GraphLowering.get_buffer",
    "type_comments": [
      "(str) -> torch._inductor.ir.ComputedBuffer",
      "(str) -> torch._inductor.ir.ConstantBuffer",
      "(str) -> torch._inductor.ir.TensorBox",
      "(str) -> torch._inductor.ir.ConcatKernel",
      "(str) -> torch._inductor.ir.MultiOutput",
      "(str) -> torch._inductor.ir.MutationOutput",
      "(str) -> torch._inductor.ir.DeviceCopy",
      "(str) -> torch._inductor.ir.ExternKernelOut",
      "(str) -> torch._inductor.ir.ExternKernelAlloc",
      "(str) -> torch._inductor.ir.RandomSeeds"
    ],
    "samples": 2806
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 690,
    "func_name": "GraphLowering.get_dtype",
    "type_comments": [
      "(str) -> torch.dtype"
    ],
    "samples": 10925
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 716,
    "func_name": "run",
    "type_comments": [
      "(*torch._subclasses.fake_tensor.FakeTensor) -> None",
      "(*Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]) -> None",
      "(*torch.SymInt) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 720,
    "func_name": "GraphLowering.register_buffer",
    "type_comments": [
      "(torch._inductor.ir.ScatterFallback, bool) -> str",
      "(torch._inductor.ir.ConcatKernel, bool) -> str",
      "(torch._inductor.ir.ExternKernelOut, bool) -> str",
      "(torch._inductor.ir.ExternKernelAlloc, bool) -> str",
      "(torch._inductor.ir.FallbackKernel, bool) -> str",
      "(torch._inductor.ir.MutationOutput, bool) -> str",
      "(torch._inductor.ir.DynamicScalar, bool) -> str",
      "(torch._inductor.ir.RandomSeeds, bool) -> str",
      "(torch._inductor.ir.MultiOutput, bool) -> str",
      "(torch._inductor.ir.ComputedBuffer, bool) -> str"
    ],
    "samples": 1919
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 740,
    "func_name": "GraphLowering.register_users_of",
    "type_comments": [
      "(torch.utils._sympy.functions.IntTrueDiv) -> None",
      "(torch._inductor.ir.TensorBox) -> None",
      "(List[torch._inductor.ir.TensorBox]) -> None",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> None",
      "(sympy.core.add.Add) -> None",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> None",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> None",
      "(torch._inductor.ir.Constant) -> None",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> None",
      "(sympy.core.symbol.Symbol) -> None",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> None",
      "(sympy.core.mul.Mul) -> None",
      "(None) -> None"
    ],
    "samples": 5192
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 741,
    "func_name": "register",
    "type_comments": [
      "(torch.utils._sympy.functions.IntTrueDiv) -> None",
      "(torch._inductor.ir.TensorBox) -> None",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> None",
      "(sympy.core.add.Add) -> None",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.Constant) -> None",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.symbol.Symbol) -> None",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.mul.Mul) -> None",
      "(None) -> None",
      "(List[torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 6695
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 854,
    "func_name": "GraphLowering.placeholder",
    "type_comments": [
      "(str, Tuple[], torch.fx.immutable_collections.immutable_dict) -> sympy.core.symbol.Symbol",
      "(str, Tuple[], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(str, Tuple[], torch.fx.immutable_collections.immutable_dict) -> sympy.core.mul.Mul"
    ],
    "samples": 1150
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 908,
    "func_name": "GraphLowering.call_function",
    "type_comments": [
      "(torch._ops.OpOverload, Tuple[int, torch.device], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch.device], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list], torch.fx.immutable_collections.immutable_dict) -> List[torch._inductor.ir.TensorBox]",
      "(torch._ops.OpOverload, Tuple[torch.fx.immutable_collections.immutable_list, torch._inductor.ir.TensorBox, str], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch.dtype], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> sympy.core.mul.Mul",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, bool, int, bool], Dict) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(torch._ops.OpOverload, Tuple[int, torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(builtin_function_or_method, Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], int], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(builtin_function_or_method, Tuple[List[torch._inductor.ir.TensorBox], int], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(builtin_function_or_method, Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], int], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, int], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, int, int], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, int], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(builtin_function_or_method, Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], int], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch.fx.immutable_collections.immutable_list, float], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(builtin_function_or_method, Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], int], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], Dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> sympy.core.symbol.Symbol",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, sympy.core.symbol.Symbol], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool], torch.fx.immutable_collections.immutable_dict) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list], torch.fx.immutable_collections.immutable_dict) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch.utils._sympy.functions.FloatTrueDiv], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[int, int, torch.fx.immutable_collections.immutable_list, torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(functools.partial, Tuple[], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, float], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[int], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, int, int, int], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch.fx.immutable_collections.immutable_list], torch.fx.immutable_collections.immutable_dict) -> List[torch._inductor.ir.TensorBox]",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, bool, int, bool, None, bool], Dict) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], Dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, int, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, str], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, bool], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch.fx.immutable_collections.immutable_list], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, int, torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, Tuple[torch.fx.immutable_collections.immutable_list, int], torch.fx.immutable_collections.immutable_dict) -> List[torch._inductor.ir.TensorBox]",
      "(torch._ops.OpOverload, Tuple[torch.fx.immutable_collections.immutable_list, int], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 4404
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1016,
    "func_name": "GraphLowering.output",
    "type_comments": [
      "(str, Tuple[Tuple[torch._inductor.ir.TensorBox, sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox]], torch.fx.immutable_collections.immutable_dict) -> None",
      "(str, Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]], torch.fx.immutable_collections.immutable_dict) -> None",
      "(str, Tuple[torch.fx.immutable_collections.immutable_list], torch.fx.immutable_collections.immutable_dict) -> None",
      "(str, Tuple[Tuple[torch._inductor.ir.TensorBox]], torch.fx.immutable_collections.immutable_dict) -> None",
      "(str, Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]], torch.fx.immutable_collections.immutable_dict) -> None",
      "(str, Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]], torch.fx.immutable_collections.immutable_dict) -> None",
      "(str, Tuple[Tuple[]], torch.fx.immutable_collections.immutable_dict) -> None",
      "(str, Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]], torch.fx.immutable_collections.immutable_dict) -> None",
      "(str, Tuple[Tuple[torch._inductor.ir.TensorBox, sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]], torch.fx.immutable_collections.immutable_dict) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1092,
    "func_name": "GraphLowering.finalize",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1096,
    "func_name": "set_current_node",
    "type_comments": [
      "(torch.fx.node.Node) -> Iterator"
    ],
    "samples": 9466
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1105,
    "func_name": "GraphLowering.try_match_insignificant_strides",
    "type_comments": [
      "(torch._inductor.ir.ReinterpretView, Tuple[int, int, int, int, int]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.ReinterpretView, Tuple[int, int, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ReinterpretView, Tuple[int, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ReinterpretView, Tuple[int, int, int, int]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.ReinterpretView, Tuple[int, int, int, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ReinterpretView, Tuple[torch.SymInt, torch.SymInt, int, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ReinterpretView, Tuple[int, int]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.StorageBox, Tuple[int, int, int, int]) -> torch._inductor.ir.StorageBox",
      "(torch._inductor.ir.ReinterpretView, Tuple[int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ReinterpretView, Tuple[torch.SymInt, int, int, int]) -> torch._inductor.ir.ReinterpretView"
    ],
    "samples": 348
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1130,
    "func_name": "significant_strides_equal",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[int], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]) -> bool",
      "(List[sympy.core.numbers.Integer], List[int], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[int], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]) -> bool"
    ],
    "samples": 20
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1160,
    "func_name": "GraphLowering.run_node",
    "type_comments": [
      "(torch.fx.node.Node) -> List[torch._inductor.ir.TensorBox]",
      "(torch.fx.node.Node) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(torch.fx.node.Node) -> sympy.core.add.Add",
      "(torch.fx.node.Node) -> torch._inductor.ir.Constant",
      "(torch.fx.node.Node) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(torch.fx.node.Node) -> sympy.core.symbol.Symbol",
      "(torch.fx.node.Node) -> None",
      "(torch.fx.node.Node) -> torch._inductor.ir.TensorBox",
      "(torch.fx.node.Node) -> sympy.core.mul.Mul",
      "(torch.fx.node.Node) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(torch.fx.node.Node) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(torch.fx.node.Node) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(torch.fx.node.Node) -> torch.utils._sympy.functions.IntTrueDiv"
    ],
    "samples": 5192
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1161,
    "func_name": "debug",
    "type_comments": [
      "(str) -> None"
    ],
    "samples": 5192
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1500,
    "func_name": "GraphLowering.init_wrapper_code",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1624,
    "func_name": "GraphLowering.codegen",
    "type_comments": [
      "() -> Tuple[str, List[Tuple[int, torch.fx.node.Node]]]"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1657,
    "func_name": "GraphLowering.count_bytes",
    "type_comments": [
      "() -> Tuple[int, List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.FusedSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, int]]], List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, float], Tuple[torch._inductor.scheduler.FusedSchedulerNode, float], Tuple[torch._inductor.scheduler.SchedulerNode, float]]]]",
      "() -> Tuple[int, List[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int]], List[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int]]]",
      "() -> Tuple[int, List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.FusedSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, int]]], List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.FusedSchedulerNode, float], Tuple[torch._inductor.scheduler.SchedulerNode, float]]]]",
      "() -> Tuple[int, List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.FusedSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, int]]], List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, float], Tuple[torch._inductor.scheduler.FusedSchedulerNode, float], Tuple[torch._inductor.scheduler.SchedulerNode, float], Tuple[torch._inductor.scheduler.SchedulerNode, int]]]]",
      "() -> Tuple[int, List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.FusedSchedulerNode, int]]], List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.FusedSchedulerNode, float]]]]",
      "() -> Tuple[int, List[Tuple[torch._inductor.scheduler.SchedulerNode, int]], List[Tuple[torch._inductor.scheduler.SchedulerNode, float]]]",
      "() -> Tuple[int, List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.FusedSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, int]]], List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.FusedSchedulerNode, float], Tuple[torch._inductor.scheduler.SchedulerNode, float], Tuple[torch._inductor.scheduler.SchedulerNode, int]]]]",
      "() -> Tuple[int, List[Tuple[torch._inductor.scheduler.ForeachKernelSchedulerNode, int]], List[Union[Tuple[torch._inductor.scheduler.ForeachKernelSchedulerNode, float], Tuple[torch._inductor.scheduler.ForeachKernelSchedulerNode, int]]]]",
      "() -> Tuple[int, List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, int]]], List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, float], Tuple[torch._inductor.scheduler.SchedulerNode, float]]]]",
      "() -> Tuple[int, List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.FusedSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, int]]], List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, float], Tuple[torch._inductor.scheduler.FusedSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, float]]]]",
      "() -> Tuple[int, List[Tuple[torch._inductor.scheduler.SchedulerNode, int]], List[Union[Tuple[torch._inductor.scheduler.SchedulerNode, float], Tuple[torch._inductor.scheduler.SchedulerNode, int]]]]",
      "() -> Tuple[int, List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.FusedSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, int]]], List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, float], Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.FusedSchedulerNode, float], Tuple[torch._inductor.scheduler.SchedulerNode, float]]]]",
      "() -> Tuple[int, List[Union[Tuple[torch._inductor.scheduler.FusedSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, int]]], List[Union[Tuple[torch._inductor.scheduler.FusedSchedulerNode, float], Tuple[torch._inductor.scheduler.SchedulerNode, float]]]]",
      "() -> Tuple[int, List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.NopKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, int]]], List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.NopKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, float]]]]",
      "() -> Tuple[int, List[Tuple[torch._inductor.scheduler.FusedSchedulerNode, int]], List[Tuple[torch._inductor.scheduler.FusedSchedulerNode, int]]]",
      "() -> Tuple[int, List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.FusedSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, int]]], List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.FusedSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, float], Tuple[torch._inductor.scheduler.SchedulerNode, int]]]]",
      "() -> Tuple[int, List[Tuple[torch._inductor.scheduler.SchedulerNode, int]], List[Tuple[torch._inductor.scheduler.SchedulerNode, int]]]",
      "() -> Tuple[int, List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, int]]], List[Union[Tuple[torch._inductor.scheduler.ExternKernelSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, float]]]]",
      "() -> Tuple[int, List[Union[Tuple[torch._inductor.scheduler.FusedSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, int]]], List[Union[Tuple[torch._inductor.scheduler.FusedSchedulerNode, int], Tuple[torch._inductor.scheduler.SchedulerNode, int]]]]"
    ],
    "samples": 153
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1668,
    "func_name": "save_output_code",
    "type_comments": [
      "(str) -> None"
    ],
    "samples": 182
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1673,
    "func_name": "compile_to_module",
    "type_comments": [
      "() -> pyannotate_runtime.collect_types.NoReturnType",
      "() -> module"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1723,
    "func_name": "GraphLowering.compile_to_fn",
    "type_comments": [
      "() -> function",
      "() -> pyannotate_runtime.collect_types.NoReturnType"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1752,
    "func_name": "GraphLowering.get_output_names",
    "type_comments": [
      "() -> List",
      "() -> List[str]"
    ],
    "samples": 739
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 1760,
    "func_name": "GraphLowering.is_unspec_arg",
    "type_comments": [
      "(str) -> bool",
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 6054
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 42,
    "func_name": "_is_constant",
    "type_comments": [
      "(sympy.functions.elementary.miscellaneous.Min) -> bool",
      "(torch.utils._sympy.functions.FloorDiv) -> bool",
      "(float) -> bool",
      "(torch.utils._sympy.functions.Identity) -> bool",
      "(torch.utils._sympy.functions.ModularIndexing) -> bool",
      "(sympy.core.numbers.Zero) -> bool",
      "(int) -> bool",
      "(sympy.core.numbers.Float) -> bool",
      "(sympy.core.numbers.One) -> bool",
      "(sympy.core.symbol.Symbol) -> bool",
      "(sympy.functions.elementary.complexes.Abs) -> bool",
      "(sympy.core.mul.Mul) -> bool",
      "(sympy.core.add.Add) -> bool",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> bool",
      "(sympy.functions.elementary.miscellaneous.Max) -> bool",
      "(sympy.core.numbers.Integer) -> bool"
    ],
    "samples": 9385
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 48,
    "func_name": "upper_bound",
    "type_comments": [
      "(sympy.core.mul.Mul) -> torch.utils._sympy.numbers.IntInfinity",
      "(sympy.core.symbol.Symbol) -> torch.utils._sympy.numbers.IntInfinity",
      "(sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.add.Add) -> torch.utils._sympy.numbers.IntInfinity",
      "(sympy.core.mul.Mul) -> sympy.core.numbers.Integer",
      "(sympy.core.symbol.Symbol) -> sympy.core.numbers.Integer",
      "(int) -> int",
      "(torch.utils._sympy.functions.FloorDiv) -> sympy.core.numbers.Integer",
      "(torch.utils._sympy.functions.FloorDiv) -> sympy.core.numbers.One"
    ],
    "samples": 3833
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 52,
    "func_name": "TypedExpr",
    "type_comments": [
      "() -> None"
    ],
    "samples": 55
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 59,
    "func_name": "TypedExpr.is_constant",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 3420
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 62,
    "func_name": "TypedExpr.__post_init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 3660
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 67,
    "func_name": "SymPyOps",
    "type_comments": [
      "() -> None"
    ],
    "samples": 56
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 79,
    "func_name": "constant",
    "type_comments": [
      "(int, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(bool, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(float, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(sympy.core.numbers.Integer, torch.dtype) -> torch._inductor.index_propagation.TypedExpr"
    ],
    "samples": 3101
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 83,
    "func_name": "index_expr",
    "type_comments": [
      "(torch.utils._sympy.functions.FloorDiv, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(int, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(torch.utils._sympy.functions.FloatTrueDiv, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(torch.utils._sympy.functions.Identity, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(sympy.functions.elementary.miscellaneous.Min, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(sympy.core.numbers.One, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(sympy.core.mul.Mul, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(sympy.core.numbers.Integer, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(sympy.core.add.Add, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(sympy.core.symbol.Symbol, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(sympy.core.numbers.Zero, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(torch.utils._sympy.functions.ModularIndexing, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(sympy.functions.elementary.miscellaneous.Max, torch.dtype) -> torch._inductor.index_propagation.TypedExpr"
    ],
    "samples": 655
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 166,
    "func_name": "IndexPropVar",
    "type_comments": [
      "() -> None"
    ],
    "samples": 57
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 171,
    "func_name": "new_symbolic",
    "type_comments": [
      "(torch._inductor.index_propagation.TypedExpr) -> torch._inductor.index_propagation.IndexPropVar"
    ],
    "samples": 3690
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 175,
    "func_name": "IndexPropVar.__post_init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 16663
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 184,
    "func_name": "IndexPropagation",
    "type_comments": [
      "() -> None"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 192,
    "func_name": "IndexPropagation.__init__",
    "type_comments": [
      "(torch._inductor.sizevars.SimplifyIndexing, Dict) -> None",
      "(torch._inductor.sizevars.SimplifyIndexing, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]) -> None",
      "(torch._inductor.sizevars.SimplifyIndexing, Dict[sympy.core.symbol.Symbol, Union[int, torch.utils._sympy.functions.FloorDiv]]) -> None",
      "(torch._inductor.sizevars.SimplifyIndexing, Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> None",
      "(torch._inductor.sizevars.SimplifyIndexing, Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer]]) -> None",
      "(torch._inductor.sizevars.SimplifyIndexing, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]) -> None",
      "(torch._inductor.sizevars.SimplifyIndexing, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> None",
      "(torch._inductor.sizevars.SimplifyIndexing, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.sizevars.SimplifyIndexing, Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> None",
      "(torch._inductor.sizevars.SimplifyIndexing, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.sizevars.SimplifyIndexing, Dict[sympy.core.symbol.Symbol, int]) -> None",
      "(torch._inductor.sizevars.SimplifyIndexing, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.sizevars.SimplifyIndexing, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None"
    ],
    "samples": 2944
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 209,
    "func_name": "IndexPropagation.materialize_expr",
    "type_comments": [
      "(sympy.core.symbol.Symbol, torch.dtype) -> torch.fx.proxy.Proxy",
      "(torch.utils._sympy.functions.Identity, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.functions.elementary.miscellaneous.Min, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.functions.elementary.miscellaneous.Max, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.functions.elementary.complexes.Abs, torch.dtype) -> torch.fx.proxy.Proxy",
      "(torch.utils._sympy.functions.ModularIndexing, torch.dtype) -> torch.fx.proxy.Proxy",
      "(int, torch.dtype) -> torch.fx.proxy.Proxy",
      "(bool, torch.dtype) -> torch.fx.proxy.Proxy",
      "(float, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.core.add.Add, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.core.mul.Mul, torch.dtype) -> torch.fx.proxy.Proxy"
    ],
    "samples": 3522
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 216,
    "func_name": "IndexPropagation.unwrap",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing) -> torch.utils._sympy.functions.ModularIndexing",
      "(float) -> float",
      "(str) -> str",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(sympy.core.numbers.Zero) -> sympy.core.numbers.Zero",
      "(torch._inductor.index_propagation.IndexPropVar) -> torch.fx.proxy.Proxy",
      "(Tuple[torch._inductor.index_propagation.IndexPropVar]) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(torch._inductor.ir.LoopBodyBlock) -> torch._inductor.ir.LoopBodyBlock",
      "(sympy.core.add.Add) -> sympy.core.add.Add",
      "(torch.dtype) -> torch.dtype",
      "(bool) -> bool",
      "(sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(Tuple[torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar]) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.mul.Mul) -> sympy.core.mul.Mul",
      "(int) -> int",
      "(None) -> None",
      "(function) -> function"
    ],
    "samples": 22497
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 229,
    "func_name": "IndexPropagation.wrap",
    "type_comments": [
      "(torch.fx.proxy.Proxy) -> torch._inductor.index_propagation.IndexPropVar",
      "(Tuple[torch.fx.proxy.Proxy]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[torch.fx.proxy.Proxy, torch.fx.proxy.Proxy, torch.fx.proxy.Proxy]) -> pyannotate_runtime.collect_types.UnknownType",
      "(None) -> torch._inductor.index_propagation.IndexPropVar",
      "(sympy.core.symbol.Symbol) -> torch._inductor.index_propagation.IndexPropVar"
    ],
    "samples": 15443
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 249,
    "func_name": "IndexPropagation.fallback",
    "type_comments": [
      "(str, Tuple[torch.dtype, torch.dtype, str, torch._inductor.index_propagation.IndexPropVar], Dict) -> Tuple[torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar]",
      "(str, Tuple[str, sympy.core.add.Add, torch._inductor.index_propagation.IndexPropVar], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch._inductor.index_propagation.IndexPropVar, torch._inductor.ir.LoopBodyBlock, int], Dict) -> pyannotate_runtime.collect_types.UnknownType",
      "(str, Tuple[torch._inductor.index_propagation.IndexPropVar, torch.dtype], Dict[str, torch.dtype]) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[str, sympy.core.numbers.Zero, torch._inductor.index_propagation.IndexPropVar, None], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[str, sympy.core.numbers.Zero], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch.dtype, torch.dtype, str, torch._inductor.index_propagation.IndexPropVar], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[str, sympy.core.add.Add], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch._inductor.index_propagation.IndexPropVar], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[str, sympy.core.numbers.Zero, torch._inductor.index_propagation.IndexPropVar], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch._inductor.index_propagation.IndexPropVar, function, int], Dict) -> pyannotate_runtime.collect_types.UnknownType",
      "(str, Tuple[torch._inductor.index_propagation.IndexPropVar, function, float], Dict) -> pyannotate_runtime.collect_types.UnknownType",
      "(str, Tuple[str, sympy.core.symbol.Symbol, torch._inductor.index_propagation.IndexPropVar], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[sympy.core.add.Add, sympy.core.numbers.Integer], Dict[str, bool]) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[str, sympy.core.add.Add, torch._inductor.index_propagation.IndexPropVar, None], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch._inductor.index_propagation.IndexPropVar, sympy.core.numbers.Integer, bool], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[str, sympy.core.symbol.Symbol], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch._inductor.index_propagation.IndexPropVar, torch._inductor.ir.LoopBodyBlock, float], Dict) -> pyannotate_runtime.collect_types.UnknownType",
      "(str, Tuple[str, int], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[str, sympy.core.symbol.Symbol, torch._inductor.index_propagation.IndexPropVar, None], Dict) -> torch._inductor.index_propagation.IndexPropVar"
    ],
    "samples": 15070
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 257,
    "func_name": "IndexPropagation.propagate_sympy",
    "type_comments": [
      "(str, Tuple[sympy.core.symbol.Symbol, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[sympy.core.numbers.Integer, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch.utils._sympy.functions.FloorDiv, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch._inductor.index_propagation.IndexPropVar, torch.dtype], Dict[str, torch.dtype]) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[sympy.core.add.Add], Dict[str, torch.dtype]) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[float, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[sympy.core.mul.Mul, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[sympy.core.numbers.Zero, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[int, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[sympy.core.numbers.One, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch._inductor.index_propagation.IndexPropVar], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[sympy.core.add.Add, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[bool, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch.utils._sympy.functions.FloatTrueDiv, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[sympy.functions.elementary.miscellaneous.Max, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch._inductor.index_propagation.IndexPropVar, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[sympy.functions.elementary.miscellaneous.Min, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[torch.utils._sympy.functions.ModularIndexing, torch.dtype], Dict) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, Tuple[sympy.core.symbol.Symbol], Dict[str, torch.dtype]) -> torch._inductor.index_propagation.IndexPropVar"
    ],
    "samples": 3881
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 261,
    "func_name": "unwrap",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.numbers.One) -> sympy.core.numbers.One",
      "(float) -> float",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(sympy.core.numbers.Zero) -> sympy.core.numbers.Zero",
      "(torch._inductor.index_propagation.IndexPropVar) -> torch._inductor.index_propagation.TypedExpr",
      "(sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add) -> sympy.core.add.Add",
      "(torch.dtype) -> torch.dtype",
      "(bool) -> bool",
      "(sympy.functions.elementary.miscellaneous.Min) -> sympy.functions.elementary.miscellaneous.Min",
      "(sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.mul.Mul) -> sympy.core.mul.Mul",
      "(sympy.functions.elementary.complexes.Abs) -> sympy.functions.elementary.complexes.Abs",
      "(int) -> int",
      "(torch.utils._sympy.functions.FloorDiv) -> torch.utils._sympy.functions.FloorDiv",
      "(torch.utils._sympy.functions.Identity) -> torch.utils._sympy.functions.Identity",
      "(sympy.functions.elementary.miscellaneous.Max) -> sympy.functions.elementary.miscellaneous.Max"
    ],
    "samples": 7277
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 279,
    "func_name": "IndexPropagation.__getattr__",
    "type_comments": [
      "(str) -> function"
    ],
    "samples": 16900
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 280,
    "func_name": "inner",
    "type_comments": [
      "(*Union[torch._inductor.index_propagation.IndexPropVar, torch.dtype]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*sympy.core.symbol.Symbol) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[str, sympy.core.numbers.Zero]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[function, int, torch._inductor.index_propagation.IndexPropVar]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[sympy.core.add.Add, torch.dtype]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*sympy.core.add.Add) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[float, torch._inductor.index_propagation.IndexPropVar, torch._inductor.ir.LoopBodyBlock]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[sympy.core.mul.Mul, torch.dtype]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[str, sympy.core.numbers.Zero, torch._inductor.index_propagation.IndexPropVar]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[int, torch.dtype]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[str, sympy.core.add.Add]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Optional[Union[str, sympy.core.symbol.Symbol, torch._inductor.index_propagation.IndexPropVar]]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Optional[Union[str, sympy.core.numbers.Zero, torch._inductor.index_propagation.IndexPropVar]]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[Tuple[torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar], str, torch.dtype]) -> Tuple[torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar]",
      "(*Union[int, str]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[str, torch.utils._sympy.functions.Identity]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[float, torch.dtype]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[str, sympy.core.symbol.Symbol]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[str, sympy.core.add.Add, torch._inductor.index_propagation.IndexPropVar]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[str, torch._inductor.index_propagation.IndexPropVar, torch.dtype]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[str, sympy.core.symbol.Symbol, torch._inductor.index_propagation.IndexPropVar]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[sympy.core.numbers.Integer, torch.dtype]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*torch._inductor.index_propagation.IndexPropVar) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[sympy.core.symbol.Symbol, torch.dtype]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Optional[Union[str, sympy.core.add.Add, torch._inductor.index_propagation.IndexPropVar]]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[sympy.core.numbers.One, torch.dtype]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[str, torch._inductor.index_propagation.IndexPropVar, torch.dtype]) -> Tuple[torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar]"
    ],
    "samples": 16900
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 135,
    "func_name": "validate_ir",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> None",
      "(List[torch._inductor.ir.TensorBox]) -> None",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> None",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> None",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> None",
      "(sympy.core.symbol.Symbol) -> None",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> None",
      "(sympy.core.mul.Mul) -> None"
    ],
    "samples": 8663
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 136,
    "func_name": "_check_tensorbox",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> None",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.symbol.Symbol) -> None",
      "(sympy.core.mul.Mul) -> None",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 12225
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 165,
    "func_name": "ops_wrapper",
    "type_comments": [
      "(str) -> function"
    ],
    "samples": 1132
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 168,
    "func_name": "fn",
    "type_comments": [
      "(*Union[str, torch._inductor.codegen.triton.TritonCSEVariable]) -> torch._inductor.virtualized.OpsValue",
      "(*torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 19311
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 174,
    "func_name": "inverse_reorder",
    "type_comments": [
      "(List) -> function",
      "(List[int]) -> function"
    ],
    "samples": 2948
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 177,
    "func_name": "reindex",
    "type_comments": [
      "(List[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List) -> List",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]"
    ],
    "samples": 2948
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 184,
    "func_name": "same_reorder",
    "type_comments": [
      "(List) -> function",
      "(List[int]) -> function"
    ],
    "samples": 2948
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 185,
    "func_name": "reindex",
    "type_comments": [
      "(List[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List) -> List"
    ],
    "samples": 2948
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 192,
    "func_name": "fuse_reindexing",
    "type_comments": [
      "(function, function) -> function"
    ],
    "samples": 2948
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 193,
    "func_name": "reindex",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(List[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List) -> List",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]"
    ],
    "samples": 2979
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 203,
    "func_name": "stride_order2fill_order",
    "type_comments": [
      "(List[int]) -> List[int]"
    ],
    "samples": 4358
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 215,
    "func_name": "get_stride_order",
    "type_comments": [
      "(Tuple[]) -> List",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> List[int]",
      "(List[int]) -> List[int]",
      "(Tuple[int, int, int, int, int]) -> List[int]",
      "(Tuple[int, int, int, int]) -> List[int]",
      "(List[sympy.core.numbers.Integer]) -> List[int]",
      "(List[Union[int, sympy.core.numbers.Integer]]) -> List[int]",
      "(List[sympy.core.numbers.One]) -> List[int]",
      "(Tuple[int]) -> List[int]",
      "(Tuple[int, int]) -> List[int]",
      "(Tuple[int, int, int]) -> List[int]"
    ],
    "samples": 4709
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 226,
    "func_name": "ir_node_to_tensor",
    "type_comments": [
      "(torch._inductor.ir.StorageBox, bool) -> torch._subclasses.fake_tensor.FakeTensor",
      "(torch._inductor.ir.ConstantBuffer, bool) -> torch._subclasses.fake_tensor.FakeTensor",
      "(torch._inductor.ir.ComputedBuffer, bool) -> torch._subclasses.fake_tensor.FakeTensor",
      "(torch._inductor.ir.InputBuffer, bool) -> torch._subclasses.fake_tensor.FakeTensor",
      "(torch._inductor.ir.TensorBox, bool) -> torch._subclasses.fake_tensor.FakeTensor",
      "(None, bool) -> None",
      "(torch._inductor.ir.ReinterpretView, bool) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 1000
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 260,
    "func_name": "get_device_type",
    "type_comments": [
      "(torch.device) -> str",
      "(torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.ComputedBuffer) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.Pointwise) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 6181
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 272,
    "func_name": "is_cpu",
    "type_comments": [
      "(torch._inductor.ir.Pointwise) -> bool"
    ],
    "samples": 817
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 279,
    "func_name": "current_origins",
    "type_comments": [
      "(Set[torch.fx.node.Node]) -> Iterator"
    ],
    "samples": 9466
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 289,
    "func_name": "IRNode.__post_init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 16755
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 293,
    "func_name": "IRNode.get_traceback",
    "type_comments": [
      "() -> None"
    ],
    "samples": 1920
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 315,
    "func_name": "get_read_names",
    "type_comments": [
      "() -> Set",
      "() -> Set[str]"
    ],
    "samples": 4760
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 319,
    "func_name": "IRNode.get_dtype",
    "type_comments": [
      "() -> None",
      "() -> torch.dtype"
    ],
    "samples": 22709
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 332,
    "func_name": "IRNode.get_numel",
    "type_comments": [
      "() -> sympy.core.numbers.Zero",
      "() -> sympy.core.numbers.Integer",
      "() -> sympy.core.numbers.One",
      "() -> sympy.core.add.Add",
      "() -> sympy.core.symbol.Symbol",
      "() -> sympy.core.mul.Mul"
    ],
    "samples": 15361
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 335,
    "func_name": "IRNode.is_zero_elements",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 11002
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 383,
    "func_name": "Loops.get_unbacked_symbol_uses",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 1910
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 400,
    "func_name": "Loops.__post_init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 3957
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 406,
    "func_name": "Loops.get_device",
    "type_comments": [
      "() -> torch.device"
    ],
    "samples": 10178
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 409,
    "func_name": "Loops.get_origin_node",
    "type_comments": [
      "() -> None",
      "() -> torch.fx.node.Node"
    ],
    "samples": 1890
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 412,
    "func_name": "Loops.get_size",
    "type_comments": [
      "() -> List[sympy.core.mul.Mul]",
      "() -> List",
      "() -> List[int]",
      "() -> List[sympy.core.numbers.Integer]",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "() -> List[Union[int, sympy.core.symbol.Symbol]]",
      "() -> List[Union[int, sympy.core.numbers.One]]",
      "() -> List[Union[int, torch.utils._sympy.functions.FloorDiv]]",
      "() -> List[sympy.core.numbers.One]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[sympy.core.symbol.Symbol]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]"
    ],
    "samples": 20703
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 415,
    "func_name": "Loops.get_pointwise_size",
    "type_comments": [
      "() -> List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[sympy.core.mul.Mul]",
      "() -> List",
      "() -> List[int]",
      "() -> List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "() -> List[sympy.core.numbers.Integer]",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "() -> List[Union[int, sympy.core.symbol.Symbol]]",
      "() -> List[Union[int, sympy.core.numbers.One]]",
      "() -> List[Union[int, torch.utils._sympy.functions.FloorDiv]]",
      "() -> List[sympy.core.numbers.One]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "() -> List[Union[int, sympy.core.numbers.Integer]]",
      "() -> List[sympy.core.symbol.Symbol]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[Union[int, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]"
    ],
    "samples": 2826
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 421,
    "func_name": "create",
    "type_comments": [
      "(*Union[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, torch.device, torch.dtype]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], function, torch.device, torch.dtype]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[sympy.core.numbers.Integer], function, torch.device, torch.dtype]) -> torch._inductor.ir.TensorBox",
      "() -> torch._inductor.ir.TensorBox"
    ],
    "samples": 3663
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 432,
    "func_name": "_index",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], torch.utils._sympy.symbol.SymT) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[int], torch.utils._sympy.symbol.SymT) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], torch.utils._sympy.symbol.SymT) -> List[sympy.core.symbol.Symbol]",
      "(List, torch.utils._sympy.symbol.SymT) -> List",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], torch.utils._sympy.symbol.SymT) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], torch.utils._sympy.symbol.SymT) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[int, sympy.core.numbers.One]], torch.utils._sympy.symbol.SymT) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], torch.utils._sympy.symbol.SymT) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]], torch.utils._sympy.symbol.SymT) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[int], torch.utils._sympy.symbol.SymT) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[int, sympy.core.symbol.Symbol]], torch.utils._sympy.symbol.SymT) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[int, sympy.core.symbol.Symbol]], torch.utils._sympy.symbol.SymT) -> List[sympy.core.symbol.Symbol]",
      "(List[sympy.core.numbers.One], torch.utils._sympy.symbol.SymT) -> List[sympy.core.numbers.Zero]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], torch.utils._sympy.symbol.SymT) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], torch.utils._sympy.symbol.SymT) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], torch.utils._sympy.symbol.SymT) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.mul.Mul], torch.utils._sympy.symbol.SymT) -> List[sympy.core.symbol.Symbol]",
      "(List[torch.utils._sympy.functions.FloorDiv], torch.utils._sympy.symbol.SymT) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], torch.utils._sympy.symbol.SymT) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], torch.utils._sympy.symbol.SymT) -> List[sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol], torch.utils._sympy.symbol.SymT) -> List[sympy.core.symbol.Symbol]",
      "(List[sympy.core.numbers.Integer], torch.utils._sympy.symbol.SymT) -> List[sympy.core.symbol.Symbol]"
    ],
    "samples": 4570
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 439,
    "func_name": "inner_fn_opcount",
    "type_comments": [
      "() -> int"
    ],
    "samples": 2731
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 449,
    "func_name": "Loops.inner_fn_args",
    "type_comments": [
      "() -> Tuple[List[sympy.core.symbol.Symbol]]",
      "() -> Tuple[List]",
      "() -> Tuple[List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]]",
      "() -> Tuple[List[sympy.core.numbers.Zero]]"
    ],
    "samples": 2929
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 457,
    "func_name": "Loops.has_large_inner_fn",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 5561
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 460,
    "func_name": "Loops.inner_fn_free_unbacked_symbols",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 1683
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 464,
    "func_name": "Loops.get_reads",
    "type_comments": [
      "() -> Set",
      "() -> Set[torch._inductor.dependencies.MemoryDep]"
    ],
    "samples": 2806
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 502,
    "func_name": "Pointwise.make_loader",
    "type_comments": [
      "() -> function",
      "() -> functools.partial"
    ],
    "samples": 10096
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 509,
    "func_name": "Pointwise.get_reduction_size",
    "type_comments": [
      "() -> List"
    ],
    "samples": 1929
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 512,
    "func_name": "Pointwise.get_reduction_type",
    "type_comments": [
      "() -> None"
    ],
    "samples": 13518
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 515,
    "func_name": "Pointwise.store_output",
    "type_comments": [
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 5717
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 633,
    "func_name": "Reduction.get_unbacked_symbol_uses",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 472
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 638,
    "func_name": "Reduction.get_reduction_size",
    "type_comments": [
      "() -> List[sympy.core.add.Add]",
      "() -> List[sympy.core.mul.Mul]",
      "() -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "() -> List[int]",
      "() -> List[torch.utils._sympy.functions.FloorDiv]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[sympy.core.numbers.Integer]",
      "() -> List[sympy.core.symbol.Symbol]"
    ],
    "samples": 1259
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 641,
    "func_name": "Reduction.get_reduction_type",
    "type_comments": [
      "() -> str"
    ],
    "samples": 3701
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 644,
    "func_name": "Reduction.store_reduction",
    "type_comments": [
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(None, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 704
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 661,
    "func_name": "Reduction.inner_fn_free_unbacked_symbols",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 472
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 681,
    "func_name": "num_splits",
    "type_comments": [
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[torch.utils._sympy.functions.FloorDiv], str, torch.utils._sympy.functions.FloorDiv, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, sympy.core.mul.Mul, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int], str, sympy.core.numbers.Integer, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], str, sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], str, sympy.core.numbers.Integer, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, sympy.core.mul.Mul, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[int], List[sympy.core.numbers.Integer], str, sympy.core.numbers.Integer, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.symbol.Symbol], str, sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], str, sympy.core.numbers.Integer, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[torch.utils._sympy.functions.FloorDiv], str, torch.utils._sympy.functions.FloorDiv, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, sympy.core.numbers.One]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.add.Add], str, sympy.core.add.Add, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.symbol.Symbol], str, sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, sympy.core.numbers.One]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.One], List[sympy.core.symbol.Symbol], str, sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[torch.utils._sympy.functions.FloorDiv], str, torch.utils._sympy.functions.FloorDiv, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul], str, sympy.core.mul.Mul, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, sympy.core.numbers.Integer]",
      "(torch.device, torch.dtype, torch.dtype, functools.partial, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], str, sympy.core.numbers.Integer, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul], str, sympy.core.mul.Mul, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer], str, sympy.core.numbers.Integer, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[sympy.core.mul.Mul], str, sympy.core.mul.Mul, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.mul.Mul], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], str, sympy.core.numbers.Integer, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, functools.partial, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[int], str, sympy.core.numbers.Integer, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, sympy.core.mul.Mul, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, sympy.core.numbers.Integer]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer], str, sympy.core.numbers.Integer, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul], str, sympy.core.mul.Mul, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol], str, sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, sympy.core.numbers.One]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[int, sympy.core.numbers.One]], List[int], str, sympy.core.numbers.Integer, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], str, sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul], str, sympy.core.mul.Mul, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, sympy.core.numbers.One]",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[sympy.core.symbol.Symbol], str, sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int], str, sympy.core.numbers.Integer, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], str, sympy.core.numbers.Integer, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], str, sympy.core.numbers.Integer, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.One], List[sympy.core.symbol.Symbol], str, sympy.core.symbol.Symbol, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer], str, sympy.core.numbers.Integer, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], str, sympy.core.numbers.Integer, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, sympy.core.mul.Mul, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, sympy.core.numbers.Integer]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], str, sympy.core.numbers.Integer, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], str, sympy.core.numbers.Integer, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.symbol.Symbol], str, sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, sympy.core.numbers.Integer]",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[sympy.core.numbers.Integer], str, sympy.core.numbers.Integer, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, sympy.core.mul.Mul, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, sympy.core.numbers.Integer]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, sympy.core.mul.Mul, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, sympy.core.numbers.One]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, sympy.core.mul.Mul, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, sympy.core.numbers.Integer]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol], str, sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[sympy.core.mul.Mul], str, sympy.core.mul.Mul, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.One], List[sympy.core.numbers.Integer], str, sympy.core.numbers.Integer, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, sympy.core.mul.Mul, torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[int, sympy.core.numbers.Integer]], List[sympy.core.numbers.Integer], str, sympy.core.numbers.Integer, None) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]"
    ],
    "samples": 372
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 693,
    "func_name": "_is_static",
    "type_comments": [
      "(sympy.core.numbers.Integer) -> bool",
      "(int) -> bool"
    ],
    "samples": 538
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 728,
    "func_name": "inner_reduction_splits",
    "type_comments": [
      "(int, int) -> int",
      "(int, sympy.core.numbers.Integer) -> int",
      "(sympy.core.numbers.Integer, int) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Integer, int) -> int"
    ],
    "samples": 263
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 947,
    "func_name": "create",
    "type_comments": [
      "(torch.device, torch.dtype, torch.dtype, function, List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul], str, torch._inductor.runtime.hints.ReductionHint, None) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.add.Add], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[sympy.core.symbol.Symbol], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.One], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.One], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[sympy.core.mul.Mul], str, torch._inductor.runtime.hints.ReductionHint, None) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.One], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[sympy.core.mul.Mul], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.One], List[sympy.core.symbol.Symbol], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[int, sympy.core.numbers.Integer]], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, None) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.symbol.Symbol], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[int], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, None) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.mul.Mul], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[torch.utils._sympy.functions.FloorDiv], str, torch._inductor.runtime.hints.ReductionHint, None) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[torch.utils._sympy.functions.FloorDiv], str, torch._inductor.runtime.hints.ReductionHint, None) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.symbol.Symbol], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 298
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1090,
    "func_name": "default_accumulator",
    "type_comments": [
      "(str, torch.dtype) -> Tuple[int, int, int]",
      "(str, torch.dtype) -> float",
      "(str, torch.dtype) -> int"
    ],
    "samples": 412
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1116,
    "func_name": "default_value",
    "type_comments": [
      "(str, torch.dtype) -> Tuple[int, int, int]",
      "(str, torch.dtype) -> float",
      "(str, torch.dtype) -> int"
    ],
    "samples": 330
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1930,
    "func_name": "is_storage_and_layout",
    "type_comments": [
      "(torch._inductor.ir.ReinterpretView) -> bool",
      "(torch._inductor.ir.SliceView) -> bool",
      "(torch._inductor.ir.StorageBox) -> bool",
      "(torch._inductor.ir.View) -> bool",
      "(torch._inductor.ir.Constant) -> bool",
      "(torch._inductor.ir.Pointwise) -> bool",
      "(torch._inductor.ir.InputBuffer) -> bool",
      "(torch._inductor.ir.ComputedBuffer) -> bool",
      "(torch._inductor.ir.PermuteView) -> bool",
      "(torch._inductor.ir.ConstantBuffer) -> bool",
      "(torch._inductor.ir.IndexingConstant) -> bool",
      "(torch._inductor.ir.TensorBox) -> bool"
    ],
    "samples": 4131
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1938,
    "func_name": "is_contiguous_storage_and_layout",
    "type_comments": [
      "(torch._inductor.ir.ReinterpretView) -> bool",
      "(torch._inductor.ir.SliceView) -> bool",
      "(torch._inductor.ir.StorageBox) -> bool",
      "(torch._inductor.ir.View) -> bool",
      "(torch._inductor.ir.PermuteView) -> bool"
    ],
    "samples": 850
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1950,
    "func_name": "as_storage_and_layout",
    "type_comments": [
      "(torch._inductor.ir.StorageBox, bool, bool, None, bool) -> Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.NonOwningLayout]",
      "(torch._inductor.ir.Pointwise, bool, bool, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch._inductor.ir.ComputedBuffer, bool, bool, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch._inductor.ir.IndexingConstant, bool, bool, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch._inductor.ir.TensorBox, bool, bool, None, bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.InputBuffer, bool, bool, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch._inductor.ir.StorageBox, bool, bool, None, bool) -> Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.FixedLayout]",
      "(torch._inductor.ir.ConstantBuffer, bool, bool, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch._inductor.ir.TensorBox, bool, bool, List[int], bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.ExternKernelOut, bool, bool, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch._inductor.ir.SliceView, bool, bool, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch._inductor.ir.StorageBox, bool, bool, List[int], bool) -> Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.FixedLayout]",
      "(torch._inductor.ir.StorageBox, bool, bool, None, bool) -> Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.FlexibleLayout]",
      "(torch._inductor.ir.Constant, bool, bool, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch._inductor.ir.ReinterpretView, bool, bool, None, bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.StorageBox, bool, bool, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch._inductor.ir.View, bool, bool, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch._inductor.ir.PermuteView, bool, bool, None, bool) -> pyannotate_runtime.collect_types.NoReturnType"
    ],
    "samples": 7401
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1995,
    "func_name": "is_stride_order_storage_and_layout",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, List[int]) -> bool"
    ],
    "samples": 533
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2013,
    "func_name": "BaseView.make_indexer",
    "type_comments": [
      "() -> function",
      "() -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 439
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2017,
    "func_name": "indexer",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> sympy.core.symbol.Symbol",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.add.Add, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.add.Add]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.add.Add, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.add.Add]) -> sympy.core.add.Add",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.symbol.Symbol",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.numbers.Zero"
    ],
    "samples": 439
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2022,
    "func_name": "BaseView.make_loader",
    "type_comments": [
      "() -> function",
      "() -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 2234
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2026,
    "func_name": "loader",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.add.Add]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.add.Add]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity, torch.utils._sympy.functions.ModularIndexing]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.add.Add, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.add.Add, sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(List) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.add.Add, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.add.Add, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 17084
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2031,
    "func_name": "dtype",
    "type_comments": [
      "() -> torch.dtype",
      "() -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 2488
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2038,
    "func_name": "BaseView.get_device",
    "type_comments": [
      "() -> pyannotate_runtime.collect_types.UnknownType",
      "() -> torch.device"
    ],
    "samples": 1319
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2041,
    "func_name": "BaseView.get_origin_node",
    "type_comments": [
      "() -> None"
    ],
    "samples": 132
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2050,
    "func_name": "BaseView.mark_reuse",
    "type_comments": [
      "(int) -> pyannotate_runtime.collect_types.UnknownType",
      "(int) -> None"
    ],
    "samples": 555
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2053,
    "func_name": "BaseView.has_exceeded_max_reads",
    "type_comments": [
      "() -> pyannotate_runtime.collect_types.UnknownType",
      "() -> bool"
    ],
    "samples": 1255
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2056,
    "func_name": "BaseView.realize",
    "type_comments": [
      "() -> str",
      "() -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 503
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2059,
    "func_name": "BaseView.realize_hint",
    "type_comments": [
      "() -> None",
      "() -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 232
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2071,
    "func_name": "BaseView.get_reads",
    "type_comments": [
      "() -> Set",
      "() -> Set[torch._inductor.dependencies.MemoryDep]"
    ],
    "samples": 1074
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2078,
    "func_name": "BaseView.unwrap_view",
    "type_comments": [
      "() -> torch._inductor.ir.StorageBox",
      "() -> torch._inductor.ir.Constant",
      "() -> torch._inductor.ir.IndexingConstant"
    ],
    "samples": 1057
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2095,
    "func_name": "_normalize_size",
    "type_comments": [
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.Constant, List[sympy.core.mul.Mul]) -> List[sympy.core.mul.Mul]",
      "(torch._inductor.ir.IndexingConstant, List[sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.ReinterpretView, Tuple[int, int]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.Constant, List[int]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.View, Tuple[int, int]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.Constant, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.One]) -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch._inductor.ir.View, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.Constant, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.PermuteView, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.IndexingConstant, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.IndexingConstant, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch._inductor.ir.View, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.Constant, List[sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.Constant, List[Union[int, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.Constant, List[sympy.core.numbers.One]) -> List[sympy.core.numbers.One]",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.Constant, List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.Constant, List[Union[int, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.StorageBox, Tuple[int, int, int, int]) -> List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, int, int, int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.symbol.Symbol, int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.PermuteView, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.StorageBox, Tuple[int, int, int]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch._inductor.ir.Constant, List) -> List",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.add.Add]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch._inductor.ir.Constant, List[Union[int, sympy.core.numbers.One]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch._inductor.ir.IndexingConstant, List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.Constant, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.View, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, int]) -> List[Union[int, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch._inductor.ir.Constant, List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, int, int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, int]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.View, Tuple[torch.utils._sympy.functions.FloorDiv, int, int, int, int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, torch.utils._sympy.functions.FloorDiv]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.Constant, List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch._inductor.ir.View, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Integer]",
      "(torch._inductor.ir.IndexingConstant, List[sympy.core.mul.Mul]) -> List[sympy.core.mul.Mul]",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Integer]"
    ],
    "samples": 1922
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2120,
    "func_name": "create",
    "type_comments": [
      "(torch._inductor.ir.Constant, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.Constant, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.Constant, List[sympy.core.numbers.One]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.PermuteView, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.IndexingConstant, List[sympy.core.mul.Mul]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.View, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.Constant, List[Union[int, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.IndexingConstant, List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, int]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.View, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.PermuteView, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.View, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.symbol.Symbol, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.Constant, List[int]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.One]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.View, Tuple[int, int]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.IndexingConstant, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[int, int, int, int]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.Constant, List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.Constant, List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, int, int, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.Constant, List[sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.View, Tuple[torch.utils._sympy.functions.FloorDiv, int, int, int, int]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.Constant, List[sympy.core.mul.Mul]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.IndexingConstant, List[sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, int]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, int, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[int, int, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.IndexingConstant, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.Constant, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.Constant, List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.Constant, List) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.ReinterpretView, Tuple[int, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, int, int]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.View, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.ReinterpretView, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[int, int, int]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> torch._inductor.ir.ExpandView",
      "(torch._inductor.ir.StorageBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.ExpandView"
    ],
    "samples": 1922
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2142,
    "func_name": "ExpandView.get_size",
    "type_comments": [
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[sympy.core.mul.Mul]",
      "() -> List",
      "() -> List[Union[int, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, torch.utils._sympy.functions.FloorDiv]]",
      "() -> List[sympy.core.numbers.One]",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[sympy.core.numbers.Integer]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]"
    ],
    "samples": 3392
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2145,
    "func_name": "ExpandView.make_reindexer",
    "type_comments": [
      "() -> function"
    ],
    "samples": 1616
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2150,
    "func_name": "reindex",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol]) -> List",
      "(List[sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.symbol.Symbol]) -> List",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> List",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> List",
      "(Tuple[sympy.core.add.Add]) -> List",
      "(List) -> List",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> List",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> List",
      "(List[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(Tuple[sympy.core.add.Add, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]",
      "(List[sympy.core.numbers.Zero]) -> List",
      "(Tuple[]) -> List",
      "(Tuple[sympy.core.add.Add, sympy.core.add.Add]) -> List[sympy.core.add.Add]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List",
      "(List[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> List[sympy.core.numbers.Zero]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.add.Add, sympy.core.symbol.Symbol]) -> List",
      "(Tuple[sympy.core.numbers.Zero]) -> List",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.numbers.Zero]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> List",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> List",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> List",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> List",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List"
    ],
    "samples": 14888
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2166,
    "func_name": "create",
    "type_comments": [
      "(torch._inductor.ir.StorageBox, Tuple[int, int, int, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[int, int, int, int, int]) -> torch._inductor.ir.PermuteView",
      "(torch._inductor.ir.ReinterpretView, Tuple[int, int, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.PermuteView, Tuple[int, int, int, int]) -> torch._inductor.ir.PermuteView",
      "(torch._inductor.ir.ReinterpretView, Tuple[int, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.View, Tuple[int, int, int]) -> torch._inductor.ir.PermuteView",
      "(torch._inductor.ir.StorageBox, Tuple[int, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.PermuteView, Tuple[int, int, int, int, int, int]) -> torch._inductor.ir.PermuteView",
      "(torch._inductor.ir.View, Tuple[int, int, int, int, int]) -> torch._inductor.ir.PermuteView",
      "(torch._inductor.ir.StorageBox, Tuple[int, int]) -> torch._inductor.ir.PermuteView",
      "(torch._inductor.ir.ReinterpretView, Tuple[int, int, int, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[int, int, int]) -> torch._inductor.ir.PermuteView",
      "(torch._inductor.ir.View, Tuple[int, int, int, int, int, int]) -> torch._inductor.ir.PermuteView",
      "(torch._inductor.ir.View, Tuple[int, int, int, int]) -> torch._inductor.ir.PermuteView",
      "(torch._inductor.ir.StorageBox, Tuple[int, int, int]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, Tuple[int, int, int, int]) -> torch._inductor.ir.PermuteView",
      "(torch._inductor.ir.PermuteView, Tuple[int, int]) -> torch._inductor.ir.PermuteView"
    ],
    "samples": 428
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2184,
    "func_name": "_map_neg_dims",
    "type_comments": [
      "(List[int]) -> List[int]",
      "(Tuple[int, int, int, int, int]) -> List[int]",
      "(Tuple[int, int, int, int]) -> List[int]",
      "(Tuple[int, int]) -> List[int]",
      "(Tuple[int, int, int]) -> List[int]"
    ],
    "samples": 711
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2188,
    "func_name": "PermuteView.get_size",
    "type_comments": [
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "() -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> pyannotate_runtime.collect_types.UnknownType",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "() -> List[int]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[sympy.core.numbers.Integer]"
    ],
    "samples": 504
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2193,
    "func_name": "PermuteView.make_reindexer",
    "type_comments": [
      "() -> function"
    ],
    "samples": 353
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2198,
    "func_name": "reindex",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> List[torch.utils._sympy.functions.ModularIndexing]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]",
      "(List[Union[sympy.core.numbers.Zero, torch.utils._sympy.functions.ModularIndexing]]) -> List[Union[sympy.core.numbers.Zero, torch.utils._sympy.functions.ModularIndexing]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]"
    ],
    "samples": 612
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2243,
    "func_name": "squeezer",
    "type_comments": [
      "(List[int]) -> Tuple[List[int], function]",
      "(List) -> Tuple[List, function]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function]",
      "(List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[int, sympy.core.symbol.Symbol]], function]",
      "(List[sympy.core.numbers.One]) -> Tuple[List, function]",
      "(List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[int, sympy.core.symbol.Symbol]], function]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[List[sympy.core.symbol.Symbol], function]",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]) -> Tuple[List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], function]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function]",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], function]",
      "(List[sympy.core.numbers.Integer]) -> Tuple[List[sympy.core.numbers.Integer], function]",
      "(List[Union[int, sympy.core.numbers.One]]) -> Tuple[List[int], function]",
      "(List[sympy.core.mul.Mul]) -> Tuple[List[sympy.core.mul.Mul], function]",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.symbol.Symbol], function]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> Tuple[List[sympy.core.mul.Mul], function]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Union[int, sympy.core.numbers.Integer]], function]",
      "(List[torch.utils._sympy.functions.FloorDiv]) -> Tuple[List[torch.utils._sympy.functions.FloorDiv], function]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[sympy.core.numbers.Integer], function]"
    ],
    "samples": 13842
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2249,
    "func_name": "reindex",
    "type_comments": [
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]",
      "(List) -> Tuple[sympy.core.numbers.Zero]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(List) -> Tuple[]"
    ],
    "samples": 13842
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2267,
    "func_name": "GenericView.make_reindexer",
    "type_comments": [
      "() -> function"
    ],
    "samples": 944
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2288,
    "func_name": "GenericView.get_size",
    "type_comments": [
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[sympy.core.mul.Mul]",
      "() -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[sympy.core.numbers.Integer]"
    ],
    "samples": 1575
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2303,
    "func_name": "create",
    "type_comments": [
      "(torch._inductor.ir.StorageBox, List[sympy.core.mul.Mul]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.View, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.View",
      "(torch._inductor.ir.ReinterpretView, List[sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, List[int]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.StorageBox, List[Union[int, sympy.core.numbers.One]]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.SliceView, List[sympy.core.numbers.Integer]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.StorageBox, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.SliceView, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.ReinterpretView, List[sympy.core.numbers.Integer]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.View, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.StorageBox, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.StorageBox",
      "(torch._inductor.ir.PermuteView, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.View",
      "(torch._inductor.ir.SliceView, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.StorageBox, List[sympy.core.numbers.Integer]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.View, List[sympy.core.numbers.Integer]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.StorageBox, List[sympy.core.mul.Mul]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.ReinterpretView, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ReinterpretView, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.StorageBox, List[sympy.core.numbers.Integer]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, List[Union[int, sympy.core.numbers.Integer]]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.PermuteView, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.ReinterpretView, List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ReinterpretView, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.View",
      "(torch._inductor.ir.SliceView, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.View",
      "(torch._inductor.ir.View, List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.View, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> torch._inductor.ir.View",
      "(torch._inductor.ir.StorageBox, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.View"
    ],
    "samples": 854
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2345,
    "func_name": "resolve_negative_size",
    "type_comments": [
      "(List[sympy.core.numbers.One], torch.fx.immutable_collections.immutable_list) -> Tuple[List[sympy.core.numbers.One], List[sympy.core.numbers.One]]",
      "(List[Union[int, sympy.core.symbol.Symbol]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]",
      "(List[int], List[Union[int, sympy.core.numbers.One]]) -> Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(List[int], List[int]) -> Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.mul.Mul]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]]",
      "(List[Union[int, sympy.core.symbol.Symbol]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]]",
      "(List[sympy.core.numbers.Integer], torch.fx.immutable_collections.immutable_list) -> Tuple[List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[sympy.core.mul.Mul]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[sympy.core.mul.Mul]]",
      "(List[sympy.core.numbers.Integer], torch.fx.immutable_collections.immutable_list) -> Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(List[int], torch.fx.immutable_collections.immutable_list) -> Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(List[sympy.core.mul.Mul], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> Tuple[List[sympy.core.mul.Mul], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(List[int], torch.fx.immutable_collections.immutable_list) -> Tuple[List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]]",
      "(List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]) -> Tuple[List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]]",
      "(List[sympy.core.numbers.Integer], List[Union[int, sympy.core.numbers.Integer]]) -> Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(List[Union[int, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], torch.fx.immutable_collections.immutable_list) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]"
    ],
    "samples": 854
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2360,
    "func_name": "dynamic_reshape_indexer",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> function",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[sympy.core.mul.Mul]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]) -> function",
      "(List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> function",
      "(List[sympy.core.numbers.One], List[sympy.core.numbers.One]) -> function",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> function",
      "(List[Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> function",
      "(List[sympy.core.mul.Mul], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.mul.Mul]) -> function",
      "(List[sympy.core.mul.Mul], List[sympy.core.mul.Mul]) -> function",
      "(List[sympy.core.mul.Mul], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> function",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> function",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> function",
      "(List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> function"
    ],
    "samples": 547
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2372,
    "func_name": "_dynamic_reshape_indexer",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> function",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[sympy.core.mul.Mul]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]) -> function",
      "(List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> function",
      "(List[sympy.core.numbers.One], List[sympy.core.numbers.One]) -> function",
      "(List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]) -> pyannotate_runtime.collect_types.NoReturnType",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> function",
      "(List[Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> function",
      "(List[sympy.core.mul.Mul], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.mul.Mul]) -> function",
      "(List[sympy.core.mul.Mul], List[sympy.core.mul.Mul]) -> function",
      "(List[sympy.core.mul.Mul], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> function",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> function",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> function",
      "(List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]) -> function",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> function"
    ],
    "samples": 548
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2432,
    "func_name": "reindex",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.numbers.Zero]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]) -> Tuple[sympy.core.add.Add, sympy.core.numbers.Zero]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity, torch.utils._sympy.functions.ModularIndexing]]) -> Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.add.Add]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.add.Add]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.numbers.Zero]",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.add.Add]",
      "(List[sympy.core.add.Add]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.add.Add, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]) -> Tuple[sympy.core.add.Add]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.add.Add, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.add.Add]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.add.Add]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.add.Add]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]",
      "(List[sympy.core.add.Add]) -> Tuple[sympy.core.add.Add]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol]",
      "(List[sympy.core.add.Add]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.add.Add]) -> Tuple[sympy.core.add.Add, sympy.core.add.Add]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.add.Add, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.add.Add, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.add.Add, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.add.Add]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.add.Add]) -> Tuple[sympy.core.numbers.Zero, sympy.core.add.Add]",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.add.Add, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> Tuple[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.add.Add]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]",
      "(List[sympy.core.add.Add]) -> Tuple[sympy.core.numbers.Zero, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.add.Add, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.add.Add]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]"
    ],
    "samples": 3861
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2446,
    "func_name": "ReinterpretView.__post_init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 1321
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2461,
    "func_name": "ReinterpretView.get_name",
    "type_comments": [
      "() -> str"
    ],
    "samples": 10109
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2464,
    "func_name": "ReinterpretView.get_device",
    "type_comments": [
      "() -> torch.device"
    ],
    "samples": 1171
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2467,
    "func_name": "ReinterpretView.get_origin_node",
    "type_comments": [
      "() -> None"
    ],
    "samples": 3
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2470,
    "func_name": "dtype",
    "type_comments": [
      "() -> torch.dtype"
    ],
    "samples": 1695
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2474,
    "func_name": "ReinterpretView.get_size",
    "type_comments": [
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[sympy.core.mul.Mul]",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "() -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "() -> List[sympy.core.numbers.One]",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[sympy.core.numbers.Integer]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]"
    ],
    "samples": 2902
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2477,
    "func_name": "ReinterpretView.get_stride",
    "type_comments": [
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "() -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "() -> List[sympy.core.numbers.One]",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[sympy.core.numbers.Zero]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]"
    ],
    "samples": 670
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2480,
    "func_name": "ReinterpretView.make_loader",
    "type_comments": [
      "() -> function"
    ],
    "samples": 1224
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2481,
    "func_name": "loader",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol, sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[int, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.add.Add, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[int, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> torch._inductor.virtualized.OpsValue",
      "(List[torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.add.Add, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.add.Add, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 6501
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2490,
    "func_name": "ReinterpretView.get_layout",
    "type_comments": [
      "() -> torch._inductor.ir.FixedLayout"
    ],
    "samples": 1367
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2496,
    "func_name": "ReinterpretView.get_unbacked_symbol_uses",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 340
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2503,
    "func_name": "ReinterpretView.codegen_reference",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> str",
      "(None) -> str"
    ],
    "samples": 540
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2546,
    "func_name": "create",
    "type_comments": [
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.Integer, int, sympy.core.numbers.One, int, bool) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.Zero, sympy.core.numbers.Integer, sympy.core.numbers.Integer, int, bool) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.One, int, int, int, bool) -> torch._inductor.ir.SliceView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.One, int, int, int, bool) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.Integer, int, int, int, bool) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ReinterpretView, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer, int, bool) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.One, int, bool) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ReinterpretView, sympy.core.numbers.One, int, int, int, bool) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer, int, bool) -> torch._inductor.ir.SliceView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.One, int, sympy.core.numbers.Integer, int, bool) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.Zero, int, sympy.core.numbers.Integer, int, bool) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, int, bool) -> torch._inductor.ir.SliceView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.Integer, int, int, int, bool) -> torch._inductor.ir.SliceView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.One, sympy.core.numbers.Zero, sympy.core.numbers.One, int, bool) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.One, sympy.core.numbers.Zero, sympy.core.numbers.One, int, bool) -> torch._inductor.ir.SliceView",
      "(torch._inductor.ir.PermuteView, sympy.core.numbers.Integer, int, int, int, bool) -> torch._inductor.ir.SliceView",
      "(torch._inductor.ir.ReinterpretView, sympy.core.numbers.Integer, sympy.core.numbers.Zero, sympy.core.numbers.One, int, bool) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer, int, bool) -> torch._inductor.ir.SliceView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, int, bool) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.View, sympy.core.numbers.One, int, int, int, bool) -> torch._inductor.ir.SliceView",
      "(torch._inductor.ir.View, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, int, bool) -> torch._inductor.ir.SliceView",
      "(torch._inductor.ir.ReinterpretView, sympy.core.numbers.Integer, int, int, int, bool) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.View, sympy.core.numbers.Integer, int, int, int, bool) -> torch._inductor.ir.SliceView",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.Zero, sympy.core.numbers.One, sympy.core.numbers.Integer, int, bool) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.SliceView, sympy.core.numbers.Integer, int, int, int, bool) -> torch._inductor.ir.SliceView",
      "(torch._inductor.ir.View, sympy.core.numbers.One, sympy.core.numbers.Zero, sympy.core.numbers.One, int, bool) -> torch._inductor.ir.SliceView"
    ],
    "samples": 217
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2595,
    "func_name": "BaseConstant.get_size",
    "type_comments": [
      "() -> Tuple[]"
    ],
    "samples": 2381
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2598,
    "func_name": "BaseConstant.get_device",
    "type_comments": [
      "() -> torch.device"
    ],
    "samples": 606
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2623,
    "func_name": "Constant.make_loader",
    "type_comments": [
      "() -> function"
    ],
    "samples": 1291
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2624,
    "func_name": "loader",
    "type_comments": [
      "(Tuple[]) -> torch._inductor.virtualized.OpsValue",
      "(List) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 12411
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2642,
    "func_name": "IndexingConstant.make_loader",
    "type_comments": [
      "() -> function"
    ],
    "samples": 130
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2643,
    "func_name": "loader",
    "type_comments": [
      "(List) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 748
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2652,
    "func_name": "is_contiguous_strides_for_shape",
    "type_comments": [
      "(List[Union[int, sympy.core.numbers.Integer]], List[sympy.core.numbers.Integer]) -> bool",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> bool",
      "(List[sympy.core.numbers.One], List[sympy.core.numbers.Integer]) -> bool",
      "(List[Union[int, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> bool",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]) -> bool",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> bool",
      "(List[sympy.core.numbers.One], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[sympy.core.numbers.One], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> bool",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[sympy.core.numbers.One], List[sympy.core.numbers.One]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> bool"
    ],
    "samples": 738
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2661,
    "func_name": "get_align_for_dtype",
    "type_comments": [
      "(torch.dtype) -> int"
    ],
    "samples": 7747
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2672,
    "func_name": "Layout.__init__",
    "type_comments": [
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[int], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[sympy.core.numbers.One], sympy.core.numbers.Integer) -> None",
      "(torch.device, torch.dtype, List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[int, sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Integer) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], None, sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Zero], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, sympy.core.numbers.Integer], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], None, sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List, None, sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Integer) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[int], List[int], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[int], List[sympy.core.numbers.Integer], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[int, sympy.core.numbers.Integer]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List, List, sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.symbol.Symbol], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[int, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int) -> None",
      "(torch.device, torch.dtype, List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.One], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[Union[int, sympy.core.numbers.Integer]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Zero], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Integer) -> None",
      "(torch.device, torch.dtype, List[int], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[int, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.mul.Mul], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer], sympy.core.numbers.Zero) -> None"
    ],
    "samples": 12257
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2690,
    "func_name": "stride",
    "type_comments": [
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "() -> List",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "() -> List[Union[int, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[int]",
      "() -> Tuple[sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "() -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "() -> List[Union[int, sympy.core.numbers.Zero]]",
      "() -> List[sympy.core.numbers.One]",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[sympy.core.numbers.Zero]",
      "() -> List[Union[int, sympy.core.numbers.Integer]]",
      "() -> List[sympy.core.numbers.Integer]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]"
    ],
    "samples": 28178
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2705,
    "func_name": "Layout.is_contiguous",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 738
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2708,
    "func_name": "is_channels_last_contiguous",
    "type_comments": [
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[int, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[int], List[sympy.core.numbers.Integer]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[int, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[int, torch.utils._sympy.functions.FloorDiv]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[int], List[sympy.core.numbers.One]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]) -> bool",
      "(List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.One]) -> bool",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.One]) -> bool",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[sympy.core.numbers.Integer], List[Union[int, sympy.core.numbers.Integer]]) -> bool",
      "(List[Union[int, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> bool",
      "(List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.One]) -> bool",
      "(List[int], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> bool",
      "(List[sympy.core.mul.Mul], List[sympy.core.numbers.One]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[sympy.core.numbers.Integer], List[sympy.core.numbers.One]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[int, sympy.core.numbers.Integer]]) -> bool",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.add.Add, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[sympy.core.numbers.One], List[sympy.core.numbers.One]) -> bool"
    ],
    "samples": 7139
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2730,
    "func_name": "Layout.is_stride_ordered",
    "type_comments": [
      "(List[int]) -> bool"
    ],
    "samples": 901
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2743,
    "func_name": "sorted_indices",
    "type_comments": [
      "(List) -> List",
      "(List[int]) -> List[int]"
    ],
    "samples": 901
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2766,
    "func_name": "_pad_strides",
    "type_comments": [
      "(List[sympy.core.numbers.One], List[int], torch.dtype) -> List[sympy.core.numbers.One]",
      "(List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], torch.dtype) -> List[sympy.core.numbers.Integer]",
      "(List[sympy.core.numbers.One], List[sympy.core.numbers.Integer], torch.dtype) -> List[sympy.core.numbers.One]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], torch.dtype) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], torch.dtype) -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], torch.dtype) -> List[Union[int, sympy.core.numbers.Integer]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[int], torch.dtype) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], torch.dtype) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer], torch.dtype) -> List[sympy.core.numbers.Integer]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[int, sympy.core.symbol.Symbol]], torch.dtype) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[int, sympy.core.numbers.Integer]], List[sympy.core.numbers.Integer], torch.dtype) -> List[Union[int, sympy.core.numbers.Integer]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], torch.dtype) -> List[Union[int, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], torch.dtype) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], torch.dtype) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[sympy.core.numbers.One], List[sympy.core.mul.Mul], torch.dtype) -> List[sympy.core.numbers.One]",
      "(List[sympy.core.numbers.One], List[sympy.core.numbers.One], torch.dtype) -> List[sympy.core.numbers.One]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], torch.dtype) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], torch.dtype) -> List[Union[int, sympy.core.numbers.Integer]]",
      "(List[sympy.core.numbers.One], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], torch.dtype) -> List[sympy.core.numbers.One]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], torch.dtype) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "(List[Union[int, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], torch.dtype) -> List[Union[int, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[sympy.core.numbers.One], List[sympy.core.symbol.Symbol], torch.dtype) -> List[sympy.core.numbers.One]",
      "(List, List, torch.dtype) -> List",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], torch.dtype) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], torch.dtype) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[int, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], torch.dtype) -> List[Union[int, sympy.core.numbers.Integer]]",
      "(List[sympy.core.numbers.One], List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], torch.dtype) -> List[sympy.core.numbers.One]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], torch.dtype) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]"
    ],
    "samples": 7747
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2842,
    "func_name": "Layout.pad_strides",
    "type_comments": [
      "() -> None"
    ],
    "samples": 7077
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2847,
    "func_name": "Layout.should_pad_strides",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 8118
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2850,
    "func_name": "Layout.as_fixed",
    "type_comments": [
      "() -> torch._inductor.ir.FixedLayout"
    ],
    "samples": 9086
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2864,
    "func_name": "Layout.make_indexer",
    "type_comments": [
      "() -> function"
    ],
    "samples": 3490
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2879,
    "func_name": "Layout.storage_size",
    "type_comments": [
      "() -> sympy.core.numbers.Integer",
      "() -> sympy.core.numbers.One",
      "() -> sympy.core.add.Add",
      "() -> sympy.core.symbol.Symbol",
      "() -> sympy.core.mul.Mul"
    ],
    "samples": 3778
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2886,
    "func_name": "FixedLayout.__init__",
    "type_comments": [
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[int], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[sympy.core.numbers.One], sympy.core.numbers.Integer) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Zero], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], None, sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Zero], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Integer) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Integer) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[int, sympy.core.numbers.Integer]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], None, sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List, List, sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], None, sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.symbol.Symbol], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Integer) -> None",
      "(torch.device, torch.dtype, List[Union[int, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], int) -> None",
      "(torch.device, torch.dtype, List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.One], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[Union[int, sympy.core.numbers.Integer]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[Union[int, sympy.core.numbers.Integer]], sympy.core.numbers.Integer) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Integer) -> None",
      "(torch.device, torch.dtype, List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[int], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[int, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[sympy.core.mul.Mul], List[sympy.core.numbers.One], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[int], None, sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer], sympy.core.numbers.Zero) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[int, sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Zero) -> None"
    ],
    "samples": 9362
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2904,
    "func_name": "FixedLayout.make_indexer",
    "type_comments": [
      "() -> function"
    ],
    "samples": 21386
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2907,
    "func_name": "indexer",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(List[Union[int, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.symbol.Symbol",
      "(List) -> sympy.core.numbers.Zero",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity, torch.utils._sympy.functions.ModularIndexing]]) -> sympy.core.add.Add",
      "(List[torch.utils._sympy.functions.Identity]) -> torch.utils._sympy.functions.Identity",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(List[sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> sympy.core.symbol.Symbol",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> sympy.core.symbol.Symbol",
      "(List[sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]) -> sympy.core.add.Add",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> sympy.core.add.Add",
      "(List[sympy.core.numbers.Zero]) -> sympy.core.numbers.Zero",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(Tuple[]) -> sympy.core.numbers.Zero",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> sympy.core.symbol.Symbol",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> sympy.core.numbers.Zero",
      "(Tuple[sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.add.Add, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch.utils._sympy.functions.Identity",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> sympy.core.add.Add",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.add.Add, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> sympy.core.add.Add",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.add.Add]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.symbol.Symbol",
      "(Tuple[sympy.core.numbers.Zero]) -> sympy.core.numbers.Zero",
      "(List[Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(List[Union[sympy.core.add.Add, sympy.core.mul.Mul, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(List[torch.utils._sympy.functions.ModularIndexing]) -> torch.utils._sympy.functions.ModularIndexing",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]) -> sympy.core.numbers.Integer",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(List[sympy.core.add.Add]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.add.Add, sympy.core.add.Add]) -> sympy.core.add.Add",
      "(List[Union[sympy.core.add.Add, sympy.core.mul.Mul, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add"
    ],
    "samples": 21403
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2925,
    "func_name": "contiguous_strides",
    "type_comments": [
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> List[sympy.core.numbers.One]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> List[sympy.core.numbers.Integer]",
      "(List[sympy.core.numbers.Integer]) -> List[sympy.core.numbers.One]",
      "(Tuple[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.One]",
      "(List[sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List) -> List",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> List[sympy.core.numbers.Integer]",
      "(List[int]) -> List[sympy.core.numbers.One]",
      "(List[Union[int, sympy.core.numbers.Integer]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One, torch.utils._sympy.functions.FloorDiv]]",
      "(List[Union[int, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[sympy.core.numbers.One]) -> List[sympy.core.numbers.One]",
      "(List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(Tuple[]) -> List",
      "(List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[int, sympy.core.numbers.One]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> List[sympy.core.numbers.One]",
      "(Tuple[sympy.core.mul.Mul]) -> List[sympy.core.numbers.One]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> List[sympy.core.numbers.One]",
      "(List[sympy.core.mul.Mul]) -> List[sympy.core.numbers.One]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.mul.Mul]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "(Tuple[sympy.core.numbers.Integer]) -> List[sympy.core.numbers.One]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]"
    ],
    "samples": 11241
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2934,
    "func_name": "fill_ordered",
    "type_comments": [
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[int]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "(List[Union[int, sympy.core.numbers.One]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[sympy.core.numbers.Integer], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[int]) -> List[sympy.core.numbers.Integer]",
      "(List[int], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[int]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[int]) -> List[sympy.core.numbers.One]",
      "(List[sympy.core.symbol.Symbol], List[int]) -> List[sympy.core.numbers.One]",
      "(List[Union[int, sympy.core.symbol.Symbol]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[sympy.core.numbers.One], List[int]) -> List[sympy.core.numbers.One]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[sympy.core.mul.Mul], List[int]) -> List[sympy.core.numbers.One]",
      "(List[sympy.core.numbers.Integer], List[int]) -> List[sympy.core.numbers.Integer]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[int, torch.utils._sympy.functions.FloorDiv]], List[int]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[int, sympy.core.numbers.Integer]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int]) -> List[sympy.core.numbers.Integer]",
      "(List[int], List[int]) -> List[sympy.core.numbers.One]",
      "(List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[int, sympy.core.symbol.Symbol]], List[int]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int]) -> List[sympy.core.numbers.One]",
      "(List[sympy.core.numbers.Integer], List[int]) -> List[sympy.core.numbers.One]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]"
    ],
    "samples": 1250
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2951,
    "func_name": "stride_ordered",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int]) -> List[sympy.core.numbers.Integer]",
      "(List[int], List[int]) -> List[sympy.core.numbers.One]",
      "(List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[int], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[int]) -> List[sympy.core.numbers.One]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int]) -> List[sympy.core.numbers.One]",
      "(List[sympy.core.mul.Mul], List[int]) -> List[sympy.core.numbers.One]",
      "(List[sympy.core.symbol.Symbol], List[int]) -> List[sympy.core.numbers.One]",
      "(List[sympy.core.numbers.Integer], List[int]) -> List[sympy.core.numbers.One]",
      "(List[sympy.core.numbers.Integer], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[int, sympy.core.symbol.Symbol]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]"
    ],
    "samples": 533
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3001,
    "func_name": "FlexibleLayout.as_stride_order",
    "type_comments": [
      "(List[int], bool) -> torch._inductor.ir.FixedLayout"
    ],
    "samples": 533
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3014,
    "func_name": "FlexibleLayout.as_fill_order",
    "type_comments": [
      "(List[int]) -> torch._inductor.ir.FixedLayout"
    ],
    "samples": 937
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3038,
    "func_name": "FlexibleLayout.__init__",
    "type_comments": [
      "(torch.device, torch.dtype, List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]], None) -> None",
      "(torch.device, torch.dtype, List[Union[int, sympy.core.numbers.One]], None) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], None) -> None",
      "(torch.device, torch.dtype, List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], None) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], None) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], None) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], None) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.Integer], None) -> None",
      "(torch.device, torch.dtype, List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], None) -> None",
      "(torch.device, torch.dtype, List[Union[int, sympy.core.symbol.Symbol]], None) -> None",
      "(torch.device, torch.dtype, List[sympy.core.numbers.One], None) -> None",
      "(torch.device, torch.dtype, List, None) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], None) -> None",
      "(torch.device, torch.dtype, List[sympy.core.mul.Mul], None) -> None",
      "(torch.device, torch.dtype, List[int], None) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], None) -> None",
      "(torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], None) -> None"
    ],
    "samples": 4173
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3049,
    "func_name": "NonOwningLayout.__init__",
    "type_comments": [
      "(torch._inductor.ir.ReinterpretView) -> None"
    ],
    "samples": 70
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3062,
    "func_name": "NonOwningLayout.maybe_guard_aligned",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 65
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3182,
    "func_name": "Buffer.__post_init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 5041
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3186,
    "func_name": "Buffer.make_indexer",
    "type_comments": [
      "() -> function"
    ],
    "samples": 1146
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3189,
    "func_name": "Buffer.get_name",
    "type_comments": [
      "() -> str"
    ],
    "samples": 28214
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3193,
    "func_name": "Buffer.get_device",
    "type_comments": [
      "() -> torch.device"
    ],
    "samples": 18158
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3196,
    "func_name": "Buffer.get_origin_node",
    "type_comments": [
      "() -> None",
      "() -> torch.fx.node.Node"
    ],
    "samples": 468
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3199,
    "func_name": "dtype",
    "type_comments": [
      "() -> None",
      "() -> torch.dtype"
    ],
    "samples": 19488
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3203,
    "func_name": "Buffer.get_size",
    "type_comments": [
      "() -> List[sympy.core.mul.Mul]",
      "() -> List",
      "() -> List[int]",
      "() -> List[sympy.core.numbers.Integer]",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "() -> List[Union[int, sympy.core.symbol.Symbol]]",
      "() -> List[Union[int, sympy.core.numbers.One]]",
      "() -> List[Union[int, torch.utils._sympy.functions.FloorDiv]]",
      "() -> List[sympy.core.numbers.One]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[sympy.core.numbers.Zero]",
      "() -> List[sympy.core.symbol.Symbol]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]"
    ],
    "samples": 18934
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3206,
    "func_name": "Buffer.get_stride",
    "type_comments": [
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "() -> List",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[int]",
      "() -> List[sympy.core.numbers.One]",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[Union[int, sympy.core.numbers.Integer]]",
      "() -> List[sympy.core.numbers.Integer]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]"
    ],
    "samples": 5745
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3209,
    "func_name": "Buffer.get_offset",
    "type_comments": [
      "() -> sympy.core.numbers.Zero"
    ],
    "samples": 1910
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3212,
    "func_name": "Buffer.get_layout",
    "type_comments": [
      "() -> torch._inductor.ir.MutationLayoutSHOULDREMOVE",
      "() -> torch._inductor.ir.NoneLayout",
      "() -> torch._inductor.ir.NonOwningLayout",
      "() -> torch._inductor.ir.FlexibleLayout",
      "() -> torch._inductor.ir.MultiOutputLayout",
      "() -> torch._inductor.ir.FixedLayout"
    ],
    "samples": 10166
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3221,
    "func_name": "Buffer.freeze_layout",
    "type_comments": [
      "() -> None"
    ],
    "samples": 669
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3225,
    "func_name": "Buffer.freeze_layout_with_stride_order",
    "type_comments": [
      "(List[int], bool) -> None"
    ],
    "samples": 533
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3229,
    "func_name": "Buffer.freeze_layout_with_fill_order",
    "type_comments": [
      "(List[int]) -> None"
    ],
    "samples": 937
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3237,
    "func_name": "Buffer.is_zero_elements",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 3944
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3240,
    "func_name": "Buffer.make_loader",
    "type_comments": [
      "() -> function"
    ],
    "samples": 2724
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3245,
    "func_name": "loader",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, torch.utils._sympy.functions.ModularIndexing]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.add.Add, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[int, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.mul.Mul, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(List[torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.add.Add, sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(List) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.One]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.mul.Mul, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 16133
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3251,
    "func_name": "Buffer.is_no_op",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 499
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3254,
    "func_name": "Buffer.codegen_reference",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> str",
      "(None) -> str"
    ],
    "samples": 936
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3257,
    "func_name": "Buffer.decide_layout",
    "type_comments": [
      "() -> None"
    ],
    "samples": 551
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3260,
    "func_name": "Buffer.get_inputs_that_alias_output",
    "type_comments": [
      "() -> Tuple[]",
      "() -> List[str]"
    ],
    "samples": 10313
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3265,
    "func_name": "Buffer.get_mutation_names",
    "type_comments": [
      "() -> Tuple[]",
      "() -> List[str]"
    ],
    "samples": 8318
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3270,
    "func_name": "Buffer.get_read_writes",
    "type_comments": [
      "() -> torch._inductor.dependencies.ReadWrites"
    ],
    "samples": 1218
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3277,
    "func_name": "Buffer.get_reads",
    "type_comments": [
      "() -> Set",
      "() -> Set[torch._inductor.dependencies.StarDep]",
      "() -> Set[torch._inductor.dependencies.MemoryDep]"
    ],
    "samples": 1821
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3280,
    "func_name": "Buffer.get_unbacked_symbol_defs",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 2950
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3283,
    "func_name": "Buffer.get_unbacked_symbol_uses",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3303,
    "func_name": "Buffer.get_workspace_size",
    "type_comments": [
      "() -> int"
    ],
    "samples": 1453
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3377,
    "func_name": "num_reads",
    "type_comments": [
      "() -> int"
    ],
    "samples": 589
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3381,
    "func_name": "ComputedBuffer.get_read_writes",
    "type_comments": [
      "() -> torch._inductor.dependencies.ReadWrites"
    ],
    "samples": 5254
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3395,
    "func_name": "ComputedBuffer.get_unbacked_symbol_uses",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 1910
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3420,
    "func_name": "ComputedBuffer.make_loader",
    "type_comments": [
      "() -> function"
    ],
    "samples": 883
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3431,
    "func_name": "ComputedBuffer.get_store_function",
    "type_comments": [
      "() -> functools.partial"
    ],
    "samples": 6468
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3439,
    "func_name": "ComputedBuffer.get_fill_order",
    "type_comments": [
      "() -> List",
      "() -> None",
      "() -> List[int]"
    ],
    "samples": 975
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3486,
    "func_name": "ComputedBuffer.decide_layout",
    "type_comments": [
      "() -> None"
    ],
    "samples": 1940
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3494,
    "func_name": "get_default_sizes_body",
    "type_comments": [
      "() -> Tuple[Tuple[List, List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody, Tuple[List, List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[sympy.core.numbers.Integer], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> Tuple[Tuple[List, List[sympy.core.symbol.Symbol]], torch._inductor.ir.LoopBody, Tuple[List, List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List, List[sympy.core.mul.Mul]], torch._inductor.ir.LoopBody, Tuple[List, List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[int], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> Tuple[Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> Tuple[Tuple[List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> Tuple[Tuple[List, List], torch._inductor.ir.LoopBody, Tuple[List, List]]",
      "() -> Tuple[Tuple[List[int], List[int]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> Tuple[Tuple[List[Union[int, sympy.core.symbol.Symbol]], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[torch.utils._sympy.functions.FloorDiv]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[sympy.core.mul.Mul]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[Union[int, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> Tuple[Tuple[List[Union[int, sympy.core.symbol.Symbol]], List[int]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[int], List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> Tuple[Tuple[List[sympy.core.mul.Mul], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> Tuple[Tuple[List[sympy.core.symbol.Symbol], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[int]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[Union[int, torch.utils._sympy.functions.FloorDiv]], List[int]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[Union[int, sympy.core.numbers.Integer]], List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[sympy.core.add.Add]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[Union[int, torch.utils._sympy.functions.FloorDiv]], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]"
    ],
    "samples": 1723
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3520,
    "func_name": "ComputedBuffer.simplify_and_reorder",
    "type_comments": [
      "(None) -> Tuple[Tuple[List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], List], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List, List[sympy.core.symbol.Symbol]], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List[sympy.core.numbers.Integer], List], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List, List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[sympy.core.add.Add]], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[torch.utils._sympy.functions.FloorDiv]], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List[sympy.core.symbol.Symbol], List], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List, List], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol]], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List, List[sympy.core.mul.Mul]], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[sympy.core.mul.Mul]], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List[sympy.core.mul.Mul], List], torch._inductor.ir.LoopBody]",
      "(None) -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]], torch._inductor.ir.LoopBody]"
    ],
    "samples": 1723
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3571,
    "func_name": "simplify_and_reorder",
    "type_comments": [
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> Tuple[List[sympy.core.symbol.Symbol], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]) -> Tuple[List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.numbers.Integer]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[int]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[int, torch.utils._sympy.functions.FloorDiv]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.mul.Mul]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List, List, List) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List, List[sympy.core.symbol.Symbol], List) -> Tuple[List, function, function]"
    ],
    "samples": 2948
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3604,
    "func_name": "_apply_loop_reordering",
    "type_comments": [
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol], None) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.mul.Mul], List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]], None) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List, List[sympy.core.symbol.Symbol], List, List[sympy.core.symbol.Symbol], None) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], None) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], None) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[int], List[sympy.core.add.Add], None) -> Tuple[List[int], function, function]",
      "(List, List[sympy.core.symbol.Symbol], List, List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.Zero]], None) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[sympy.core.add.Add], None) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.symbol.Symbol]], List[sympy.core.add.Add], None) -> Tuple[List[Union[int, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], None) -> Tuple[List[sympy.core.symbol.Symbol], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], None) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List, List[sympy.core.symbol.Symbol], List, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], None) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], None) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List, List, List, List[sympy.core.numbers.Zero], None) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[sympy.core.add.Add], None) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], None) -> Tuple[List[Union[int, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.mul.Mul], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], None) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.add.Add], None) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.numbers.Integer]], List[sympy.core.add.Add], None) -> Tuple[List[Union[int, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], None) -> Tuple[List[sympy.core.symbol.Symbol], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.mul.Mul], List[sympy.core.symbol.Symbol], None) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.add.Add], None) -> Tuple[List[sympy.core.symbol.Symbol], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[int], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], None) -> Tuple[List[int], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[int], List[sympy.core.symbol.Symbol], None) -> Tuple[List[int], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]], None) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.Zero]], None) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List, List[sympy.core.symbol.Symbol], List, List[sympy.core.add.Add], None) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[int, torch.utils._sympy.functions.FloorDiv]], List[sympy.core.add.Add], None) -> Tuple[List[Union[int, torch.utils._sympy.functions.FloorDiv]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.add.Add], None) -> Tuple[List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List, List[sympy.core.symbol.Symbol], List, List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], None) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.mul.Mul], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], None) -> Tuple[List[sympy.core.mul.Mul], function, function]"
    ],
    "samples": 2948
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3643,
    "func_name": "ComputedBuffer.get_reduction_type",
    "type_comments": [
      "() -> str",
      "() -> None"
    ],
    "samples": 11669
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3646,
    "func_name": "ComputedBuffer.is_no_op",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 1723
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3649,
    "func_name": "ComputedBuffer.should_allocate",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 2447
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3761,
    "func_name": "ChoiceCaller.__init__",
    "type_comments": [
      "(str, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FlexibleLayout) -> None",
      "(str, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox], torch._inductor.ir.FixedLayout) -> None",
      "(str, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FlexibleLayout) -> None",
      "(str, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], torch._inductor.ir.FixedLayout) -> None",
      "(str, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FlexibleLayout) -> None",
      "(str, List[torch._inductor.ir.TensorBox], torch._inductor.ir.FixedLayout) -> None",
      "(str, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox], torch._inductor.ir.FlexibleLayout) -> None",
      "(str, Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FixedLayout) -> None",
      "(str, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], torch._inductor.ir.FlexibleLayout) -> None",
      "(str, Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox], torch._inductor.ir.FlexibleLayout) -> None",
      "(str, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], torch._inductor.ir.FlexibleLayout) -> None",
      "(str, Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox], torch._inductor.ir.FixedLayout) -> None",
      "(str, Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FlexibleLayout) -> None",
      "(str, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FixedLayout) -> None"
    ],
    "samples": 438
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3871,
    "func_name": "InputsKernel.get_read_writes_input",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> torch._inductor.dependencies.StarDep",
      "(torch._inductor.ir.ConcatKernel) -> torch._inductor.dependencies.StarDep",
      "(torch._inductor.ir.ReinterpretView) -> torch._inductor.dependencies.StarDep",
      "(torch._inductor.ir.ConstantBuffer) -> torch._inductor.dependencies.StarDep",
      "(torch._inductor.ir.InputBuffer) -> torch._inductor.dependencies.StarDep",
      "(torch._inductor.ir.FallbackKernel) -> torch._inductor.dependencies.StarDep",
      "(torch._inductor.ir.ComputedBuffer) -> torch._inductor.dependencies.StarDep",
      "(torch._inductor.ir.ScatterFallback) -> torch._inductor.dependencies.StarDep"
    ],
    "samples": 1050
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3874,
    "func_name": "InputsKernel.get_read_writes",
    "type_comments": [
      "() -> torch._inductor.dependencies.ReadWrites"
    ],
    "samples": 696
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3891,
    "func_name": "unwrap_storage_for_input",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> torch._inductor.ir.ComputedBuffer",
      "(torch._inductor.ir.ReinterpretView) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.StorageBox) -> torch._inductor.ir.InputBuffer",
      "(torch._inductor.ir.StorageBox) -> torch._inductor.ir.ConstantBuffer",
      "(torch._inductor.ir.StorageBox) -> torch._inductor.ir.ComputedBuffer",
      "(torch._inductor.ir.TensorBox) -> torch._inductor.ir.ConstantBuffer",
      "(torch._inductor.ir.TensorBox) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ComputedBuffer) -> torch._inductor.ir.ComputedBuffer",
      "(torch._inductor.ir.TensorBox) -> torch._inductor.ir.InputBuffer"
    ],
    "samples": 678
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3910,
    "func_name": "unwrap_storage",
    "type_comments": [
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ReinterpretView]]",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox]) -> List[torch._inductor.ir.InputBuffer]",
      "(Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ReinterpretView]]",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox]) -> List[torch._inductor.ir.ComputedBuffer]",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.InputBuffer]]",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox]) -> List[torch._inductor.ir.InputBuffer]",
      "(List) -> List",
      "(List[torch._inductor.ir.TensorBox]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ConstantBuffer]]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ReinterpretView]]",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox]) -> List[torch._inductor.ir.ComputedBuffer]",
      "(List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ExternKernelOut, torch._inductor.ir.ReinterpretView]]",
      "(Tuple[torch._inductor.ir.StorageBox]) -> List[torch._inductor.ir.ComputedBuffer]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ConstantBuffer]]",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox]) -> List[Union[torch._inductor.ir.ConstantBuffer, torch._inductor.ir.InputBuffer]]",
      "(List[torch._inductor.ir.ComputedBuffer]) -> List[torch._inductor.ir.ComputedBuffer]",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ConstantBuffer]]",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.InputBuffer]]",
      "(Tuple[torch._inductor.ir.StorageBox]) -> List[torch._inductor.ir.InputBuffer]",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ConcatKernel]]",
      "(Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView]) -> List[torch._inductor.ir.ReinterpretView]",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView]) -> List[Union[torch._inductor.ir.InputBuffer, torch._inductor.ir.ReinterpretView]]",
      "(List[torch._inductor.ir.TensorBox]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ReinterpretView]]",
      "(Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox]) -> List[Union[torch._inductor.ir.InputBuffer, torch._inductor.ir.ReinterpretView]]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ReinterpretView]]",
      "(List[torch._inductor.ir.TensorBox]) -> List[torch._inductor.ir.ComputedBuffer]",
      "(List[torch._inductor.ir.TensorBox]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.InputBuffer]]",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.TensorBox]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.InputBuffer]]",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ReinterpretView]]",
      "(List[torch._inductor.ir.TensorBox]) -> List[torch._inductor.ir.InputBuffer]",
      "(Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView]) -> List[torch._inductor.ir.ReinterpretView]",
      "(Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]) -> List[Union[torch._inductor.ir.InputBuffer, torch._inductor.ir.ReinterpretView]]",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.InputBuffer]]",
      "(List[torch._inductor.ir.ReinterpretView]) -> List[torch._inductor.ir.ReinterpretView]",
      "(List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]]) -> List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.InputBuffer, torch._inductor.ir.ReinterpretView]]",
      "(Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]) -> List[Union[torch._inductor.ir.ConstantBuffer, torch._inductor.ir.ReinterpretView]]",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView]) -> List[Union[torch._inductor.ir.InputBuffer, torch._inductor.ir.ReinterpretView]]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]) -> List[Union[torch._inductor.ir.ConstantBuffer, torch._inductor.ir.ReinterpretView]]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox]) -> List[torch._inductor.ir.ComputedBuffer]"
    ],
    "samples": 467
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3926,
    "func_name": "NopKernel.is_no_op",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 33
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3936,
    "func_name": "create",
    "type_comments": [
      "(List[torch._inductor.ir.TensorBox], sympy.core.numbers.Integer) -> torch._inductor.ir.StorageBox",
      "(List[torch._inductor.ir.TensorBox], sympy.core.numbers.Zero) -> torch._inductor.ir.StorageBox",
      "(List[torch._inductor.ir.TensorBox], sympy.core.numbers.One) -> torch._inductor.ir.StorageBox"
    ],
    "samples": 33
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4028,
    "func_name": "can_realize_into_without_copy",
    "type_comments": [
      "(torch._inductor.ir.StorageBox) -> bool"
    ],
    "samples": 155
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4038,
    "func_name": "realize_into",
    "type_comments": [
      "(torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView) -> torch._inductor.ir.ComputedBuffer",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.ReinterpretView) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.SliceView, torch._inductor.ir.ReinterpretView) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.View, torch._inductor.ir.ReinterpretView) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 123
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4070,
    "func_name": "ConcatKernel.should_allocate",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 33
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4074,
    "func_name": "get_aten_cpp_kernel_name",
    "type_comments": [
      "(None) -> None",
      "(torch._ops.OpOverload) -> None",
      "(torch._ops.OpOverload) -> str"
    ],
    "samples": 185
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4110,
    "func_name": "ExternKernel.__init__",
    "type_comments": [
      "(None, torch._inductor.ir.MultiOutputLayout, List[torch._inductor.ir.ComputedBuffer], Tuple[float, bool, float], Dict, None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FixedLayout, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ConstantBuffer]], Tuple[], Dict[str, Union[Tuple[int, int], bool]], None, str, str, List[str], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FlexibleLayout, List[torch._inductor.ir.ReinterpretView], Tuple[], Dict, None, None, None, Tuple[], None) -> None",
      "(None, torch._inductor.ir.NoneLayout, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.InputBuffer, torch._inductor.ir.ReinterpretView]], Tuple[int], Dict[str, Union[bool, str]], None, str, None, List[str], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.NoneLayout, List[torch._inductor.ir.InputBuffer], Tuple[], None, None, None, None, Tuple[], None) -> None",
      "(None, torch._inductor.ir.FixedLayout, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.InputBuffer]], Tuple[], Dict[str, Union[Tuple[int, int], bool]], None, str, str, List[str], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FlexibleLayout, List[torch._inductor.ir.ComputedBuffer], Tuple[], Dict[str, int], None, str, str, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.MultiOutputLayout, List[Union[torch._inductor.ir.ConstantBuffer, torch._inductor.ir.InputBuffer]], Tuple[bool, int, bool, None, bool], Dict, None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.NoneLayout, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ExternKernelOut, torch._inductor.ir.ReinterpretView]], Tuple[int], Dict[str, Union[bool, str]], None, str, None, List[str], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FlexibleLayout, List[torch._inductor.ir.InputBuffer], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(None, torch._inductor.ir.FlexibleLayout, List[Union[torch._inductor.ir.ConstantBuffer, torch._inductor.ir.ReinterpretView]], Tuple[], Dict[str, int], None, str, str, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.MultiOutputLayout, List[torch._inductor.ir.InputBuffer], Tuple[bool, int, bool, None, bool], Dict, None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FlexibleLayout, List[Union[torch._inductor.ir.ConstantBuffer, torch._inductor.ir.ReinterpretView]], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(None, torch._inductor.ir.MultiOutputLayout, List[torch._inductor.ir.ReinterpretView], Tuple[float, bool, float], Dict, None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.MultiOutputLayout, List[Union[torch._inductor.ir.InputBuffer, torch._inductor.ir.ReinterpretView]], Tuple[bool, int, bool], Dict, None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.MultiOutputLayout, List[torch._inductor.ir.ComputedBuffer], Tuple[float, float], Dict, None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FlexibleLayout, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ReinterpretView]], Tuple[], Dict[str, int], None, str, str, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FixedLayout, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ReinterpretView]], Tuple[], Dict[str, Union[Tuple[int, int], bool]], None, str, str, List[str], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FlexibleLayout, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ConstantBuffer]], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(None, torch._inductor.ir.FlexibleLayout, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.InputBuffer]], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(None, torch._inductor.ir.MultiOutputLayout, List[torch._inductor.ir.ComputedBuffer], Tuple[float], Dict, None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FlexibleLayout, List[Union[torch._inductor.ir.InputBuffer, torch._inductor.ir.ReinterpretView]], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(None, torch._inductor.ir.FixedLayout, List[torch._inductor.ir.ReinterpretView], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(None, torch._inductor.ir.MultiOutputLayout, List[Union[torch._inductor.ir.InputBuffer, torch._inductor.ir.ReinterpretView]], Tuple[int, int, int, int, int, int, int, bool, int, int], Dict, None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FixedLayout, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ConstantBuffer]], Tuple[], Dict[str, Union[Tuple[int], bool]], None, str, str, List[str], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.MultiOutputLayout, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.InputBuffer]], Tuple[int, int, int, int, int, int, int, bool, int, int], Dict, None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.MultiOutputLayout, List[torch._inductor.ir.ReinterpretView], Tuple[float], Dict, None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FlexibleLayout, List[torch._inductor.ir.ReinterpretView], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(None, torch._inductor.ir.FlexibleLayout, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ConstantBuffer]], Tuple[], Dict[str, int], None, str, str, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FixedLayout, List, List[Union[List[int], int]], Dict, None, str, str, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FlexibleLayout, List[Union[torch._inductor.ir.ScatterFallback, torch._inductor.ir.TensorBox]], Tuple[], None, None, None, None, Tuple[], None) -> None",
      "(None, torch._inductor.ir.MultiOutputLayout, List[torch._inductor.ir.ComputedBuffer], Tuple[bool, int, bool], Dict, None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FixedLayout, List[torch._inductor.ir.FallbackKernel], Tuple[], None, None, None, None, Tuple[], None) -> None",
      "(None, torch._inductor.ir.FlexibleLayout, List[torch._inductor.ir.ComputedBuffer], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(None, torch._inductor.ir.FixedLayout, List[Union[torch._inductor.ir.InputBuffer, torch._inductor.ir.ReinterpretView]], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(None, torch._inductor.ir.FixedLayout, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ReinterpretView]], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(None, torch._inductor.ir.MultiOutputLayout, List[torch._inductor.ir.InputBuffer], Tuple[torch.SymInt], Dict, None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.FixedLayout, List[torch._inductor.ir.ComputedBuffer], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(None, torch._inductor.ir.FixedLayout, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.InputBuffer]], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(None, torch._inductor.ir.FlexibleLayout, List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ReinterpretView]], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(None, torch._inductor.ir.FixedLayout, List[torch._inductor.ir.ComputedBuffer], Tuple[], Dict[str, Union[Tuple[int, int], bool]], None, str, str, List[str], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.MultiOutputLayout, List[torch._inductor.ir.ComputedBuffer], Tuple[], Dict, None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(None, torch._inductor.ir.MultiOutputLayout, List[torch._inductor.ir.ReinterpretView], Tuple[float, float], Dict, None, None, None, Tuple[], torch._ops.OpOverload) -> None"
    ],
    "samples": 500
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4140,
    "func_name": "ExternKernel.get_unbacked_symbol_defs",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 676
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4143,
    "func_name": "ExternKernel.collect_arg_kwarg_properties",
    "type_comments": [
      "() -> None"
    ],
    "samples": 500
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4211,
    "func_name": "ExternKernel.decide_layout",
    "type_comments": [
      "() -> None"
    ],
    "samples": 724
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4216,
    "func_name": "ExternKernel.codegen_comment",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.WrapperCodeGen) -> None"
    ],
    "samples": 459
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4224,
    "func_name": "ExternKernel.get_kernel_name",
    "type_comments": [
      "() -> str"
    ],
    "samples": 459
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4235,
    "func_name": "copy_input",
    "type_comments": [
      "(torch._inductor.ir.ReinterpretView) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.View) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 463
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4248,
    "func_name": "process_kernel",
    "type_comments": [
      "(torch._ops.OpOverload, *torch._inductor.ir.ReinterpretView) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None, None, int, int, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], List[torch._inductor.ir.ReinterpretView], List[float], function, None]",
      "(torch._ops.OpOverload, *Union[sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox]) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, List[torch._inductor.ir.StorageBox], List[torch.SymInt], function, None]",
      "(torch._ops.OpOverloadPacket, *torch._subclasses.fake_tensor.FakeTensor) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, List, List[torch._subclasses.fake_tensor.FakeTensor], function, None]",
      "(torch._ops.OpOverload, *Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None], List[torch._inductor.ir.StorageBox], List[int], function, None]",
      "(torch._ops.OpOverload, *Union[bool, torch._inductor.ir.TensorBox]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], List[torch._inductor.ir.StorageBox], List[Optional[Union[bool, int]]], function, None]",
      "(torch._ops.OpOverload, *Union[float, torch._inductor.ir.TensorBox]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None, None, int, int, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], List[torch._inductor.ir.ReinterpretView], List[Union[bool, float]], function, None]",
      "(torch._ops.OpOverload, *Union[bool, torch._inductor.ir.TensorBox]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]], List[Union[bool, int]], function, None]",
      "(torch._ops.OpOverload, *Union[float, torch._inductor.ir.StorageBox]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None, None, int, int, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], List[torch._inductor.ir.StorageBox], List[Union[bool, float]], function, None]",
      "(torch._ops.OpOverload, *torch._inductor.ir.TensorBox) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], List[torch._inductor.ir.StorageBox], List[Union[bool, int]], function, None]",
      "(torch._ops.OpOverload, *torch._inductor.ir.TensorBox) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, List[torch._inductor.ir.StorageBox], List, function, None]",
      "(torch._ops.OpOverloadPacket, *torch._subclasses.fake_tensor.FakeTensor) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, List, List[Union[int, torch._subclasses.fake_tensor.FakeTensor]], function, None]",
      "(torch._ops.OpOverload, *torch._inductor.ir.StorageBox) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None, None, int, int, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], List[torch._inductor.ir.StorageBox], List[float], function, None]",
      "(torch._ops.OpOverload, *Union[float, torch._inductor.ir.StorageBox]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None, None, int, int, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], List[torch._inductor.ir.StorageBox], List[float], function, None]",
      "(torch._ops.OpOverload, *Union[float, torch._inductor.ir.ReinterpretView]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None, None, int, int, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], List[torch._inductor.ir.ReinterpretView], List[float], function, None]"
    ],
    "samples": 600
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4274,
    "func_name": "unflatten_args",
    "type_comments": [
      "(List[torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim], Tuple[torch.SymInt]) -> Tuple[Tuple[torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, torch.SymInt], Dict]",
      "(List[torch._inductor.ir.ComputedBuffer], Tuple[bool, int, bool]) -> Tuple[Tuple[torch._inductor.ir.ComputedBuffer], Dict[str, Union[bool, int]]]",
      "(List[torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim], Tuple[float, float]) -> Tuple[Tuple[torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, float], Dict[str, float]]",
      "(List[torch._subclasses.fake_tensor.FakeTensor], List[torch.SymInt]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch.SymInt], Dict]",
      "(List[torch._inductor.ir.ComputedBuffer], Tuple[]) -> Tuple[Tuple[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ComputedBuffer], Dict]",
      "(List[torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim], Tuple[int, int, int, int, int, int, int, bool, int, int]) -> Tuple[Tuple[torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], Dict]",
      "(List[Union[torch._inductor.ir.ConstantBuffer, torch._inductor.ir.InputBuffer]], Tuple[bool, int, bool, None, bool]) -> Tuple[Tuple[torch._inductor.ir.ConstantBuffer, torch._inductor.ir.InputBuffer, torch._inductor.ir.InputBuffer, bool, int, bool, None, bool], Dict]",
      "(List, List[Union[int, torch._subclasses.fake_tensor.FakeTensor]]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], Dict[str, int]]",
      "(List[Union[torch._subclasses.fake_tensor.FakeTensor, torch.nn.parameter.Parameter]], List[Optional[Union[bool, int]]]) -> Tuple[Tuple[torch.nn.parameter.Parameter, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, bool, int, bool, None, bool], Dict]",
      "(List, List[torch._subclasses.fake_tensor.FakeTensor]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], Dict]",
      "(List[torch._inductor.ir.ReinterpretView], Tuple[float, bool, float]) -> Tuple[Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView, float, bool], Dict[str, float]]",
      "(List[torch._inductor.ir.ComputedBuffer], Tuple[float, float]) -> Tuple[Tuple[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ComputedBuffer, float], Dict[str, float]]",
      "(List[torch._subclasses.fake_tensor.FakeTensor], List[Union[bool, int]]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor], Dict[str, Union[bool, int]]]",
      "(List[torch._inductor.ir.ReinterpretView], Tuple[float]) -> Tuple[Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], Dict[str, float]]",
      "(List[torch._subclasses.fake_tensor.FakeTensor], List[int]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], Dict]",
      "(List[torch._subclasses.fake_tensor.FakeTensor], List[Union[bool, int]]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, bool, int, bool], Dict]",
      "(List[torch._inductor.ir.InputBuffer], Tuple[bool, int, bool, None, bool]) -> Tuple[Tuple[torch._inductor.ir.InputBuffer, torch._inductor.ir.InputBuffer, torch._inductor.ir.InputBuffer, bool, int, bool, None, bool], Dict]",
      "(List[torch._subclasses.fake_tensor.FakeTensor], List) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], Dict]",
      "(List[torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim], Tuple[None, None, int, int, float, bool, float]) -> Tuple[Tuple[torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, None, None, int, int], Dict[str, float]]",
      "(List, List[Union[int, torch._subclasses.fake_tensor.FakeTensor]]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], Dict[str, Union[Tuple[int, int], bool]]]",
      "(List[torch._inductor.ir.InputBuffer], Tuple[torch.SymInt]) -> Tuple[Tuple[torch._inductor.ir.InputBuffer, torch.SymInt], Dict]",
      "(List, List[Union[int, torch._subclasses.fake_tensor.FakeTensor]]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], Dict[str, Union[Tuple[int], bool]]]",
      "(List[torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim], Tuple[float, bool, float]) -> Tuple[Tuple[torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim, float, bool], Dict[str, float]]",
      "(List[torch._subclasses.fake_tensor.FakeTensor], List[Union[bool, float]]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, float, bool], Dict[str, float]]",
      "(List[torch._subclasses.fake_tensor.FakeTensor], List[float]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, float], Dict[str, float]]",
      "(List[torch._inductor.ir.ComputedBuffer], Tuple[float, bool, float]) -> Tuple[Tuple[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ComputedBuffer, float, bool], Dict[str, float]]",
      "(List[torch._subclasses.fake_tensor.FakeTensor], List[Optional[int]]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None, None, int, int], Dict[str, float]]",
      "(List[torch._subclasses.fake_tensor.FakeTensor], List[float]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], Dict[str, float]]",
      "(List[torch._inductor.ir.ComputedBuffer], Tuple[float]) -> Tuple[Tuple[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ComputedBuffer], Dict[str, float]]",
      "(List[torch._inductor.ir.ReinterpretView], Tuple[float, float]) -> Tuple[Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView, float], Dict[str, float]]",
      "(List[torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim], Tuple[bool, int, bool]) -> Tuple[Tuple[torch._inductor.ir:FallbackKernel.codegen_args.<locals>.Shim], Dict[str, Union[bool, int]]]",
      "(List[Union[torch._inductor.ir.InputBuffer, torch._inductor.ir.ReinterpretView]], Tuple[bool, int, bool]) -> Tuple[Tuple[torch._inductor.ir.InputBuffer, torch._inductor.ir.InputBuffer, torch._inductor.ir.ReinterpretView, bool, int, bool], Dict]",
      "(List[torch._subclasses.fake_tensor.FakeTensor], List[Optional[Union[bool, int]]]) -> Tuple[Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, bool, int, bool, None, bool], Dict]"
    ],
    "samples": 630
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4345,
    "func_name": "convert_to_reinterpret_view",
    "type_comments": [
      "(torch._inductor.ir.View) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.PermuteView) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.ExpandView) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.View) -> pyannotate_runtime.collect_types.NoReturnType"
    ],
    "samples": 381
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4413,
    "func_name": "realize_input",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.View) -> torch._inductor.ir.ReinterpretView",
      "(None) -> torch._inductor.ir.NoneAsConstantBuffer",
      "(torch._inductor.ir.ReinterpretView) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.StorageBox) -> torch._inductor.ir.StorageBox",
      "(torch._inductor.ir.View) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.ExpandView) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.PermuteView) -> torch._inductor.ir.ReinterpretView",
      "(sympy.core.symbol.Symbol) -> torch._inductor.ir.ShapeAsConstantBuffer"
    ],
    "samples": 1840
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4444,
    "func_name": "require_stride1",
    "type_comments": [
      "(torch._inductor.ir.StorageBox) -> torch._inductor.ir.StorageBox",
      "(torch._inductor.ir.ReinterpretView) -> torch._inductor.ir.ReinterpretView",
      "(torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 503
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4454,
    "func_name": "require_stride_order",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, List[int], bool) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[int], bool) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 975
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4534,
    "func_name": "require_contiguous",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 17
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4538,
    "func_name": "ExternKernel.apply_constraint",
    "type_comments": [
      "() -> None"
    ],
    "samples": 213
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4541,
    "func_name": "ExternKernel.codegen_const_args",
    "type_comments": [
      "() -> map"
    ],
    "samples": 448
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4558,
    "func_name": "ExternKernel.codegen_args",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 448
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4589,
    "func_name": "ExternKernel.codegen_kwargs",
    "type_comments": [
      "(bool) -> List",
      "(bool) -> List[str]"
    ],
    "samples": 460
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4669,
    "func_name": "ExternKernel.get_unbacked_symbol_uses",
    "type_comments": [
      "() -> Set",
      "() -> Set[sympy.core.symbol.Symbol]"
    ],
    "samples": 532
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4696,
    "func_name": "ExternKernelOut.codegen",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.WrapperCodeGen) -> None"
    ],
    "samples": 339
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4706,
    "func_name": "ExternKernelOut.__init__",
    "type_comments": [
      "(torch._inductor.ir.FixedLayout, List, List[Union[List[int], int]], None, None, str, str, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.FlexibleLayout, Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(torch._inductor.ir.FlexibleLayout, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox], Tuple[], Dict[str, int], None, str, str, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.FlexibleLayout, Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(torch._inductor.ir.FlexibleLayout, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView], Tuple[], Dict[str, int], None, str, str, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.FlexibleLayout, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(torch._inductor.ir.FlexibleLayout, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], Tuple[], Dict[str, int], None, str, str, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.FlexibleLayout, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], Tuple[], Dict[str, int], None, str, str, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.FixedLayout, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(torch._inductor.ir.FixedLayout, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.TensorBox], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(torch._inductor.ir.FixedLayout, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(torch._inductor.ir.FlexibleLayout, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(torch._inductor.ir.FixedLayout, Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], Tuple[], Dict, None, str, str, Tuple[], None) -> None",
      "(torch._inductor.ir.FlexibleLayout, List[torch._inductor.ir.ReinterpretView], Tuple[], None, None, None, None, Tuple[], None) -> None",
      "(torch._inductor.ir.FlexibleLayout, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox], Tuple[], Dict, None, str, str, Tuple[], None) -> None"
    ],
    "samples": 339
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4732,
    "func_name": "ExternKernelOut.should_allocate",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 493
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4766,
    "func_name": "ExternKernelAlloc.__init__",
    "type_comments": [
      "(torch._inductor.ir.MultiOutputLayout, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], Tuple[], None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.MultiOutputLayout, Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], Tuple[float, bool, float], None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.MultiOutputLayout, Tuple[torch._inductor.ir.StorageBox], Tuple[torch.SymInt], None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.MultiOutputLayout, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], Tuple[float, bool, float], None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.MultiOutputLayout, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], Tuple[float, float], None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.MultiOutputLayout, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], Tuple[int, int, int, int, int, int, int, bool, int, int], None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.FixedLayout, List[torch._inductor.ir.TensorBox], Tuple[], Dict[str, Union[Tuple[int, int], bool]], str, str, List[str], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.MultiOutputLayout, Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], Tuple[float, float], None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.MultiOutputLayout, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView], Tuple[bool, int, bool], None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.MultiOutputLayout, Tuple[torch._inductor.ir.StorageBox], Tuple[bool, int, bool], None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.MultiOutputLayout, Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], Tuple[float], None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.MultiOutputLayout, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], Tuple[float], None, None, None, Tuple[], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.FixedLayout, List[torch._inductor.ir.TensorBox], Tuple[], Dict[str, Union[Tuple[int], bool]], str, str, List[str], torch._ops.OpOverload) -> None",
      "(torch._inductor.ir.MultiOutputLayout, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], Tuple[bool, int, bool, None, bool], None, None, None, Tuple[], torch._ops.OpOverload) -> None"
    ],
    "samples": 201
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4791,
    "func_name": "ExternKernelAlloc.should_allocate",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 241
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5353,
    "func_name": "FallbackKernel.__init__",
    "type_comments": [
      "(torch._inductor.ir.MultiOutputLayout, torch._ops.OpOverload, List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]], List[Union[bool, int]], function, None, None) -> None",
      "(torch._inductor.ir.MultiOutputLayout, torch._ops.OpOverload, List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]], List[int], function, None, None) -> None",
      "(torch._inductor.ir.MultiOutputLayout, torch._ops.OpOverload, List[torch._inductor.ir.StorageBox], List[int], function, None, None) -> None",
      "(torch._inductor.ir.MultiOutputLayout, torch._ops.OpOverload, List[torch._inductor.ir.ReinterpretView], List[float], function, None, None) -> None",
      "(torch._inductor.ir.MultiOutputLayout, torch._ops.OpOverload, List[torch._inductor.ir.StorageBox], List[Optional[Union[bool, int]]], function, None, None) -> None",
      "(torch._inductor.ir.MultiOutputLayout, torch._ops.OpOverload, List[torch._inductor.ir.StorageBox], List[Union[bool, float]], function, None, None) -> None",
      "(torch._inductor.ir.MultiOutputLayout, torch._ops.OpOverload, List[torch._inductor.ir.StorageBox], List, function, None, None) -> None",
      "(torch._inductor.ir.MultiOutputLayout, torch._ops.OpOverload, List[torch._inductor.ir.StorageBox], List[Union[bool, int]], function, None, None) -> None",
      "(torch._inductor.ir.MultiOutputLayout, torch._ops.OpOverload, List[torch._inductor.ir.StorageBox], List[float], function, None, None) -> None",
      "(torch._inductor.ir.MultiOutputLayout, torch._ops.OpOverload, List[torch._inductor.ir.ReinterpretView], List[Union[bool, float]], function, None, None) -> None",
      "(torch._inductor.ir.MultiOutputLayout, torch._ops.OpOverload, List[torch._inductor.ir.StorageBox], List[torch.SymInt], function, None, None) -> None"
    ],
    "samples": 122
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5444,
    "func_name": "handle_aliasing_and_mutation",
    "type_comments": [
      "(torch.Argument, torch.fx.immutable_collections.immutable_list) -> None",
      "(torch.Argument, torch._inductor.ir.InputBuffer) -> None",
      "(torch.Argument, bool) -> None",
      "(torch.Argument, int) -> None",
      "(torch.Argument, torch.SymInt) -> None",
      "(torch.Argument, torch._inductor.ir.ComputedBuffer) -> None",
      "(torch.Argument, None) -> None",
      "(torch.Argument, torch._inductor.ir.ConstantBuffer) -> None",
      "(torch.Argument, float) -> None",
      "(torch.Argument, torch._inductor.ir.ReinterpretView) -> None"
    ],
    "samples": 268
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5476,
    "func_name": "FallbackKernel.codegen_unbacked_symbol_defs",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.WrapperCodeGen) -> None"
    ],
    "samples": 121
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5530,
    "func_name": "FallbackKernel.get_unbacked_symbol_defs",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 142
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5564,
    "func_name": "FallbackKernel.codegen_args",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 121
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5565,
    "func_name": "Shim",
    "type_comments": [
      "() -> None"
    ],
    "samples": 121
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5569,
    "func_name": "Shim.__repr__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 162
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5587,
    "func_name": "find_device",
    "type_comments": [
      "(List[torch._inductor.ir.StorageBox], Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]) -> torch.device",
      "(List[torch._inductor.ir.StorageBox], Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None, None, int, int, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]) -> torch.device",
      "(List[torch._inductor.ir.StorageBox], Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]) -> torch.device",
      "(List[torch._inductor.ir.StorageBox], Tuple[None, torch._subclasses.fake_tensor.FakeTensor, None]) -> torch.device",
      "(List[torch._inductor.ir.StorageBox], torch._subclasses.fake_tensor.FakeTensor) -> torch.device",
      "(List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]], Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None]) -> torch.device",
      "(List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]], Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]) -> torch.device",
      "(List[torch._inductor.ir.StorageBox], Tuple[None, torch._subclasses.fake_tensor.FakeTensor]) -> torch.device",
      "(List[torch._inductor.ir.ReinterpretView], Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None, None, int, int, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]) -> torch.device",
      "(List[torch._inductor.ir.StorageBox], Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None]) -> torch.device",
      "(List[torch._inductor.ir.StorageBox], Tuple[torch._subclasses.fake_tensor.FakeTensor, None, None]) -> torch.device"
    ],
    "samples": 122
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5606,
    "func_name": "FallbackKernel.has_side_effects",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 122
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5611,
    "func_name": "FallbackKernel.get_inputs_that_alias_output",
    "type_comments": [
      "() -> List"
    ],
    "samples": 380
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5614,
    "func_name": "FallbackKernel.get_mutation_names",
    "type_comments": [
      "() -> List"
    ],
    "samples": 164
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5690,
    "func_name": "FallbackKernel.codegen",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.WrapperCodeGen) -> None"
    ],
    "samples": 121
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5760,
    "func_name": "tensor_to_layout",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor) -> torch._inductor.ir.FixedLayout"
    ],
    "samples": 154
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5769,
    "func_name": "create",
    "type_comments": [
      "(torch._ops.OpOverload, *torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput]",
      "(torch._ops.OpOverload, *Union[float, torch._inductor.ir.StorageBox]) -> Tuple[torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput, None, None, int, int, torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput]",
      "(torch._ops.OpOverload, *Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]) -> Tuple[None, torch._inductor.ir.MultiOutput, None]",
      "(torch._ops.OpOverload, *torch._inductor.ir.StorageBox) -> Tuple[torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput, None, None, int, int, torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput]",
      "(torch._ops.OpOverload, *Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]) -> Tuple[torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput, None]",
      "(torch._ops.OpOverload, *Union[bool, torch._inductor.ir.TensorBox]) -> Tuple[torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput]",
      "(torch._ops.OpOverload, *torch._inductor.ir.TensorBox) -> torch._inductor.ir.MultiOutput",
      "(torch._ops.OpOverload, *Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]) -> Tuple[torch._inductor.ir.MultiOutput, None, None]",
      "(torch._ops.OpOverload, *Union[float, torch._inductor.ir.TensorBox]) -> Tuple[torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput, None, None, int, int, torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput]",
      "(torch._ops.OpOverload, *Union[sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox]) -> torch._inductor.ir.MultiOutput",
      "(torch._ops.OpOverload, *torch._inductor.ir.ReinterpretView) -> Tuple[torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput, None, None, int, int, torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput]",
      "(torch._ops.OpOverload, *Union[int, torch._inductor.ir.TensorBox]) -> Tuple[None, torch._inductor.ir.MultiOutput]",
      "(torch._ops.OpOverload, *Union[float, torch._inductor.ir.ReinterpretView]) -> Tuple[torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput, None, None, int, int, torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput, torch._inductor.ir.MultiOutput]"
    ],
    "samples": 122
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5806,
    "func_name": "generate_output",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, List[Tuple[type, int]]) -> torch._inductor.ir.MultiOutput",
      "(Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None, None, int, int, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], List) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, None], List) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], List) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], List) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._subclasses.fake_tensor.FakeTensor, List) -> torch._inductor.ir.MultiOutput",
      "(Tuple[None, torch._subclasses.fake_tensor.FakeTensor], List) -> pyannotate_runtime.collect_types.UnknownType",
      "(None, List[Tuple[type, int]]) -> None"
    ],
    "samples": 174
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5884,
    "func_name": "MultiOutput.codegen_list_tuple_access",
    "type_comments": [
      "(str, List) -> str",
      "(str, List[Tuple[type, int]]) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 161
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5902,
    "func_name": "MultiOutput.codegen",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.WrapperCodeGen) -> None"
    ],
    "samples": 147
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5908,
    "func_name": "MultiOutput.__init__",
    "type_comments": [
      "(torch._inductor.ir.FixedLayout, torch._inductor.ir.FallbackKernel, List[Tuple[type, int]]) -> None",
      "(torch._inductor.ir.FixedLayout, torch._inductor.ir.FallbackKernel, List) -> None"
    ],
    "samples": 154
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5913,
    "func_name": "MultiOutput.get_unbacked_symbol_uses",
    "type_comments": [
      "() -> Set",
      "() -> Set[sympy.core.symbol.Symbol]"
    ],
    "samples": 162
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5916,
    "func_name": "MultiOutput.should_allocate",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 184
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5919,
    "func_name": "MultiOutput.get_inputs_that_alias_output",
    "type_comments": [
      "() -> List"
    ],
    "samples": 305
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5936,
    "func_name": "MutableBox.__getattr__",
    "type_comments": [
      "(str) -> pyannotate_runtime.collect_types.NoReturnType",
      "(str) -> method",
      "(str) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 28327
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5942,
    "func_name": "MutableBox.realize",
    "type_comments": [
      "() -> str"
    ],
    "samples": 3898
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5945,
    "func_name": "MutableBox.get_unbacked_symbol_uses",
    "type_comments": [
      "() -> Set",
      "() -> Set[sympy.core.symbol.Symbol]"
    ],
    "samples": 521
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5948,
    "func_name": "MutableBox.codegen_reference",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> str"
    ],
    "samples": 521
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5951,
    "func_name": "layout",
    "type_comments": [
      "() -> torch._inductor.ir.FixedLayout",
      "() -> pyannotate_runtime.collect_types.UnknownType",
      "() -> torch._inductor.ir.FlexibleLayout"
    ],
    "samples": 9122
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5955,
    "func_name": "MutableBox.get_layout",
    "type_comments": [
      "() -> torch._inductor.ir.FixedLayout",
      "() -> pyannotate_runtime.collect_types.UnknownType",
      "() -> torch._inductor.ir.FlexibleLayout"
    ],
    "samples": 7196
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5958,
    "func_name": "MutableBox.get_size",
    "type_comments": [
      "() -> List[sympy.core.mul.Mul]",
      "() -> List",
      "() -> List[int]",
      "() -> List[sympy.core.numbers.Integer]",
      "() -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "() -> List[Union[int, sympy.core.symbol.Symbol]]",
      "() -> pyannotate_runtime.collect_types.UnknownType",
      "() -> List[Union[int, sympy.core.numbers.One]]",
      "() -> List[sympy.core.numbers.One]",
      "() -> List[Union[int, torch.utils._sympy.functions.FloorDiv]]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[sympy.core.numbers.Zero]",
      "() -> List[sympy.core.symbol.Symbol]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]"
    ],
    "samples": 24540
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5961,
    "func_name": "dtype",
    "type_comments": [
      "() -> torch.dtype",
      "() -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 24062
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5986,
    "func_name": "create",
    "type_comments": [
      "(int) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.ExternKernelAlloc) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.ConstantBuffer) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.InputBuffer) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.Pointwise) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.MultiOutput) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.Reduction) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.ExternKernelOut) -> torch._inductor.ir.TensorBox",
      "(None) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.RandomSeeds) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.WelfordReduction) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 4770
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5992,
    "func_name": "StorageBox.is_input_buffer",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 1430
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6003,
    "func_name": "StorageBox.realize",
    "type_comments": [
      "() -> str"
    ],
    "samples": 5256
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6035,
    "func_name": "StorageBox.realize_hint",
    "type_comments": [
      "() -> None"
    ],
    "samples": 841
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6046,
    "func_name": "StorageBox.has_exceeded_max_reads",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 5067
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6052,
    "func_name": "StorageBox.mark_reuse",
    "type_comments": [
      "(int) -> None"
    ],
    "samples": 1782
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6077,
    "func_name": "num_reads",
    "type_comments": [
      "() -> int"
    ],
    "samples": 2771
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6433,
    "func_name": "_dummy_gm",
    "type_comments": [
      "() -> torch.fx.GraphModule"
    ],
    "samples": 59
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6438,
    "func_name": "InterpreterShim.__init__",
    "type_comments": [
      "(torch.fx.graph.Graph, Dict[str, method]) -> None",
      "(torch.fx.graph.Graph, Dict[str, Union[function, functools.partial, method]]) -> None",
      "(torch.fx.graph.Graph, Dict[str, Union[function, method]]) -> None",
      "(torch.fx.graph.Graph, Dict[str, Union[functools.partial, method]]) -> None"
    ],
    "samples": 5562
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6449,
    "func_name": "InterpreterShim.run_node",
    "type_comments": [
      "(torch.fx.node.Node) -> torch._inductor.index_propagation.IndexPropagation",
      "(torch.fx.node.Node) -> torch._inductor.sizevars.SimplifyIndexing",
      "(torch.fx.node.Node) -> sympy.core.mul.Mul",
      "(torch.fx.node.Node) -> torch.utils._sympy.functions.Identity",
      "(torch.fx.node.Node) -> torch.utils._sympy.value_ranges.ValueRangeAnalysis",
      "(torch.fx.node.Node) -> None",
      "(torch.fx.node.Node) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(torch.fx.node.Node) -> sympy.core.symbol.Symbol",
      "(torch.fx.node.Node) -> torch.utils._sympy.functions.ModularIndexing",
      "(torch.fx.node.Node) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.fx.node.Node) -> torch._inductor.index_propagation.IndexPropVar",
      "(torch.fx.node.Node) -> torch._inductor.dependencies.RecordLoadStore",
      "(torch.fx.node.Node) -> sympy.core.numbers.Zero",
      "(torch.fx.node.Node) -> sympy.core.add.Add",
      "(torch.fx.node.Node) -> Tuple[torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar]",
      "(torch.fx.node.Node) -> sympy.functions.elementary.complexes.Abs",
      "(torch.fx.node.Node) -> sympy.core.numbers.Integer",
      "(torch.fx.node.Node) -> str",
      "(torch.fx.node.Node) -> torch.utils._sympy.functions.FloorDiv",
      "(torch.fx.node.Node) -> torch._inductor.codegen.triton.TritonCSEVariable"
    ],
    "samples": 26404
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6453,
    "func_name": "InterpreterShim.run",
    "type_comments": [
      "(*torch._inductor.dependencies.RecordLoadStore) -> str",
      "(*torch.utils._sympy.value_ranges.ValueRangeAnalysis) -> None",
      "(*torch._inductor.dependencies.RecordLoadStore) -> pyannotate_runtime.collect_types.UnknownType",
      "(*torch._inductor.sizevars.SimplifyIndexing) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(*torch._inductor.index_propagation.IndexPropagation) -> pyannotate_runtime.collect_types.UnknownType",
      "(*torch._inductor.sizevars.SimplifyIndexing) -> pyannotate_runtime.collect_types.UnknownType",
      "(*torch._inductor.index_propagation.IndexPropagation) -> torch._inductor.index_propagation.IndexPropVar",
      "(*torch.utils._sympy.value_ranges.ValueRangeAnalysis) -> pyannotate_runtime.collect_types.UnknownType",
      "(*torch._inductor.sizevars.SimplifyIndexing) -> None",
      "(*torch.utils._sympy.value_ranges.ValueRangeAnalysis) -> torch.utils._sympy.value_ranges.ValueRanges"
    ],
    "samples": 5558
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6464,
    "func_name": "LoopBody.__init__",
    "type_comments": [
      "(functools.partial, List[Union[Tuple[sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Tuple[]], Dict) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> None",
      "(functools.partial, List[Union[Tuple[], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[int, torch.utils._sympy.functions.FloorDiv]]) -> None",
      "(torch._inductor.ir.LoopBody, List[List[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(torch._inductor.ir.LoopBody, List[Union[List, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(torch._inductor.ir.LoopBody, List[Union[List, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]]], Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(torch._inductor.ir.LoopBody, List[Union[List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> None",
      "(torch._inductor.ir.LoopBody, List[List], Dict) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> None",
      "(torch._inductor.ir.LoopBody, List[List[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> None",
      "(functools.partial, List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]) -> None",
      "(torch._inductor.ir.LoopBody, List[Union[List, List[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir.LoopBody, List[Union[List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(torch._inductor.ir.LoopBody, List[Union[List, List[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, Union[int, torch.utils._sympy.functions.FloorDiv]]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, int]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, int]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir.LoopBody, List[Union[List, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> None",
      "(functools.partial, List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]) -> None",
      "(functools.partial, List[Union[Tuple[], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]) -> None",
      "(functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> None",
      "(functools.partial, List[Union[Tuple[], Tuple[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(torch._inductor.ir.LoopBody, List[Union[List, List[sympy.core.symbol.Symbol]]], Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir.LoopBody, List[Union[List, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]]], Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None"
    ],
    "samples": 2948
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6480,
    "func_name": "get_nodes",
    "type_comments": [
      "() -> List[torch.fx.node.Node]"
    ],
    "samples": 1468
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6488,
    "func_name": "bounds",
    "type_comments": [
      "() -> torch._inductor.bounds.BoundVars"
    ],
    "samples": 1468
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6508,
    "func_name": "LoopBody.add_index_expr",
    "type_comments": [
      "(torch.utils._sympy.functions.Identity, str, str) -> str",
      "(sympy.functions.elementary.miscellaneous.Min, str, None) -> str",
      "(torch.utils._sympy.functions.Identity, str, None) -> str",
      "(sympy.core.numbers.Integer, str, str) -> str",
      "(torch.utils._sympy.functions.ModularIndexing, str, str) -> str",
      "(torch.utils._sympy.functions.FloorDiv, str, None) -> str",
      "(sympy.core.add.Add, str, None) -> str",
      "(sympy.core.numbers.Zero, str, str) -> str",
      "(sympy.core.mul.Mul, str, str) -> str",
      "(sympy.core.mul.Mul, str, None) -> str",
      "(sympy.core.add.Add, str, str) -> str",
      "(torch.utils._sympy.functions.FloatTrueDiv, str, None) -> str",
      "(sympy.functions.elementary.complexes.Abs, str, None) -> str",
      "(torch.utils._sympy.functions.ModularIndexing, str, None) -> str",
      "(sympy.core.numbers.Integer, str, None) -> str",
      "(sympy.core.symbol.Symbol, str, str) -> str",
      "(sympy.core.symbol.Symbol, str, None) -> str"
    ],
    "samples": 8510
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6518,
    "func_name": "LoopBody.add_submodule",
    "type_comments": [
      "(function, str) -> str"
    ],
    "samples": 426
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6539,
    "func_name": "LoopBody.get_index",
    "type_comments": [
      "(str) -> sympy.core.add.Add",
      "(str) -> sympy.functions.elementary.miscellaneous.Max",
      "(str) -> torch.utils._sympy.functions.Identity",
      "(str) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(str) -> torch.utils._sympy.functions.ModularIndexing",
      "(str) -> sympy.functions.elementary.complexes.Abs",
      "(str) -> torch.utils._sympy.functions.FloorDiv",
      "(str) -> sympy.core.mul.Mul",
      "(str) -> sympy.core.numbers.Zero",
      "(str) -> sympy.functions.elementary.miscellaneous.Min",
      "(str) -> sympy.core.numbers.Integer",
      "(str) -> sympy.core.symbol.Symbol"
    ],
    "samples": 12791
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6543,
    "func_name": "LoopBody.indexing_from_args",
    "type_comments": [
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> Dict[str, sympy.core.add.Add]",
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]) -> Dict[str, sympy.core.add.Add]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.mul.Mul, sympy.core.symbol.Symbol]]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol], Tuple[]]) -> Dict[str, sympy.core.symbol.Symbol]",
      "(Tuple[List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List]) -> Dict[str, sympy.core.symbol.Symbol]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> Dict[str, Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol]]",
      "(List[Union[List, List[sympy.core.symbol.Symbol]]]) -> Dict[str, sympy.core.symbol.Symbol]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[]]) -> Dict[str, sympy.core.add.Add]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.mul.Mul, sympy.core.symbol.Symbol]]",
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.mul.Mul]]",
      "(Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]) -> Dict[str, sympy.core.add.Add]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List]) -> Dict[str, sympy.core.add.Add]",
      "(Tuple[List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[]]) -> Dict[str, sympy.core.add.Add]",
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> Dict[str, Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]",
      "(Tuple[List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List]) -> Dict[str, Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List]) -> Dict[str, sympy.core.add.Add]",
      "(Tuple[List, List]) -> Dict[str, sympy.core.numbers.Zero]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[List]) -> Dict[str, sympy.core.numbers.Zero]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List[sympy.core.numbers.Zero]]) -> Dict[str, sympy.core.add.Add]",
      "(Tuple[Tuple[], Tuple[]]) -> Dict[str, sympy.core.numbers.Zero]",
      "(List[Union[List, List[sympy.core.symbol.Symbol]]]) -> Dict[str, Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[Tuple[], Tuple[sympy.core.symbol.Symbol]]) -> Dict[str, sympy.core.symbol.Symbol]",
      "(List[List[sympy.core.symbol.Symbol]]) -> Dict[str, Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> Dict[str, Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol, torch.utils._sympy.functions.FloatTrueDiv]]",
      "(List[Union[List, List[sympy.core.symbol.Symbol]]]) -> Dict[str, sympy.core.add.Add]",
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> Dict[str, Union[sympy.core.add.Add, sympy.functions.elementary.complexes.Abs]]",
      "(Tuple[List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> Dict[str, Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[List, List[sympy.core.symbol.Symbol]]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.mul.Mul]]",
      "(Tuple[Tuple[], Tuple[sympy.core.symbol.Symbol]]) -> Dict[str, Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol], Tuple[]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[List, List[sympy.core.symbol.Symbol]]) -> Dict[str, sympy.core.symbol.Symbol]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol]]) -> Dict[str, sympy.core.add.Add]",
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.mul.Mul]]",
      "(Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol, torch.utils._sympy.functions.FloatTrueDiv]]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List]) -> Dict[str, sympy.core.add.Add]",
      "(List[Union[List, List[sympy.core.symbol.Symbol]]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> Dict[str, sympy.core.symbol.Symbol]",
      "(List[List[sympy.core.symbol.Symbol]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[]]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.mul.Mul, sympy.core.symbol.Symbol]]",
      "(Tuple[List, List[sympy.core.symbol.Symbol]]) -> Dict[str, Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List]) -> Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]"
    ],
    "samples": 5285
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6553,
    "func_name": "LoopBody.__call__",
    "type_comments": [
      "(*Union[List, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> str",
      "(*Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> str",
      "(*Union[List, List[sympy.core.symbol.Symbol]]) -> bool",
      "(*Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> str",
      "(*List[sympy.core.symbol.Symbol]) -> None",
      "(*List[sympy.core.symbol.Symbol]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[List, List[sympy.core.symbol.Symbol]]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Tuple[]) -> str",
      "(*Tuple[sympy.core.symbol.Symbol]) -> str",
      "(*Union[List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol]]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[List[sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> str",
      "(*List) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[List, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.index_propagation.IndexPropVar",
      "(*Union[List, List[sympy.core.add.Add]]) -> None",
      "(*List) -> None",
      "(*Union[List, List[sympy.core.symbol.Symbol]]) -> None",
      "(*Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> str",
      "(*Union[Tuple[], Tuple[sympy.core.symbol.Symbol]]) -> str",
      "(*Union[List, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> str",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]) -> str",
      "(*Union[List, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> str"
    ],
    "samples": 4336
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6568,
    "func_name": "LoopBodyBlock.__init__",
    "type_comments": [
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[], Tuple[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, torch._inductor.ir.LoopBody, List[Union[List, List[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.LoopBody, torch._inductor.ir.LoopBody, List[List[sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero]]) -> None",
      "(torch._inductor.ir.LoopBody, torch._inductor.ir.LoopBody, List[Union[List, List[sympy.core.symbol.Symbol]]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.LoopBody, torch._inductor.ir.LoopBody, List[Union[List, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, torch._inductor.ir.LoopBody, List[Union[List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, torch._inductor.ir.LoopBody, List[Union[List, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]]) -> None",
      "(torch._inductor.ir.LoopBody, torch._inductor.ir.LoopBody, List[List]) -> None",
      "(torch._inductor.ir.LoopBody, torch._inductor.ir.LoopBodyBlock, List) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Union[Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]]]) -> None",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.LoopBody, torch._inductor.ir.LoopBody, List[List[sympy.core.symbol.Symbol]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.LoopBody, functools.partial, List[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.LoopBody, function, List) -> None"
    ],
    "samples": 3057
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6571,
    "func_name": "add_index",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing, str, None) -> torch.fx.proxy.Proxy",
      "(sympy.core.symbol.Symbol, str, None) -> torch.fx.proxy.Proxy",
      "(sympy.core.mul.Mul, str, None) -> torch.fx.proxy.Proxy",
      "(sympy.functions.elementary.complexes.Abs, str, None) -> torch.fx.proxy.Proxy",
      "(sympy.core.numbers.Integer, str, None) -> torch.fx.proxy.Proxy",
      "(sympy.core.mul.Mul, str, str) -> torch.fx.proxy.Proxy",
      "(sympy.core.numbers.Zero, str, str) -> torch.fx.proxy.Proxy",
      "(torch.utils._sympy.functions.FloorDiv, str, None) -> torch.fx.proxy.Proxy",
      "(torch.utils._sympy.functions.Identity, str, str) -> torch.fx.proxy.Proxy",
      "(sympy.core.symbol.Symbol, str, str) -> torch.fx.proxy.Proxy",
      "(sympy.functions.elementary.miscellaneous.Min, str, None) -> torch.fx.proxy.Proxy",
      "(torch.utils._sympy.functions.FloatTrueDiv, str, None) -> torch.fx.proxy.Proxy",
      "(sympy.core.numbers.Integer, str, str) -> torch.fx.proxy.Proxy",
      "(sympy.core.add.Add, str, None) -> torch.fx.proxy.Proxy",
      "(torch.utils._sympy.functions.Identity, str, None) -> torch.fx.proxy.Proxy",
      "(sympy.core.add.Add, str, str) -> torch.fx.proxy.Proxy",
      "(torch.utils._sympy.functions.ModularIndexing, str, str) -> torch.fx.proxy.Proxy"
    ],
    "samples": 8510
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6579,
    "func_name": "CaptureIndexing",
    "type_comments": [
      "() -> None"
    ],
    "samples": 3058
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6582,
    "func_name": "CaptureIndexing.load",
    "type_comments": [
      "(str, torch.utils._sympy.functions.Identity) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.mul.Mul) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.symbol.Symbol) -> torch.fx.proxy.Proxy",
      "(str, torch.utils._sympy.functions.ModularIndexing) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.add.Add) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.numbers.Zero) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.numbers.Integer) -> torch.fx.proxy.Proxy"
    ],
    "samples": 5740
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6586,
    "func_name": "CaptureIndexing.store",
    "type_comments": [
      "(str, sympy.core.add.Add, torch.fx.proxy.Proxy, None) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.add.Add, torch.fx.proxy.Proxy, str) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.symbol.Symbol, torch.fx.proxy.Proxy, str) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.symbol.Symbol, torch.fx.proxy.Proxy, None) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.numbers.Zero, torch.fx.proxy.Proxy, None) -> torch.fx.proxy.Proxy"
    ],
    "samples": 2552
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6590,
    "func_name": "CaptureIndexing.store_reduction",
    "type_comments": [
      "(str, sympy.core.symbol.Symbol, torch.fx.proxy.Proxy) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.add.Add, torch.fx.proxy.Proxy) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.numbers.Zero, torch.fx.proxy.Proxy) -> torch.fx.proxy.Proxy"
    ],
    "samples": 652
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6594,
    "func_name": "CaptureIndexing.reduction",
    "type_comments": [
      "(torch.dtype, torch.dtype, str, Tuple[torch.fx.proxy.Proxy, torch.fx.proxy.Proxy, torch.fx.proxy.Proxy]) -> Tuple[torch.fx.proxy.Proxy, torch.fx.proxy.Proxy, torch.fx.proxy.Proxy]",
      "(torch.dtype, torch.dtype, str, torch.fx.proxy.Proxy) -> torch.fx.proxy.Proxy",
      "(torch.dtype, torch.dtype, str, torch.fx.proxy.Proxy) -> Tuple[torch.fx.proxy.Proxy, torch.fx.proxy.Proxy, torch.fx.proxy.Proxy]"
    ],
    "samples": 652
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6600,
    "func_name": "CaptureIndexing.index_expr",
    "type_comments": [
      "(sympy.core.symbol.Symbol, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.functions.elementary.miscellaneous.Min, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.functions.elementary.miscellaneous.Max, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.functions.elementary.complexes.Abs, torch.dtype) -> torch.fx.proxy.Proxy",
      "(torch.utils._sympy.functions.ModularIndexing, torch.dtype) -> torch.fx.proxy.Proxy",
      "(torch.utils._sympy.functions.FloatTrueDiv, torch.dtype) -> torch.fx.proxy.Proxy",
      "(torch.utils._sympy.functions.FloorDiv, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.core.numbers.Zero, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.core.add.Add, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.core.mul.Mul, torch.dtype) -> torch.fx.proxy.Proxy"
    ],
    "samples": 653
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6624,
    "func_name": "masked",
    "type_comments": [
      "(torch.fx.proxy.Proxy, torch._inductor.ir.LoopBodyBlock, int) -> torch.fx.proxy.Proxy",
      "(torch.fx.proxy.Proxy, torch._inductor.ir.LoopBodyBlock, float) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.fx.proxy.Proxy, function, int) -> torch.fx.proxy.Proxy",
      "(torch.fx.proxy.Proxy, function, float) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.fx.proxy.Proxy, function, float) -> torch.fx.proxy.Proxy",
      "(torch.fx.proxy.Proxy, torch._inductor.ir.LoopBodyBlock, float) -> torch.fx.proxy.Proxy"
    ],
    "samples": 293
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6632,
    "func_name": "shim",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, float) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch._inductor.index_propagation.IndexPropVar, float) -> torch._inductor.index_propagation.IndexPropVar",
      "(torch._inductor.codegen.triton.TritonCSEVariable, float) -> pyannotate_runtime.collect_types.UnknownType",
      "(str, int) -> str",
      "(torch._inductor.codegen.triton.TritonCSEVariable, int) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, float) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.index_propagation.IndexPropVar, int) -> torch._inductor.index_propagation.IndexPropVar",
      "(str, float) -> str",
      "(torch._inductor.index_propagation.IndexPropVar, float) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 430
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6695,
    "func_name": "output",
    "type_comments": [
      "(torch.fx.proxy.Proxy) -> None"
    ],
    "samples": 3058
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6718,
    "func_name": "LoopBodyBlock.__call__",
    "type_comments": [
      "() -> torch._inductor.index_propagation.IndexPropVar",
      "() -> torch._inductor.codegen.triton.TritonCSEVariable",
      "() -> pyannotate_runtime.collect_types.UnknownType",
      "() -> str",
      "() -> None"
    ],
    "samples": 4566
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6927,
    "func_name": "maybe_free_unbacked_symbols",
    "type_comments": [
      "(None) -> Set",
      "(bool) -> Set",
      "(Tuple[int]) -> pyannotate_runtime.collect_types.UnknownType",
      "(int) -> Set",
      "(str) -> Set",
      "(Tuple[int, int]) -> pyannotate_runtime.collect_types.UnknownType",
      "(float) -> Set",
      "(List[int]) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.SymInt) -> Set[sympy.core.symbol.Symbol]"
    ],
    "samples": 1355
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/kernel/mm.py",
    "line": 141,
    "func_name": "tuned_mm",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 265
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/kernel/mm.py",
    "line": 195,
    "func_name": "_is_static_problem",
    "type_comments": [
      "(List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]], torch._inductor.ir.FixedLayout) -> Tuple[bool, bool]",
      "(List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox, torch._inductor.ir.TensorBox]], torch._inductor.ir.FixedLayout) -> Tuple[bool, bool]",
      "(List[torch._inductor.ir.StorageBox], torch._inductor.ir.FixedLayout) -> Tuple[bool, bool]",
      "(List[torch._inductor.ir.ReinterpretView], torch._inductor.ir.FixedLayout) -> Tuple[bool, bool]",
      "(List[Union[torch._inductor.ir.StorageBox, torch._inductor.ir.TensorBox]], torch._inductor.ir.FixedLayout) -> Tuple[bool, bool]",
      "(List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.TensorBox]], torch._inductor.ir.FixedLayout) -> Tuple[bool, bool]"
    ],
    "samples": 327
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/kernel/mm.py",
    "line": 260,
    "func_name": "tuned_addmm",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, int, int, None) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 107
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/kernel/mm_common.py",
    "line": 270,
    "func_name": "mm_args",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, None, bool, *torch._inductor.ir.TensorBox) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol, torch._inductor.ir.FixedLayout]]",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, None, bool) -> List[Union[sympy.core.numbers.Integer, torch._inductor.ir.FixedLayout]]",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, None, bool, *torch._inductor.ir.TensorBox) -> List[Union[sympy.core.numbers.Integer, torch._inductor.ir.FixedLayout]]",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, None, bool) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, torch._inductor.ir.FixedLayout]]",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, None, bool, *torch._inductor.ir.TensorBox) -> List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol, torch._inductor.ir.FixedLayout]]",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, None, bool) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol, torch._inductor.ir.FixedLayout]]",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, None, bool) -> List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol, torch._inductor.ir.FixedLayout]]",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, None, bool, *torch._inductor.ir.TensorBox) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, torch._inductor.ir.FixedLayout]]",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, None, bool, *torch._inductor.ir.TensorBox) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, torch._inductor.ir.FixedLayout]]",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, None, bool, *torch._inductor.ir.TensorBox) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol, torch._inductor.ir.FixedLayout]]",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, None, bool) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol, torch._inductor.ir.FixedLayout]]",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, None, bool) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, torch._inductor.ir.FixedLayout]]",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, None, bool) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One, torch._inductor.ir.FixedLayout]]"
    ],
    "samples": 327
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 89,
    "func_name": "assert_nyi",
    "type_comments": [
      "(bool, str) -> None"
    ],
    "samples": 243
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 163,
    "func_name": "is_integer_type",
    "type_comments": [
      "(int) -> bool",
      "(torch._inductor.ir.TensorBox) -> bool"
    ],
    "samples": 659
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 172,
    "func_name": "is_boolean_type",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> bool"
    ],
    "samples": 1449
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 179,
    "func_name": "get_promoted_dtype",
    "type_comments": [
      "(torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, *Union[bool, int, torch._inductor.ir.TensorBox]) -> torch.dtype",
      "(torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, *Union[torch._inductor.ir.ExpandView, torch._inductor.ir.TensorBox]) -> torch.dtype",
      "(torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, *Union[bool, torch._inductor.ir.TensorBox]) -> torch.dtype",
      "(torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, *torch._inductor.ir.TensorBox) -> torch.dtype",
      "(torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, *Union[int, torch._inductor.ir.TensorBox]) -> torch.dtype",
      "(torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, *Union[torch._inductor.ir.TensorBox, torch.utils._sympy.functions.FloatTrueDiv]) -> torch.dtype",
      "(torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, *Union[float, torch._inductor.ir.TensorBox]) -> torch.dtype"
    ],
    "samples": 3465
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 180,
    "func_name": "construct_input",
    "type_comments": [
      "(float) -> float",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(torch._inductor.ir.TensorBox) -> torch.Tensor",
      "(bool) -> bool",
      "(int) -> int",
      "(torch._inductor.ir.ExpandView) -> torch.Tensor"
    ],
    "samples": 6051
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 210,
    "func_name": "in_namespace",
    "type_comments": [
      "(torch._ops.OpOverload, str) -> bool",
      "(torch._ops.OpOverloadPacket, str) -> bool",
      "(builtin_function_or_method, str) -> bool"
    ],
    "samples": 8634
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 218,
    "func_name": "transform_args",
    "type_comments": [
      "(List[Union[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], torch._inductor.ir.TensorBox]]",
      "(List[Union[List[Union[int, sympy.core.numbers.Integer]], torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[List[Union[int, sympy.core.numbers.Integer]], torch._inductor.ir.TensorBox]]",
      "(List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]]",
      "(List[Union[Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]]",
      "(List[Union[Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]]",
      "(List[Union[float, torch.fx.immutable_collections.immutable_list]], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> List[Union[float, torch.fx.immutable_collections.immutable_list]]",
      "(List[float], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> List[float]",
      "(List[Union[sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox]]",
      "(List[Union[int, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]], bool, None, bool) -> List[Union[int, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]]",
      "(List[Union[Tuple[sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[Tuple[sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]]",
      "(List[Union[torch._inductor.ir.ExpandView, torch._inductor.ir.TensorBox]], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[Union[Tuple[sympy.core.symbol.Symbol, int, int], torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[Tuple[sympy.core.symbol.Symbol, int, int], torch._inductor.ir.TensorBox]]",
      "(List[Union[Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]]",
      "(List[Union[int, torch._inductor.ir.TensorBox]], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[Union[torch._inductor.ir.TensorBox, torch.device]], bool, None, bool) -> List[Union[torch._inductor.ir.TensorBox, torch.device]]",
      "(List[torch._inductor.ir.TensorBox], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.fx.immutable_collections.immutable_list, bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> List[torch._inductor.ir.TensorBox]",
      "(List[Optional[torch._inductor.ir.TensorBox]], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> List[Optional[torch._inductor.ir.TensorBox]]",
      "(List[Union[bool, torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[bool, torch._inductor.ir.TensorBox]]",
      "(List[Optional[Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]]], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> List[Optional[Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]]]",
      "(List[Union[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], torch._inductor.ir.TensorBox]]",
      "(List[Union[int, sympy.core.numbers.Integer, sympy.core.numbers.One, torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[int, sympy.core.numbers.Integer, sympy.core.numbers.One, torch._inductor.ir.TensorBox]]",
      "(List[Union[bool, torch._inductor.ir.TensorBox]], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> List[Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]]",
      "(List[Union[torch._inductor.ir.TensorBox, torch.dtype]], bool, None, bool) -> List[Union[torch._inductor.ir.TensorBox, torch.dtype]]",
      "(List[Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]], bool, None, bool) -> List[Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]]",
      "(List[Union[int, torch.fx.immutable_collections.immutable_list]], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> List[Union[int, torch.fx.immutable_collections.immutable_list]]",
      "(List[Union[List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], torch._inductor.ir.TensorBox]]",
      "(List[Union[List[sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[List[sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]]",
      "(List[int], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> List[int]",
      "(List[torch._inductor.ir.TensorBox], bool, None, bool) -> List[torch._inductor.ir.TensorBox]",
      "(List[Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], torch._inductor.ir.TensorBox]]",
      "(List[torch._inductor.ir.TensorBox], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> List[torch._inductor.ir.TensorBox]",
      "(List[Union[int, torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[int, torch._inductor.ir.TensorBox]]",
      "(List[Union[int, torch.device]], bool, None, bool) -> List[Union[int, torch.device]]",
      "(List[Union[torch._inductor.ir.TensorBox, torch.utils._sympy.functions.FloatTrueDiv]], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[Union[bool, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> List[Union[bool, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]]",
      "(List[Union[str, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]], bool, None, bool) -> List[Union[str, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]]",
      "(List[Union[List[Union[int, sympy.core.numbers.One]], torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[List[Union[int, sympy.core.numbers.One]], torch._inductor.ir.TensorBox]]",
      "(List[Union[int, sympy.core.numbers.One, sympy.core.numbers.Zero, torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[int, sympy.core.numbers.One, sympy.core.numbers.Zero, torch._inductor.ir.TensorBox]]",
      "(List[Union[float, torch._inductor.ir.TensorBox]], bool, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND, bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]], bool, None, bool) -> List[Union[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]]"
    ],
    "samples": 8637
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 236,
    "func_name": "promote",
    "type_comments": [
      "(torch.fx.immutable_collections.immutable_list) -> torch.fx.immutable_collections.immutable_list",
      "(float) -> float",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(List[int]) -> List[int]",
      "(bool) -> bool",
      "(int) -> int",
      "(torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(None) -> None",
      "(torch._inductor.ir.ExpandView) -> torch._inductor.ir.ExpandView"
    ],
    "samples": 6184
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 294,
    "func_name": "wrapped",
    "type_comments": [
      "(*Union[int, sympy.core.numbers.One, sympy.core.numbers.Zero, torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(*torch._inductor.ir.TensorBox) -> List[torch._inductor.ir.TensorBox]",
      "(*Union[List[Union[int, sympy.core.numbers.One]], torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[Tuple[sympy.core.symbol.Symbol, int, int], torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.TensorBox",
      "(*Union[List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[Tuple[sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[int, torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[torch._inductor.ir.TensorBox, torch.dtype]) -> torch._inductor.ir.TensorBox",
      "(*torch._inductor.ir.TensorBox) -> sympy.core.mul.Mul",
      "(*Union[Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[bool, torch._inductor.ir.TensorBox]) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(*Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]) -> torch._inductor.ir.TensorBox",
      "(*Union[int, torch.device]) -> torch._inductor.ir.TensorBox",
      "(*Union[sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[Union[int, sympy.core.numbers.One]], torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[torch._inductor.ir.TensorBox, torch.device]) -> torch._inductor.ir.TensorBox",
      "(*Union[bool, torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*torch._inductor.ir.TensorBox) -> sympy.core.symbol.Symbol",
      "(*Union[int, torch.fx.immutable_collections.immutable_list]) -> torch._inductor.ir.TensorBox",
      "(*Union[torch._inductor.ir.TensorBox, torch.utils._sympy.functions.FloatTrueDiv]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Optional[Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]]) -> torch._inductor.ir.TensorBox",
      "(*Union[Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[Union[int, sympy.core.numbers.Integer]], torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[str, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*int) -> torch._inductor.ir.TensorBox",
      "(*Union[List[Union[int, sympy.core.numbers.Integer]], torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[float, torch.fx.immutable_collections.immutable_list]) -> torch._inductor.ir.TensorBox",
      "(*Union[int, torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(*torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[torch._inductor.ir.ExpandView, torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[int, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]) -> torch._inductor.ir.TensorBox",
      "(*Optional[torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[float, torch._inductor.ir.TensorBox]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[int, sympy.core.numbers.Integer, sympy.core.numbers.One, torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*List[float]) -> torch._inductor.ir.TensorBox",
      "(*Union[bool, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]) -> torch._inductor.ir.TensorBox",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 8608
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 349,
    "func_name": "broadcast_symbolic_shapes",
    "type_comments": [
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]",
      "(List, List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.numbers.One, sympy.core.numbers.One]",
      "(List, List[sympy.core.numbers.Integer]) -> Tuple[sympy.core.numbers.Integer]",
      "(List, List[int]) -> Tuple[int]",
      "(Tuple[sympy.core.symbol.Symbol, int, int], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, int, int]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], List) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One]",
      "(Tuple[int, int, int], List[int]) -> Tuple[int, int, int]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.mul.Mul], List[sympy.core.mul.Mul]) -> Tuple[sympy.core.mul.Mul]",
      "(List, List[sympy.core.numbers.Integer]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List, List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, int, sympy.core.numbers.One, sympy.core.numbers.One]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List, List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, int]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.numbers.One], List[sympy.core.numbers.Integer]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One], List) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One]",
      "(List, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.numbers.Integer], List) -> Tuple[sympy.core.numbers.Integer]",
      "(List, List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, int, sympy.core.numbers.One, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List, List[sympy.core.numbers.One]) -> Tuple[sympy.core.numbers.One]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.symbol.Symbol, int, int], List[sympy.core.numbers.Integer]) -> Tuple[sympy.core.symbol.Symbol, int, int]",
      "(List, List[sympy.core.numbers.Integer]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]",
      "(List, List[int]) -> Tuple[int, int, int]",
      "(Tuple[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]) -> Tuple[sympy.core.numbers.Integer]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One], List[sympy.core.numbers.Integer]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[int]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List, List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, int, sympy.core.numbers.One]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.One]",
      "(List, List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.numbers.One, sympy.core.symbol.Symbol]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.symbol.Symbol, int], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, int]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One], List[sympy.core.numbers.Integer]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List, List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, int, int, int]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer]",
      "(List, List[sympy.core.mul.Mul]) -> Tuple[sympy.core.mul.Mul]",
      "(List, List[sympy.core.numbers.Integer]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]",
      "(Tuple[sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List, List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, int, int]",
      "(Tuple[sympy.core.numbers.Integer], List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, int, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One], List[int]) -> Tuple[sympy.core.numbers.Integer, int]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]",
      "(List, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List, List) -> Tuple[]",
      "(Tuple[sympy.core.symbol.Symbol, int, int], List[Union[int, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, int, int]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[], List) -> Tuple[]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]",
      "(Tuple[sympy.core.symbol.Symbol, int, int], List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.symbol.Symbol, int, int]",
      "(Tuple[sympy.core.numbers.One, sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> Tuple[sympy.core.numbers.One, sympy.core.symbol.Symbol]",
      "(List, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List) -> Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]"
    ],
    "samples": 4499
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 373,
    "func_name": "promote_constants",
    "type_comments": [
      "(Tuple[torch._inductor.ir.TensorBox, int], torch.dtype, None) -> List[Union[torch._inductor.ir.ExpandView, torch._inductor.ir.TensorBox]]",
      "(List[torch._inductor.ir.TensorBox], None, None) -> List[torch._inductor.ir.TensorBox]",
      "(Tuple[torch._inductor.ir.TensorBox], None, None) -> Tuple[torch._inductor.ir.TensorBox]",
      "(Tuple[float, torch._inductor.ir.TensorBox], None, None) -> List[Union[torch._inductor.ir.ExpandView, torch._inductor.ir.TensorBox]]",
      "(Tuple[torch._inductor.ir.TensorBox, float], torch.dtype, None) -> List[Union[torch._inductor.ir.ExpandView, torch._inductor.ir.TensorBox]]",
      "(Tuple[int, torch._inductor.ir.TensorBox], None, None) -> List[Union[torch._inductor.ir.ExpandView, torch._inductor.ir.TensorBox]]",
      "(Tuple[torch._inductor.ir.TensorBox, float], None, None) -> List[Union[torch._inductor.ir.ExpandView, torch._inductor.ir.TensorBox]]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], torch.dtype, None) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], torch.dtype, None) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], None, None) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(Tuple[torch._inductor.ir.TensorBox, int], None, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND) -> List[Union[torch._inductor.ir.ExpandView, torch._inductor.ir.TensorBox]]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ExpandView], None, None) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ExpandView]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ExpandView], None, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ExpandView]",
      "(Tuple[torch._inductor.ir.TensorBox, float], None, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND) -> List[Union[torch._inductor.ir.ExpandView, torch._inductor.ir.TensorBox]]",
      "(Tuple[torch._inductor.ir.TensorBox, int], None, None) -> List[Union[torch._inductor.ir.ExpandView, torch._inductor.ir.TensorBox]]",
      "(Tuple[torch._inductor.ir.TensorBox, torch.utils._sympy.functions.FloatTrueDiv], None, None) -> List[Union[torch._inductor.ir.ExpandView, torch._inductor.ir.TensorBox]]",
      "(Tuple[torch._inductor.ir.TensorBox, bool], torch.dtype, None) -> List[Union[torch._inductor.ir.ExpandView, torch._inductor.ir.TensorBox]]",
      "(Tuple[torch._inductor.ir.TensorBox], torch.dtype, None) -> Tuple[torch._inductor.ir.TensorBox]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], None, torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]"
    ],
    "samples": 4055
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 417,
    "func_name": "make_pointwise",
    "type_comments": [
      "(function, torch.dtype, None, None, None, bool, None) -> function",
      "(function, None, None, None, None, bool, None) -> function"
    ],
    "samples": 1849
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 426,
    "func_name": "inner",
    "type_comments": [
      "(None, *torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(None, *Union[float, torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(None, *Union[torch._inductor.ir.TensorBox, torch.utils._sympy.functions.FloatTrueDiv]) -> torch._inductor.ir.TensorBox",
      "(int, *torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(None, *Union[bool, torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(int, *Union[float, torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(None, *Union[torch._inductor.ir.ExpandView, torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(float, *torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(None, *Union[int, torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(int, *Union[int, torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 3196
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 448,
    "func_name": "inner_fn",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.add.Add]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue",
      "(List) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.add.Add, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.add.Add, sympy.core.add.Add]) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.add.Add, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add]) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 22855
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 555,
    "func_name": "to_dtype",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.dtype, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 5329
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 560,
    "func_name": "_to_dtype",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 5996
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 566,
    "func_name": "_convert_element_type",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.dtype) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 604
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 744,
    "func_name": "broadcast_tensors",
    "type_comments": [
      "(*torch._inductor.ir.TensorBox) -> List[torch._inductor.ir.TensorBox]"
    ],
    "samples": 3190
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 771,
    "func_name": "squeeze",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 197
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 857,
    "func_name": "expand",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.symbol.Symbol, int, sympy.core.numbers.Integer, int]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.add.Add]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[Union[int, torch.utils._sympy.functions.FloorDiv]]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.Integer, int]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.symbol.Symbol, int, int]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.One]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[int, int, int]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.symbol.Symbol, int, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 1011
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 952,
    "func_name": "view",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[Union[int, sympy.core.numbers.One]]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[sympy.core.mul.Mul]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[int]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[Union[int, sympy.core.numbers.Integer]]) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 854
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 961,
    "func_name": "permute",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 428
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1007,
    "func_name": "pointwise_cat",
    "type_comments": [
      "(List[torch._inductor.ir.TensorBox], sympy.core.numbers.Integer) -> torch._inductor.ir.TensorBox",
      "(List[torch._inductor.ir.TensorBox], sympy.core.numbers.Zero) -> torch._inductor.ir.TensorBox",
      "(List[torch._inductor.ir.TensorBox], sympy.core.numbers.One) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 97
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1017,
    "func_name": "inner_fn",
    "type_comments": [
      "(Tuple[sympy.core.add.Add, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.One]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 239
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1338,
    "func_name": "cat",
    "type_comments": [
      "(torch.fx.immutable_collections.immutable_list, int) -> torch._inductor.ir.TensorBox",
      "(List[torch._inductor.ir.TensorBox], int) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 105
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1361,
    "func_name": "unwrap_tensor",
    "type_comments": [
      "(torch._inductor.ir.StorageBox) -> torch._inductor.ir.MultiOutput",
      "(torch._inductor.ir.StorageBox) -> torch._inductor.ir.ExternKernelOut",
      "(torch._inductor.ir.StorageBox) -> torch._inductor.ir.InputBuffer",
      "(torch._inductor.ir.StorageBox) -> torch._inductor.ir.ComputedBuffer",
      "(torch._inductor.ir.StorageBox) -> torch._inductor.ir.ExternKernelAlloc",
      "(torch._inductor.ir.TensorBox) -> torch._inductor.ir.StorageBox",
      "(torch._inductor.ir.StorageBox) -> torch._inductor.ir.Pointwise"
    ],
    "samples": 295
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1373,
    "func_name": "is_reduction",
    "type_comments": [
      "(torch._inductor.ir.ConstantBuffer) -> bool",
      "(torch._inductor.ir.RandomSeeds) -> bool",
      "(torch._inductor.ir.Pointwise) -> bool",
      "(torch._inductor.ir.ExternKernelAlloc) -> bool",
      "(torch._inductor.ir.InputBuffer) -> bool",
      "(torch._inductor.ir.MultiOutput) -> bool",
      "(torch._inductor.ir.ExternKernelOut) -> bool",
      "(torch._inductor.ir.ComputedBuffer) -> bool"
    ],
    "samples": 225
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1376,
    "func_name": "can_fuse_reduction",
    "type_comments": [
      "(torch._inductor.ir.ConcatKernel) -> bool",
      "(torch._inductor.ir.StorageBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.Pointwise) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.ConstantBuffer) -> bool",
      "(torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.ExternKernelAlloc) -> bool",
      "(torch._inductor.ir.InputBuffer) -> bool",
      "(torch._inductor.ir.MultiOutput) -> bool",
      "(torch._inductor.ir.ExternKernelOut) -> bool",
      "(torch._inductor.ir.ComputedBuffer) -> bool"
    ],
    "samples": 334
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1391,
    "func_name": "should_lower_cat_input",
    "type_comments": [
      "(torch._inductor.ir.StorageBox) -> bool",
      "(torch._inductor.ir.StorageBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.Pointwise) -> bool",
      "(torch._inductor.ir.TensorBox) -> bool"
    ],
    "samples": 175
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1589,
    "func_name": "unsqueeze",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, sympy.core.numbers.One) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, int) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 346
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1606,
    "func_name": "_validate_dim",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, sympy.core.numbers.Integer, int) -> sympy.core.numbers.Integer",
      "(torch._inductor.ir.TensorBox, int, int) -> sympy.core.numbers.Zero",
      "(torch._inductor.ir.TensorBox, int, int) -> sympy.core.numbers.Integer",
      "(torch._inductor.ir.TensorBox, sympy.core.numbers.One, int) -> sympy.core.numbers.One",
      "(torch._inductor.ir.TensorBox, int, int) -> sympy.core.numbers.One",
      "(torch._inductor.ir.TensorBox, int, bool) -> sympy.core.numbers.Zero",
      "(torch._inductor.ir.TensorBox, int, bool) -> sympy.core.numbers.Integer"
    ],
    "samples": 538
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1629,
    "func_name": "handler",
    "type_comments": [
      "(*torch._inductor.ir.ReinterpretView) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(*torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(*Union[float, torch._inductor.ir.StorageBox]) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(*torch._inductor.ir.TensorBox) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(*Union[sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox]) -> torch._inductor.ir.TensorBox",
      "(*Union[int, torch._inductor.ir.TensorBox]) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(*torch._inductor.ir.StorageBox) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(*Union[float, torch._inductor.ir.ReinterpretView]) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(*Union[bool, torch._inductor.ir.TensorBox]) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(*Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]",
      "(*Union[float, torch._inductor.ir.TensorBox]) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]"
    ],
    "samples": 122
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1646,
    "func_name": "unsupported_input_tensor",
    "type_comments": [
      "(torch.nn.parameter.Parameter, None) -> bool",
      "(torch._subclasses.fake_tensor.FakeTensor, torch.fx.node.Node) -> bool",
      "(torch.Tensor, None) -> bool"
    ],
    "samples": 14918
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1660,
    "func_name": "unsupported_output_tensor",
    "type_comments": [
      "(torch.nn.parameter.Parameter, None) -> bool",
      "(torch._subclasses.fake_tensor.FakeTensor, torch.fx.node.Node) -> bool",
      "(torch.Tensor, None) -> bool"
    ],
    "samples": 7608
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1667,
    "func_name": "fallback_node_due_to_unsupported_type",
    "type_comments": [
      "(torch.fx.node.Node, bool) -> bool"
    ],
    "samples": 6208
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1676,
    "func_name": "check_skip_condition",
    "type_comments": [
      "(str, torch.fx.node.Node, bool) -> bool",
      "(torch.layout, torch.fx.node.Node, bool) -> bool",
      "(bool, torch.fx.node.Node, bool) -> bool",
      "(torch.device, torch.fx.node.Node, bool) -> bool",
      "(torch.dtype, torch.fx.node.Node, bool) -> bool",
      "(float, torch.fx.node.Node, bool) -> bool",
      "(int, torch.fx.node.Node, bool) -> bool",
      "(torch.memory_format, torch.fx.node.Node, bool) -> bool",
      "(None, torch.fx.node.Node, bool) -> bool",
      "(torch.fx.node.Node, torch.fx.node.Node, bool) -> bool"
    ],
    "samples": 16738
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2022,
    "func_name": "require_contiguous",
    "type_comments": [
      "(torch.fx.node.Node, *Union[bool, torch._inductor.ir.TensorBox]) -> Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, bool, int, bool], Dict]",
      "(torch.fx.node.Node, *Union[bool, torch._inductor.ir.TensorBox]) -> Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, bool, int, bool, None, bool], Dict]"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2620,
    "func_name": "_full",
    "type_comments": [
      "(int, torch.device, torch.dtype, List[sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(int, torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> torch._inductor.ir.TensorBox",
      "(int, torch.device, torch.dtype, Tuple[int, int, int]) -> torch._inductor.ir.TensorBox",
      "(float, torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.TensorBox",
      "(int, torch.device, torch.dtype, List) -> torch._inductor.ir.TensorBox",
      "(float, torch.device, torch.dtype, List) -> torch._inductor.ir.TensorBox",
      "(float, torch.device, torch.dtype, List[sympy.core.numbers.Integer]) -> torch._inductor.ir.TensorBox",
      "(bool, torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.TensorBox",
      "(int, torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.TensorBox",
      "(int, torch.device, torch.dtype, List[sympy.core.numbers.One]) -> torch._inductor.ir.TensorBox",
      "(float, torch.device, torch.dtype, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 147
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2627,
    "func_name": "inner_fn",
    "type_comments": [
      "(Tuple[]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[torch.utils._sympy.functions.Identity]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 968
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2655,
    "func_name": "tensor_constructor",
    "type_comments": [
      "(bool) -> function",
      "(float) -> function",
      "(int) -> function"
    ],
    "samples": 146
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2657,
    "func_name": "inner",
    "type_comments": [
      "(None, torch.dtype, torch.device, torch.layout, bool, None, *torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 146
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2811,
    "func_name": "full",
    "type_comments": [
      "(torch.fx.immutable_collections.immutable_list, int) -> torch._inductor.ir.TensorBox",
      "(torch.fx.immutable_collections.immutable_list, bool) -> torch._inductor.ir.TensorBox",
      "(torch.fx.immutable_collections.immutable_list, float) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 146
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 4956,
    "func_name": "_validate_reduction_axis",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, List[int]) -> List[int]",
      "(torch._inductor.ir.TensorBox, None) -> List[int]",
      "(torch._inductor.ir.TensorBox, int) -> List[int]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list) -> List[int]"
    ],
    "samples": 434
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 4974,
    "func_name": "_make_reduction_inner",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, None, None) -> Dict[str, Union[List[sympy.core.numbers.Integer], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, torch.dtype, torch.dtype) -> Dict[str, Union[List[sympy.core.numbers.Integer], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, List[int], bool, None, None) -> Dict[str, Union[List, function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, torch.dtype, torch.dtype) -> Dict[str, Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, torch.dtype, torch.dtype) -> Dict[str, Union[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, List[int], bool, None, None) -> Dict[str, Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, None, None) -> Dict[str, Union[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, None, None) -> Dict[str, Union[List[sympy.core.numbers.One], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, torch.dtype, torch.dtype) -> Dict[str, Union[List[sympy.core.symbol.Symbol], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, List[int], bool, None, None) -> Dict[str, Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, None, None) -> Dict[str, Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, List[int], bool, None, None) -> Dict[str, Union[List[sympy.core.numbers.Integer], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, List[int], bool, None, None) -> Dict[str, Union[List[sympy.core.numbers.One], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, None, None) -> Dict[str, Union[List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, List[int], bool, None, None) -> Dict[str, Union[List[Union[int, sympy.core.numbers.One]], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, None, bool, None, None) -> Dict[str, Union[List, function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, None, None) -> Dict[str, Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, List[int], bool, None, None) -> Dict[str, Union[List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, None, None) -> Dict[str, Union[List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, None, None) -> Dict[str, Union[List[Union[int, sympy.core.numbers.One]], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, int, bool, None, torch.dtype) -> Dict[str, Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, List[int], bool, None, None) -> Dict[str, Union[List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], function, torch.device, torch.dtype]]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, None, None) -> Dict[str, Union[List[sympy.core.mul.Mul], function, torch.device, torch.dtype]]"
    ],
    "samples": 366
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 4992,
    "func_name": "loader",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List, Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[int]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Tuple[sympy.core.numbers.Zero, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol], Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], List[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol], Tuple[int]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Tuple[int]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol], Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[int]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[int]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List, List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Tuple[sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add], List[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add], Tuple[int]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 1084
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5023,
    "func_name": "make_reduction",
    "type_comments": [
      "(str, torch.dtype) -> function",
      "(str, None) -> function"
    ],
    "samples": 263
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5024,
    "func_name": "inner",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, List[int], bool, None) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, None, bool, None) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, None) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, torch.dtype) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, int, bool, None) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 270
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5057,
    "func_name": "mean",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, None) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, None, bool, None) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 55
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5344,
    "func_name": "mul",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch.utils._sympy.functions.FloatTrueDiv) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, float) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 1132
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5354,
    "func_name": "get_constant_value",
    "type_comments": [
      "(torch._inductor.ir.ExpandView) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.ConstantBuffer) -> None",
      "(torch._inductor.ir.StorageBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.Constant) -> torch._inductor.ir.Constant",
      "(torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.IndexingConstant) -> None",
      "(torch._inductor.ir.ReinterpretView) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.ComputedBuffer) -> None",
      "(torch._inductor.ir.Pointwise) -> None",
      "(torch._inductor.ir.Pointwise) -> torch._inductor.ir.Constant"
    ],
    "samples": 1212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5385,
    "func_name": "div_prim",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.ExpandView) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 545
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5400,
    "func_name": "fn",
    "type_comments": [
      "(*torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 2680
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5406,
    "func_name": "div",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, float) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.ExpandView) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 544
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5447,
    "func_name": "sum_",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, None) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool, torch.dtype) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, List[int], bool, None) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 260
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/metrics.py",
    "line": 96,
    "func_name": "get_metric_fields",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 335
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/metrics.py",
    "line": 107,
    "func_name": "CachedMetricsHelper.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/metrics.py",
    "line": 112,
    "func_name": "CachedMetricsHelper.get_deltas",
    "type_comments": [
      "() -> torch._inductor.metrics.CachedMetricsDeltas"
    ],
    "samples": 153
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/metrics.py",
    "line": 135,
    "func_name": "MetricTable.add_row",
    "type_comments": [
      "(function) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/metrics.py",
    "line": 415,
    "func_name": "enabled_metric_tables",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/metrics.py",
    "line": 431,
    "func_name": "is_metric_table_enabled",
    "type_comments": [
      "(str) -> bool"
    ],
    "samples": 2548
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/metrics.py",
    "line": 435,
    "func_name": "get_metric_table",
    "type_comments": [
      "(str) -> torch._inductor.metrics.MetricTable"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 39,
    "func_name": "_arg_str",
    "type_comments": [
      "(str) -> str",
      "(float) -> str",
      "(torch.dtype) -> str",
      "(bool) -> str",
      "(int) -> str",
      "(sympy.core.numbers.Integer) -> str",
      "(Tuple[str, str, str]) -> str",
      "(sympy.core.numbers.Zero) -> str",
      "(sympy.core.add.Add) -> str",
      "(sympy.core.mul.Mul) -> str",
      "(sympy.core.symbol.Symbol) -> str",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> str"
    ],
    "samples": 27099
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 775,
    "func_name": "MockHandler.__getattr__",
    "type_comments": [
      "(str) -> function"
    ],
    "samples": 21926
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 779,
    "func_name": "inner",
    "type_comments": [
      "(*Union[torch.dtype, torch.utils._sympy.functions.FloatTrueDiv]) -> str",
      "(*Union[str, sympy.core.numbers.Integer]) -> str",
      "(*str) -> str",
      "(*Union[int, str]) -> str",
      "(*sympy.core.symbol.Symbol) -> str",
      "(*Union[sympy.core.add.Add, torch.dtype]) -> str",
      "(*Union[sympy.core.symbol.Symbol, torch.dtype]) -> str",
      "(*Union[str, sympy.core.symbol.Symbol]) -> str",
      "(*Union[bool, torch.dtype]) -> str",
      "(*Union[float, torch.dtype]) -> str",
      "(*Union[sympy.core.numbers.Integer, torch.dtype]) -> str",
      "(*sympy.core.add.Add) -> str",
      "(*Union[int, torch.dtype]) -> str",
      "(*Union[str, sympy.core.mul.Mul]) -> str",
      "(*Union[str, torch.dtype]) -> str",
      "(*Union[sympy.core.numbers.One, torch.dtype]) -> str",
      "(*Union[str, sympy.core.add.Add]) -> str",
      "(*Union[sympy.core.mul.Mul, torch.dtype]) -> str",
      "(*Union[str, sympy.core.numbers.Zero]) -> str",
      "(*Union[Tuple[str, str, str], str, torch.dtype]) -> str"
    ],
    "samples": 21926
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 786,
    "func_name": "masked",
    "type_comments": [
      "(str, torch._inductor.ir.LoopBodyBlock, float) -> str",
      "(str, function, float) -> str",
      "(str, torch._inductor.ir.LoopBodyBlock, float) -> pyannotate_runtime.collect_types.UnknownType",
      "(str, function, int) -> str",
      "(str, function, float) -> pyannotate_runtime.collect_types.UnknownType",
      "(str, torch._inductor.ir.LoopBodyBlock, int) -> str"
    ],
    "samples": 657
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 815,
    "func_name": "inner",
    "type_comments": [
      "(*Union[str, torch._inductor.codegen.triton.TritonCSEVariable]) -> str",
      "(*torch._inductor.codegen.triton.TritonCSEVariable) -> str",
      "(*str) -> str",
      "(*Union[int, torch._inductor.codegen.triton.TritonCSEVariable]) -> str"
    ],
    "samples": 20780
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 854,
    "func_name": "KernelFormatterHandler.__init__",
    "type_comments": [
      "(torch._inductor.ops_handler.MockHandler) -> None",
      "(torch._inductor.dependencies._OpCounter) -> None"
    ],
    "samples": 10164
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 886,
    "func_name": "KernelFormatterHandler.__getattr__",
    "type_comments": [
      "(str) -> function"
    ],
    "samples": 27735
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 887,
    "func_name": "inner",
    "type_comments": [
      "(*Union[torch.dtype, torch.utils._sympy.functions.FloatTrueDiv]) -> str",
      "(*Union[bool, sympy.core.numbers.One, sympy.core.numbers.Zero]) -> str",
      "(*Union[str, sympy.core.numbers.Integer]) -> str",
      "(*Optional[Union[Tuple[str, str, str], sympy.core.add.Add]]) -> str",
      "(*str) -> str",
      "(*Union[int, str]) -> str",
      "(*sympy.core.symbol.Symbol) -> str",
      "(*Optional[Union[str, sympy.core.numbers.Zero]]) -> str",
      "(*Union[sympy.core.add.Add, torch.dtype]) -> str",
      "(*Union[sympy.core.symbol.Symbol, torch.dtype]) -> str",
      "(*Union[str, sympy.core.symbol.Symbol]) -> str",
      "(*Union[str, torch.utils._sympy.functions.ModularIndexing]) -> str",
      "(*Union[float, torch.dtype]) -> str",
      "(*Union[float, function, str]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[sympy.core.numbers.Integer, torch.dtype]) -> str",
      "(*Optional[Union[str, sympy.core.symbol.Symbol]]) -> str",
      "(*sympy.core.add.Add) -> str",
      "(*Union[int, torch.dtype]) -> str",
      "(*Union[bool, str, sympy.core.numbers.Integer]) -> sympy.core.symbol.Symbol",
      "(*Union[str, torch.dtype]) -> str",
      "(*Union[sympy.core.numbers.Zero, torch.dtype]) -> str",
      "(*Union[sympy.core.numbers.One, torch.dtype]) -> str",
      "(*Union[str, sympy.core.add.Add]) -> str",
      "(*Optional[Union[Tuple[str, str, str], sympy.core.symbol.Symbol]]) -> str",
      "(*Union[str, torch.utils._sympy.functions.Identity]) -> str",
      "(*Union[sympy.core.mul.Mul, torch.dtype]) -> str",
      "(*Optional[Union[str, sympy.core.add.Add]]) -> str",
      "(*Union[str, sympy.core.numbers.Zero]) -> str"
    ],
    "samples": 27735
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 892,
    "func_name": "write",
    "type_comments": [
      "(str) -> str"
    ],
    "samples": 27671
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 902,
    "func_name": "KernelFormatterHandler.reduction",
    "type_comments": [
      "(torch.dtype, torch.dtype, str, Tuple[str, str, str]) -> Tuple[str, str, str]",
      "(torch.dtype, torch.dtype, str, str) -> Tuple[str, str, str]",
      "(torch.dtype, torch.dtype, str, str) -> str"
    ],
    "samples": 1052
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 926,
    "func_name": "WrapperHandler.__init__",
    "type_comments": [
      "(torch._inductor.ir:LoopBodyBlock.__init__.<locals>.CaptureIndexing) -> None",
      "(torch._inductor.codegen.common:Kernel.__enter__.<locals>.CSEProxy) -> None",
      "(torch.fx.proxy.Proxy) -> None"
    ],
    "samples": 6513
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 929,
    "func_name": "WrapperHandler.__getattr__",
    "type_comments": [
      "(str) -> pyannotate_runtime.collect_types.UnknownType",
      "(str) -> function",
      "(str) -> method",
      "(str) -> torch.fx.proxy.Attribute"
    ],
    "samples": 19865
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 955,
    "func_name": "OpCounterCSE.__init__",
    "type_comments": [
      "(torch._inductor.ops_handler.MockHandler) -> None"
    ],
    "samples": 2731
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 961,
    "func_name": "OpCounterCSE.__getattr__",
    "type_comments": [
      "(str) -> function"
    ],
    "samples": 15313
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 962,
    "func_name": "inner",
    "type_comments": [
      "(*Union[torch.dtype, torch.utils._sympy.functions.FloatTrueDiv]) -> str",
      "(*Union[str, sympy.core.numbers.Integer]) -> str",
      "(*str) -> str",
      "(*Union[int, str]) -> str",
      "(*sympy.core.symbol.Symbol) -> str",
      "(*Union[sympy.core.add.Add, torch.dtype]) -> str",
      "(*Union[sympy.core.symbol.Symbol, torch.dtype]) -> str",
      "(*Union[str, sympy.core.symbol.Symbol]) -> str",
      "(*Union[str, torch.utils._sympy.functions.ModularIndexing]) -> str",
      "(*Union[bool, torch.dtype]) -> str",
      "(*Union[float, torch.dtype]) -> str",
      "(*Union[float, function, str]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[sympy.core.numbers.Integer, torch.dtype]) -> str",
      "(*sympy.core.add.Add) -> str",
      "(*Union[int, torch.dtype]) -> str",
      "(*Union[bool, str, sympy.core.numbers.Integer]) -> sympy.core.symbol.Symbol",
      "(*Union[str, sympy.core.mul.Mul]) -> str",
      "(*Union[str, torch.dtype]) -> str",
      "(*Union[sympy.core.numbers.One, torch.dtype]) -> str",
      "(*Union[str, sympy.core.add.Add]) -> str",
      "(*Union[sympy.core.mul.Mul, torch.dtype]) -> str",
      "(*Union[str, sympy.core.numbers.Zero]) -> str",
      "(*Union[torch.dtype, torch.utils._sympy.functions.ModularIndexing]) -> str"
    ],
    "samples": 15312
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 967,
    "func_name": "count",
    "type_comments": [
      "(str) -> str"
    ],
    "samples": 15292
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/optimize_indexing.py",
    "line": 89,
    "func_name": "indexing_dtype_strength_reduction",
    "type_comments": [
      "(torch._inductor.ir.LoopBody) -> None"
    ],
    "samples": 1465
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 162,
    "func_name": "Match.__init__",
    "type_comments": [
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.ListOf, None, None) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.CallFunction, None, None) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.CallFunctionVarArgs, None, None) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.KeywordArg, None, Dict[str, torch.fx.immutable_collections.immutable_list]) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.KeywordArg, None, Dict[str, torch.dtype]) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.KeywordArg, None, Dict[str, int]) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.KeywordArg, None, Dict[str, torch.fx.node.Node]) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.KeywordArg, None, Dict[str, float]) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.Arg, List[torch.fx.node.Node], None) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.Arg, List[torch.fx.immutable_collections.immutable_list], None) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.CallModuleVarArgs, None, None) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.Ignored, None, None) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.Arg, List[int], None) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.Arg, List[bool], None) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.ExclusiveKeywordArg, None, Dict[str, torch.fx.node.Node]) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.Arg, List, None) -> None",
      "(torch._inductor.pattern_matcher.MatchContext, torch._inductor.pattern_matcher.KeywordArg, None, Dict[str, bool]) -> None"
    ],
    "samples": 20502
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 181,
    "func_name": "graph",
    "type_comments": [
      "() -> torch.fx.graph.Graph"
    ],
    "samples": 778
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 185,
    "func_name": "Match.extend",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> None"
    ],
    "samples": 4790
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 195,
    "func_name": "Match.bundle",
    "type_comments": [
      "() -> torch._inductor.pattern_matcher.Match"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 200,
    "func_name": "Match.__repr__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 203,
    "func_name": "Match.erase_nodes",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 347
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 208,
    "func_name": "Match.output_nodes",
    "type_comments": [
      "() -> List[torch.fx.node.Node]"
    ],
    "samples": 1156
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 214,
    "func_name": "Match.output_node",
    "type_comments": [
      "() -> torch.fx.node.Node"
    ],
    "samples": 911
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 224,
    "func_name": "Match.replace_by_example",
    "type_comments": [
      "(function, List[Union[int, torch.fx.immutable_collections.immutable_list]], None, bool) -> None",
      "(function, List[torch.fx.immutable_collections.immutable_list], None, bool) -> None",
      "(function, List[torch.fx.node.Node], None, bool) -> None"
    ],
    "samples": 233
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 259,
    "func_name": "FailedMatch.__init__",
    "type_comments": [
      "(str, *Union[int, torch._inductor.pattern_matcher.CallFunction]) -> None",
      "(str, *Union[torch._inductor.pattern_matcher.CallFunction, torch.fx.node.Node]) -> None",
      "(str, *Union[float, torch._inductor.pattern_matcher.CallFunction]) -> None",
      "(str, *torch._inductor.pattern_matcher.CallFunction) -> None",
      "(str, *torch.utils._pytree.TreeSpec) -> None",
      "(str) -> None"
    ],
    "samples": 31467
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 273,
    "func_name": "FailedMatch.__bool__",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 45540
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 280,
    "func_name": "is_match",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool",
      "(torch._inductor.pattern_matcher.FailedMatch) -> bool"
    ],
    "samples": 27751
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 298,
    "func_name": "MatchContext.__init__",
    "type_comments": [
      "(List[torch._inductor.pattern_matcher.CallFunctionVarArgs], None, torch.fx.graph.Graph) -> None",
      "(List[torch._inductor.pattern_matcher.CallFunction], Dict, torch.fx.graph.Graph) -> None",
      "(List[torch._inductor.pattern_matcher.CallFunction], Dict[torch._inductor.pattern_matcher.CallFunction, torch.fx.node.Node], torch.fx.graph.Graph) -> None",
      "(List[torch._inductor.pattern_matcher.CallModuleVarArgs], None, torch.fx.graph.Graph) -> None",
      "(List[torch._inductor.pattern_matcher.CallFunction], None, torch.fx.graph.Graph) -> None"
    ],
    "samples": 31581
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 310,
    "func_name": "MatchContext.match",
    "type_comments": [
      "(torch._inductor.pattern_matcher.ExclusiveKeywordArg, torch.fx.node.Node) -> torch._inductor.pattern_matcher.Match",
      "(torch._inductor.pattern_matcher.CallFunctionVarArgs, torch.fx.node.Node) -> torch._inductor.pattern_matcher.FailedMatch",
      "(torch._inductor.pattern_matcher.KeywordArg, int) -> torch._inductor.pattern_matcher.Match",
      "(torch._inductor.pattern_matcher.CallFunction, float) -> torch._inductor.pattern_matcher.FailedMatch",
      "(torch._inductor.pattern_matcher.ListOf, torch.fx.immutable_collections.immutable_list) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.pattern_matcher.ExclusiveKeywordArg, torch.fx.node.Node) -> torch._inductor.pattern_matcher.FailedMatch",
      "(torch._inductor.pattern_matcher.Arg, torch.fx.node.Node) -> torch._inductor.pattern_matcher.Match",
      "(torch._inductor.pattern_matcher.KeywordArg, torch.fx.immutable_collections.immutable_list) -> torch._inductor.pattern_matcher.Match",
      "(torch._inductor.pattern_matcher.Ignored, torch.fx.node.Node) -> torch._inductor.pattern_matcher.Match",
      "(torch._inductor.pattern_matcher.Arg, bool) -> torch._inductor.pattern_matcher.Match",
      "(torch._inductor.pattern_matcher.CallFunction, torch.fx.node.Node) -> torch._inductor.pattern_matcher.FailedMatch",
      "(torch._inductor.pattern_matcher.CallFunctionVarArgs, torch.fx.node.Node) -> torch._inductor.pattern_matcher.Match",
      "(torch._inductor.pattern_matcher.CallModuleVarArgs, torch.fx.node.Node) -> torch._inductor.pattern_matcher.Match",
      "(torch._inductor.pattern_matcher.KeywordArg, torch.dtype) -> torch._inductor.pattern_matcher.Match",
      "(torch._inductor.pattern_matcher.CallFunction, int) -> torch._inductor.pattern_matcher.FailedMatch",
      "(torch._inductor.pattern_matcher.CallFunction, torch.fx.node.Node) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.pattern_matcher.Arg, int) -> torch._inductor.pattern_matcher.Match",
      "(torch._inductor.pattern_matcher.Arg, torch.fx.immutable_collections.immutable_list) -> torch._inductor.pattern_matcher.Match",
      "(torch._inductor.pattern_matcher.MultiOutputPattern, torch.fx.node.Node) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.pattern_matcher.KeywordArg, torch.fx.node.Node) -> torch._inductor.pattern_matcher.Match"
    ],
    "samples": 35917
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 322,
    "func_name": "MatchContext.filter_multi_user_patterns",
    "type_comments": [
      "() -> Dict"
    ],
    "samples": 189
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 339,
    "func_name": "PatternExpr.match",
    "type_comments": [
      "(torch.fx.node.Node) -> torch._inductor.pattern_matcher.Match",
      "(torch.fx.node.Node) -> torch._inductor.pattern_matcher.FailedMatch"
    ],
    "samples": 30319
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 345,
    "func_name": "PatternExpr.has_multiple_users",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 351,
    "func_name": "PatternExpr.find_anchor_nodes",
    "type_comments": [
      "(torch._inductor.pattern_matcher.MatchContext, Set) -> Iterator[torch.fx.node.Node]",
      "(torch._inductor.pattern_matcher.MatchContext, Set) -> Iterator",
      "(torch._inductor.pattern_matcher.MatchContext, Set[torch.fx.node.Node]) -> Iterator"
    ],
    "samples": 883
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 372,
    "func_name": "Arg._match",
    "type_comments": [
      "(int, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(None, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(torch.fx.node.Node, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(torch.fx.immutable_collections.immutable_list, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(bool, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match"
    ],
    "samples": 503
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 381,
    "func_name": "Ignored._match",
    "type_comments": [
      "(torch.dtype, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(int, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(torch.fx.node.Node, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(float, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(torch.device, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(torch.fx.immutable_collections.immutable_list, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match"
    ],
    "samples": 461
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 384,
    "func_name": "Ignored.__repr__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 305
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 387,
    "func_name": "Ignored.pretty_print",
    "type_comments": [
      "(torch._inductor.pattern_matcher.PatternPrettyPrinter) -> str"
    ],
    "samples": 3233
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 396,
    "func_name": "KeywordArg.__init__",
    "type_comments": [
      "(str) -> None"
    ],
    "samples": 3658
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 400,
    "func_name": "KeywordArg.__repr__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 915
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 403,
    "func_name": "KeywordArg._match",
    "type_comments": [
      "(torch.dtype, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(int, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(torch.fx.node.Node, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(torch.fx.immutable_collections.immutable_list, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(float, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(bool, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match"
    ],
    "samples": 3900
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 445,
    "func_name": "_TargetExpr.__init__",
    "type_comments": [
      "(torch._higher_order_ops.auto_functionalize.AutoFunctionalized, int) -> None",
      "(torch._ops.OpOverload, int) -> None",
      "(List[function], int) -> None",
      "(builtin_function_or_method, int) -> None",
      "(List[torch._ops.OpOverload], int) -> None",
      "(function, int) -> None",
      "(List[type], int) -> None",
      "(torch._ops.OpOverloadPacket, int) -> None"
    ],
    "samples": 28387
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 463,
    "func_name": "_TargetExpr.fns_repr",
    "type_comments": [
      "() -> str"
    ],
    "samples": 8494
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 486,
    "func_name": "_TargetExpr.has_multiple_users",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 151
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 494,
    "func_name": "_TargetExpr._match_fns",
    "type_comments": [
      "(int) -> bool",
      "(torch.fx.node.Node) -> bool",
      "(float) -> bool"
    ],
    "samples": 34666
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 501,
    "func_name": "_TargetExpr._match_users",
    "type_comments": [
      "(torch.fx.node.Node, torch._inductor.pattern_matcher.MatchContext) -> bool"
    ],
    "samples": 19933
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 526,
    "func_name": "_TargetArgsExpr.__init__",
    "type_comments": [
      "(torch._ops.OpOverload, int, *torch._inductor.pattern_matcher.CallFunction) -> None",
      "(torch._ops.OpOverload, int, *Union[bool, torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.Ignored]) -> None",
      "(torch._ops.OpOverload, int, *torch._inductor.pattern_matcher.Arg) -> None",
      "(torch._ops.OpOverload, int, *Union[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.KeywordArg]) -> None",
      "(torch._ops.OpOverload, int, *torch._inductor.pattern_matcher.KeywordArg) -> None",
      "(torch._ops.OpOverloadPacket, int, *torch._inductor.pattern_matcher.CallFunction) -> None",
      "(torch._ops.OpOverload, int, *Union[torch._inductor.pattern_matcher.ExclusiveKeywordArg, torch._inductor.pattern_matcher.KeywordArg]) -> None",
      "(torch._ops.OpOverload, int, *Union[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.Ignored]) -> None",
      "(torch._ops.OpOverloadPacket, int, *Union[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.KeywordArg]) -> None",
      "(torch._ops.OpOverloadPacket, int, *Union[float, torch._inductor.pattern_matcher.CallFunction]) -> None",
      "(torch._ops.OpOverloadPacket, int, *torch._inductor.pattern_matcher.Arg) -> None",
      "(torch._ops.OpOverload, int, *Union[torch._inductor.pattern_matcher.Ignored, torch._inductor.pattern_matcher.KeywordArg]) -> None"
    ],
    "samples": 5872
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 545,
    "func_name": "simple_flatten",
    "type_comments": [
      "(Tuple[torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.Ignored], Dict) -> Tuple[Tuple[torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.Ignored], Tuple[int]]",
      "(Tuple[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.CallFunction], Dict) -> Tuple[Tuple[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.CallFunction], Tuple[int]]",
      "(Tuple[torch._inductor.pattern_matcher.Ignored, torch._inductor.pattern_matcher.KeywordArg], Dict) -> Tuple[Tuple[torch._inductor.pattern_matcher.Ignored, torch._inductor.pattern_matcher.KeywordArg], Tuple[int]]",
      "(Tuple[torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.KeywordArg], Dict) -> Tuple[Tuple[torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.KeywordArg], Tuple[int]]",
      "(Tuple[torch._inductor.pattern_matcher.CallFunction], Dict[str, torch._inductor.pattern_matcher.KeywordArg]) -> Tuple[Tuple[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.KeywordArg], Tuple[int, str]]",
      "(Tuple[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.Ignored, bool], Dict) -> Tuple[Tuple[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.Ignored, bool], Tuple[int]]",
      "(Tuple[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.Ignored], Dict) -> Tuple[Tuple[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.Ignored], Tuple[int]]",
      "(Tuple[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.KeywordArg], Dict) -> Tuple[Tuple[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.KeywordArg], Tuple[int]]"
    ],
    "samples": 23420
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 553,
    "func_name": "pytree_flatten",
    "type_comments": [
      "(Tuple[List, torch._inductor.pattern_matcher.Ignored], Dict[str, Union[bool, torch._inductor.pattern_matcher.Ignored]]) -> Tuple[List[Union[bool, torch._inductor.pattern_matcher.Ignored]], torch.utils._pytree.TreeSpec]",
      "(Tuple[torch.fx.immutable_collections.immutable_list, int], Dict) -> Tuple[List[torch.fx.node.Node], torch.utils._pytree.TreeSpec]",
      "(Tuple[torch.fx.immutable_collections.immutable_list, int], Dict) -> Tuple[List[Union[int, torch.fx.node.Node]], torch.utils._pytree.TreeSpec]",
      "(Tuple[torch.fx.node.Node, torch.fx.immutable_collections.immutable_list, torch.fx.node.Node, bool], Dict) -> Tuple[List[Union[bool, torch.fx.node.Node]], torch.utils._pytree.TreeSpec]",
      "(Tuple[torch.fx.node.Node, torch.fx.immutable_collections.immutable_list], Dict) -> Tuple[List[torch.fx.node.Node], torch.utils._pytree.TreeSpec]"
    ],
    "samples": 395
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 557,
    "func_name": "norm_spec",
    "type_comments": [
      "(torch.utils._pytree.TreeSpec) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.utils._pytree.TreeSpec) -> torch.utils._pytree.TreeSpec",
      "(torch.utils._pytree.LeafSpec) -> torch.utils._pytree.LeafSpec"
    ],
    "samples": 842
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 571,
    "func_name": "_TargetArgsExpr.__repr__",
    "type_comments": [
      "() -> str",
      "() -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 244
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 583,
    "func_name": "_TargetArgsExpr.pretty_print",
    "type_comments": [
      "(torch._inductor.pattern_matcher.PatternPrettyPrinter) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.pattern_matcher.PatternPrettyPrinter) -> str"
    ],
    "samples": 4407
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 597,
    "func_name": "_TargetArgsExpr._match",
    "type_comments": [
      "(int, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.FailedMatch",
      "(float, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.FailedMatch",
      "(torch.fx.node.Node, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(torch.fx.node.Node, torch._inductor.pattern_matcher.MatchContext) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.fx.node.Node, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.FailedMatch"
    ],
    "samples": 23671
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 647,
    "func_name": "_TargetArgsExpr.find_anchor_nodes",
    "type_comments": [
      "(torch._inductor.pattern_matcher.MatchContext, Set) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.pattern_matcher.MatchContext, Set[torch.fx.node.Node]) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.pattern_matcher.MatchContext, Set) -> Iterator",
      "(torch._inductor.pattern_matcher.MatchContext, Set[torch.fx.node.Node]) -> Iterator",
      "(torch._inductor.pattern_matcher.MatchContext, Set) -> Iterator[torch.fx.node.Node]",
      "(torch._inductor.pattern_matcher.MatchContext, Set[torch.fx.node.Node]) -> Iterator[torch.fx.node.Node]"
    ],
    "samples": 788
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 713,
    "func_name": "_TargetExprVarArgs._match",
    "type_comments": [
      "(torch.fx.node.Node, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(torch.fx.node.Node, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.FailedMatch"
    ],
    "samples": 24188
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 745,
    "func_name": "ListOf.__init__",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, bool) -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 754,
    "func_name": "ListOf._match",
    "type_comments": [
      "(torch.fx.immutable_collections.immutable_list, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.FailedMatch"
    ],
    "samples": 149
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 790,
    "func_name": "MultiOutputPattern.__init__",
    "type_comments": [
      "(List[torch._inductor.pattern_matcher.CallFunction]) -> None"
    ],
    "samples": 381
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 797,
    "func_name": "fns",
    "type_comments": [
      "() -> List[torch._ops.OpOverload]"
    ],
    "samples": 427
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 806,
    "func_name": "MultiOutputPattern.pretty_print",
    "type_comments": [
      "(torch._inductor.pattern_matcher.PatternPrettyPrinter) -> str"
    ],
    "samples": 366
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 813,
    "func_name": "MultiOutputPattern._match",
    "type_comments": [
      "(torch.fx.node.Node, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(torch.fx.node.Node, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.FailedMatch"
    ],
    "samples": 10079
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 829,
    "func_name": "MultiOutputPattern._match_from_anchors",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.FailedMatch"
    ],
    "samples": 497
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 842,
    "func_name": "MultiOutputPattern.match",
    "type_comments": [
      "(torch.fx.node.Node) -> torch._inductor.pattern_matcher.Match",
      "(torch.fx.node.Node) -> torch._inductor.pattern_matcher.FailedMatch"
    ],
    "samples": 10079
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 905,
    "func_name": "PatternPrettyPrinter.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 366
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 910,
    "func_name": "run",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, str) -> str",
      "(torch._inductor.pattern_matcher.MultiOutputPattern, str) -> str"
    ],
    "samples": 366
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 929,
    "func_name": "PatternPrettyPrinter.pretty_print",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction) -> str",
      "(torch._inductor.pattern_matcher.CallFunction) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.pattern_matcher.KeywordArg) -> str",
      "(None) -> str",
      "(bool) -> str",
      "(List) -> str",
      "(torch._inductor.pattern_matcher.Ignored) -> str",
      "(torch.memory_format) -> str"
    ],
    "samples": 9333
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 940,
    "func_name": "PatternPrettyPrinter.memoize",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.pattern_matcher.CallFunction) -> str"
    ],
    "samples": 4346
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 965,
    "func_name": "PatternEntry.register",
    "type_comments": [
      "(torch._inductor.pattern_matcher.PatternMatcherPass, torch._ops.OpOverload, bool) -> None",
      "(torch._inductor.pattern_matcher.PatternMatcherPass, torch._higher_order_ops.auto_functionalize.AutoFunctionalized, bool) -> None",
      "(torch._inductor.pattern_matcher.PatternMatcherPass, None, bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.pattern_matcher.PatternMatcherPass, function, bool) -> None",
      "(collections.defaultdict, None, bool) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.pattern_matcher.PatternMatcherPass, torch._ops.OpOverloadPacket, bool) -> None"
    ],
    "samples": 1964
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 991,
    "func_name": "LoweringPatternEntry.apply",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, torch.fx.graph.Graph, torch.fx.node.Node) -> None"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1009,
    "func_name": "GraphPatternEntry.apply",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, torch.fx.graph.Graph, torch.fx.node.Node) -> None"
    ],
    "samples": 831
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1018,
    "func_name": "replace_with_graph",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, torch.fx.graph.Graph, torch.fx.GraphModule, List[Union[int, torch.fx.node.Node]]) -> None",
      "(torch._inductor.pattern_matcher.Match, torch.fx.graph.Graph, torch.fx.GraphModule, List[torch.fx.immutable_collections.immutable_list]) -> None",
      "(torch._inductor.pattern_matcher.Match, torch.fx.graph.Graph, torch.fx.GraphModule, List[Union[float, torch.fx.node.Node]]) -> None",
      "(torch._inductor.pattern_matcher.Match, torch.fx.graph.Graph, torch.fx.GraphModule, List[Union[int, torch.fx.immutable_collections.immutable_list]]) -> None",
      "(torch._inductor.pattern_matcher.Match, torch.fx.graph.Graph, torch.fx.GraphModule, List[torch.fx.node.Node]) -> None"
    ],
    "samples": 241
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1028,
    "func_name": "Replacer",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 241
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1033,
    "func_name": "Replacer.run_node",
    "type_comments": [
      "(torch.fx.node.Node) -> torch.fx.immutable_collections.immutable_list",
      "(torch.fx.node.Node) -> torch.fx.node.Node",
      "(torch.fx.node.Node) -> int"
    ],
    "samples": 548
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1095,
    "func_name": "replace",
    "type_comments": [
      "(None, None) -> None",
      "(torch.fx.node.Node, torch.fx.node.Node) -> None"
    ],
    "samples": 248
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1182,
    "func_name": "_return_true",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 770
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1194,
    "func_name": "register_replacement",
    "type_comments": [
      "(function, function, Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], function, torch._inductor.pattern_matcher.PatternMatcherPass, function, Dict, Tuple[], torch._inductor.pattern_matcher.CallFunction) -> torch._inductor.pattern_matcher.CallFunction",
      "(function, function, Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], function, torch._inductor.pattern_matcher.PatternMatcherPass, function, Dict, Tuple[], torch._inductor.pattern_matcher.CallFunction) -> torch._inductor.pattern_matcher.CallFunction",
      "(function, function, Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], function, torch._inductor.pattern_matcher.PatternMatcherPass, function, Dict[str, float], Tuple[], torch._inductor.pattern_matcher.MultiOutputPattern) -> torch._inductor.pattern_matcher.MultiOutputPattern",
      "(function, function, Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor], function, torch._inductor.pattern_matcher.PatternMatcherPass, function, Dict, Tuple[], torch._inductor.pattern_matcher.MultiOutputPattern) -> torch._inductor.pattern_matcher.MultiOutputPattern"
    ],
    "samples": 366
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1220,
    "func_name": "check_fn",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 470
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1463,
    "func_name": "gen_register_replacement",
    "type_comments": [
      "(str, function, function, List[torch._subclasses.fake_tensor.FakeTensor], function, torch._inductor.pattern_matcher.PatternMatcherPass, function, Dict[str, float], Tuple[], bool) -> None",
      "(str, function, function, List[torch._subclasses.fake_tensor.FakeTensor], function, torch._inductor.pattern_matcher.PatternMatcherPass, function, Dict, Tuple[], bool) -> None"
    ],
    "samples": 366
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1520,
    "func_name": "gen_pattern",
    "type_comments": [
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], function, None, Tuple[str, str, str, str, str, str]) -> torch._inductor.pattern_matcher.MultiOutputPattern",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], function, None, Tuple[str, str]) -> torch._inductor.pattern_matcher.MultiOutputPattern",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], function, Dict[str, int], Tuple[]) -> torch._inductor.pattern_matcher.MultiOutputPattern",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], function, None, Tuple[]) -> torch._inductor.pattern_matcher.MultiOutputPattern",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], function, None, Tuple[str, str, str]) -> torch._inductor.pattern_matcher.MultiOutputPattern"
    ],
    "samples": 167
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1552,
    "func_name": "register_lowering_pattern",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, function, torch._inductor.pattern_matcher.PatternMatcherPass, bool) -> function"
    ],
    "samples": 540
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1565,
    "func_name": "decorator",
    "type_comments": [
      "(function) -> function"
    ],
    "samples": 540
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1576,
    "func_name": "register_graph_pattern",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallModuleVarArgs, function, torch._inductor.pattern_matcher.PatternMatcherPass, bool) -> function",
      "(torch._inductor.pattern_matcher.CallFunctionVarArgs, function, torch._inductor.pattern_matcher.PatternMatcherPass, bool) -> function",
      "(torch._inductor.pattern_matcher.CallFunction, function, torch._inductor.pattern_matcher.PatternMatcherPass, bool) -> function"
    ],
    "samples": 519
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1588,
    "func_name": "decorator",
    "type_comments": [
      "(function) -> function"
    ],
    "samples": 519
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1608,
    "func_name": "is_mutation_op",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 7561
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1618,
    "func_name": "get_mutation_region_id",
    "type_comments": [
      "(torch.fx.graph.Graph, torch.fx.node.Node) -> int"
    ],
    "samples": 1739
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1631,
    "func_name": "should_compute_mutation_region_ids",
    "type_comments": [
      "(torch.fx.graph.Graph) -> bool"
    ],
    "samples": 986
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1635,
    "func_name": "compute_mutation_region_ids",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 433
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1644,
    "func_name": "PatternMatcherPass.__init__",
    "type_comments": [
      "(None) -> None"
    ],
    "samples": 470
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1654,
    "func_name": "PatternMatcherPass.__getitem__",
    "type_comments": [
      "(Tuple[str, torch._ops.OpOverloadPacket]) -> List",
      "(Tuple[str, torch._ops.OpOverload]) -> List",
      "(Tuple[str, function]) -> List",
      "(Tuple[str, torch._ops.OpOverload]) -> List[torch._inductor.pattern_matcher.LoweringPatternEntry]",
      "(Tuple[str, torch._ops.OpOverloadPacket]) -> List[torch._inductor.pattern_matcher.LoweringPatternEntry]",
      "(Tuple[str, torch._higher_order_ops.auto_functionalize.AutoFunctionalized]) -> List",
      "(Tuple[str, type]) -> List",
      "(Tuple[str, torch._ops.OpOverload]) -> List[Union[torch._inductor.pattern_matcher.GraphPatternEntry, torch._inductor.pattern_matcher.ReplacementPatternEntry]]"
    ],
    "samples": 1481
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1657,
    "func_name": "PatternMatcherPass.apply",
    "type_comments": [
      "(torch.fx.GraphModule) -> int",
      "(torch.fx.graph.Graph) -> int",
      "(torch.fx.graph.Graph) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 986
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1727,
    "func_name": "fx_to_pattern",
    "type_comments": [
      "(torch.fx.GraphModule, Tuple[], List[str], None, Tuple[str, str, str, str, str, str]) -> torch._inductor.pattern_matcher.MultiOutputPattern",
      "(torch.fx.GraphModule, Tuple[type, type, type, type, type], List[str], Dict, Tuple[str, str, str]) -> torch._inductor.pattern_matcher.MultiOutputPattern",
      "(torch.fx.GraphModule, Tuple[type, type, type, type, type], List[str], Dict[str, int], Tuple[]) -> torch._inductor.pattern_matcher.MultiOutputPattern",
      "(torch.fx.GraphModule, Tuple[type, type, type, type, type], List[str], Dict, Tuple[str, str, str, str, str, str]) -> torch._inductor.pattern_matcher.MultiOutputPattern",
      "(torch.fx.GraphModule, Tuple[type, type, type, type, type], List[str], Dict, Tuple[str, str]) -> torch._inductor.pattern_matcher.MultiOutputPattern",
      "(torch.fx.GraphModule, Tuple[type, type, type, type, type], List[str], Dict, Tuple[]) -> torch._inductor.pattern_matcher.MultiOutputPattern"
    ],
    "samples": 182
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1744,
    "func_name": "process_arg",
    "type_comments": [
      "(torch.device) -> torch._inductor.pattern_matcher.Ignored",
      "(torch._inductor.pattern_matcher.Ignored) -> torch._inductor.pattern_matcher.Ignored",
      "(torch._inductor.pattern_matcher.KeywordArg) -> torch._inductor.pattern_matcher.KeywordArg",
      "(bool) -> bool",
      "(torch._inductor.pattern_matcher.ExclusiveKeywordArg) -> torch._inductor.pattern_matcher.ExclusiveKeywordArg",
      "(int) -> torch._inductor.pattern_matcher.Ignored"
    ],
    "samples": 349
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1755,
    "func_name": "Converter",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 182
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1760,
    "func_name": "Converter.placeholder",
    "type_comments": [
      "(str, Tuple[], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.pattern_matcher.ExclusiveKeywordArg",
      "(str, Tuple[], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.pattern_matcher.KeywordArg"
    ],
    "samples": 285
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1777,
    "func_name": "Converter.call_function",
    "type_comments": [
      "(torch._ops.OpOverload, Tuple[int], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.pattern_matcher.CallFunction",
      "(torch._ops.OpOverload, Tuple[torch._inductor.pattern_matcher.ExclusiveKeywordArg, torch._inductor.pattern_matcher.KeywordArg, torch._inductor.pattern_matcher.ExclusiveKeywordArg], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.pattern_matcher.CallFunction",
      "(torch._ops.OpOverload, Tuple[torch._inductor.pattern_matcher.CallFunction, int, int, int], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.pattern_matcher.CallFunction",
      "(torch._ops.OpOverload, Tuple[torch._inductor.pattern_matcher.KeywordArg, torch.fx.immutable_collections.immutable_list, torch._inductor.pattern_matcher.KeywordArg, bool], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 323
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1787,
    "func_name": "Converter.run_node",
    "type_comments": [
      "(torch.fx.node.Node) -> torch._inductor.pattern_matcher.CallFunction",
      "(torch.fx.node.Node) -> torch._inductor.pattern_matcher.KeywordArg",
      "(torch.fx.node.Node) -> torch._inductor.pattern_matcher.ExclusiveKeywordArg"
    ],
    "samples": 338
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1803,
    "func_name": "fwd_only",
    "type_comments": [
      "(function, torch.fx.immutable_collections.immutable_list, bool) -> torch.fx.GraphModule",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor], bool) -> torch.fx.GraphModule",
      "(function, List[Union[int, torch._subclasses.fake_tensor.FakeTensor]], bool) -> torch.fx.GraphModule"
    ],
    "samples": 357
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1869,
    "func_name": "_args",
    "type_comments": [
      "(torch.fx.node.Node) -> List[torch.fx.node.Node]",
      "(torch.fx.node.Node) -> List"
    ],
    "samples": 14937
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1875,
    "func_name": "stable_topological_sort",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 1060
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1911,
    "func_name": "init_once_fakemode",
    "type_comments": [
      "(function) -> functools._lru_cache_wrapper"
    ],
    "samples": 61
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1914,
    "func_name": "lazy_init",
    "type_comments": [
      "() -> None"
    ],
    "samples": 197
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1958,
    "func_name": "get_arg_value",
    "type_comments": [
      "(torch.fx.node.Node, int, str) -> str",
      "(torch.fx.node.Node, int, str) -> torch.fx.immutable_collections.immutable_list",
      "(torch.fx.node.Node, int, str) -> float",
      "(torch.fx.node.Node, int, str) -> Tuple[torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node]",
      "(torch.fx.node.Node, int, None) -> int",
      "(torch.fx.node.Node, int, str) -> None",
      "(torch.fx.node.Node, int, str) -> Tuple[int, int, int, int]",
      "(torch.fx.node.Node, int, str) -> Tuple[int]",
      "(torch.fx.node.Node, int, str) -> int",
      "(torch.fx.node.Node, int, str) -> Tuple[torch.fx.node.Node, torch.fx.node.Node]",
      "(torch.fx.node.Node, int, str) -> torch.fx.node.Node",
      "(torch.fx.node.Node, int, str) -> Tuple[torch.fx.node.Node, int]"
    ],
    "samples": 16283
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1968,
    "func_name": "filter_nodes",
    "type_comments": [
      "(List[torch.fx.node.Node], builtin_function_or_method) -> List[torch.fx.node.Node]",
      "(List[torch.fx.node.Node], torch._ops.OpOverloadPacket) -> List[torch.fx.node.Node]",
      "(List[torch.fx.node.Node], torch._ops.OpOverload) -> List"
    ],
    "samples": 21
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1976,
    "func_name": "extract_target",
    "type_comments": [
      "(torch.fx.node.Node) -> builtin_function_or_method",
      "(torch.fx.node.Node) -> torch._dynamo.utils.numpy_operator_wrapper",
      "(torch.fx.node.Node) -> torch._ops.OpOverload",
      "(torch.fx.node.Node) -> type",
      "(torch.fx.node.Node) -> function",
      "(torch.fx.node.Node) -> torch._dynamo.utils.numpy_to_tensor_wrapper",
      "(torch.fx.node.Node) -> torch._ops.OpOverloadPacket"
    ],
    "samples": 30565
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/compile_tasks.py",
    "line": 16,
    "func_name": "_module_to_triton_kernel",
    "type_comments": [
      "(module, str) -> torch._inductor.runtime.triton_heuristics.CachingAutotuner"
    ],
    "samples": 566
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/compile_tasks.py",
    "line": 34,
    "func_name": "_reload_python_module",
    "type_comments": [
      "(str, str) -> module",
      "(str, str) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 593
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/compile_tasks.py",
    "line": 50,
    "func_name": "_set_triton_ptxas_path",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/coordinate_descent_tuner.py",
    "line": 48,
    "func_name": "CoordescTuner.__init__",
    "type_comments": [
      "(bool, str, List[int], Dict[str, Union[Set, bool, int, str]]) -> None",
      "(bool, str, None, Dict[str, Union[bool, str]]) -> None"
    ],
    "samples": 544
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/hints.py",
    "line": 45,
    "func_name": "instance_descriptor",
    "type_comments": [
      "(Tuple[int, int], Tuple[], Tuple[], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int], Tuple[], Tuple[], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int], Tuple[], Tuple[], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int, int, int], Tuple[], Tuple[], Tuple[int, int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int], Tuple[], Tuple[], Tuple[int, int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int], Tuple[int], Tuple[int], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int, int], Tuple[int], Tuple[int], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int], Tuple[], Tuple[], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int], Tuple[], Tuple[], Tuple[int, int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int, int, int, int, int], Tuple[], Tuple[], Tuple[]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int], Tuple[], Tuple[], Tuple[]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int, int], Tuple[], Tuple[], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int], Tuple[], Tuple[], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int], Tuple[], Tuple[], Tuple[int, int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int, int], Tuple[], Tuple[], Tuple[int, int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int], Tuple[], Tuple[], Tuple[int, int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int], Tuple[int], Tuple[int], Tuple[]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int], Tuple[int], Tuple[int], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int], Tuple[], Tuple[], Tuple[]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int], Tuple[], Tuple[], Tuple[]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int], Tuple[int], Tuple[int], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int, int, int, int], Tuple[], Tuple[], Tuple[int, int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int, int, int], Tuple[], Tuple[], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int, int, int, int, int], Tuple[], Tuple[], Tuple[int, int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int, int, int, int, int], Tuple[], Tuple[], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int], Tuple[int], Tuple[int], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int, int], Tuple[], Tuple[], Tuple[]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int, int, int, int], Tuple[], Tuple[], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor",
      "(Tuple[int, int, int, int, int, int, int, int], Tuple[int], Tuple[int], Tuple[int]) -> triton.compiler.compiler.AttrsDescriptor"
    ],
    "samples": 812
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/hints.py",
    "line": 108,
    "func_name": "create",
    "type_comments": [
      "(torch.device) -> torch._inductor.runtime.hints.DeviceProperties"
    ],
    "samples": 812
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/runtime_utils.py",
    "line": 16,
    "func_name": "conditional_product",
    "type_comments": [
      "(*int) -> int",
      "(*Optional[int]) -> int"
    ],
    "samples": 1475
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/runtime_utils.py",
    "line": 29,
    "func_name": "next_power_of_2",
    "type_comments": [
      "(int) -> int"
    ],
    "samples": 2005
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/runtime_utils.py",
    "line": 58,
    "func_name": "triton_config_to_hashable",
    "type_comments": [
      "(triton.runtime.autotuner.Config) -> Tuple[Tuple[str, int], Tuple[str, int]]",
      "(triton.runtime.autotuner.Config) -> Tuple[Tuple[str, int], Tuple[str, int], Tuple[str, int]]",
      "(triton.runtime.autotuner.Config) -> Tuple[Tuple[str, int], Tuple[str, int], Tuple[str, int], Tuple[str, int]]"
    ],
    "samples": 649
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/runtime_utils.py",
    "line": 139,
    "func_name": "cache_dir",
    "type_comments": [
      "() -> str"
    ],
    "samples": 787
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/runtime_utils.py",
    "line": 147,
    "func_name": "default_cache_dir",
    "type_comments": [
      "() -> str"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/runtime_utils.py",
    "line": 187,
    "func_name": "get_first_attr",
    "type_comments": [
      "(triton.compiler.compiler.CompiledKernel, *str) -> int",
      "(triton.compiler.compiler.CompiledKernel, *str) -> nvi.CudaLauncher"
    ],
    "samples": 827
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 84,
    "func_name": "autotune_hints_to_configs",
    "type_comments": [
      "(Set, List[int], int) -> List"
    ],
    "samples": 413
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 123,
    "func_name": "disable_pointwise_autotuning",
    "type_comments": [
      "(Dict[str, Union[List[str], Set, bool, int, str]]) -> bool",
      "(Dict[str, Union[List, Set, bool, int, str]]) -> bool"
    ],
    "samples": 428
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 166,
    "func_name": "CachingAutotuner.__init__",
    "type_comments": [
      "(triton.runtime.jit.JITFunction, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], List[triton.runtime.autotuner.Config], function, List[str], torch._inductor.runtime.hints.HeuristicType, List[int], Dict[str, Union[Set, bool, int, str]], bool, str) -> None",
      "(triton.runtime.jit.JITFunction, Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], List[triton.runtime.autotuner.Config], function, List[str], torch._inductor.runtime.hints.HeuristicType, List[int], Dict[str, Union[Set, bool, int, str]], bool, str) -> None",
      "(triton.runtime.jit.JITFunction, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], List[triton.runtime.autotuner.Config], function, List, torch._inductor.runtime.hints.HeuristicType, List[int], Dict[str, Union[Set, bool, int, str]], bool, str) -> None",
      "(triton.runtime.jit.JITFunction, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], List[triton.runtime.autotuner.Config], None, List, torch._inductor.runtime.hints.HeuristicType, List[int], Dict[str, Union[Set, bool, int, str]], bool, str) -> None",
      "(triton.runtime.jit.JITFunction, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], List[triton.runtime.autotuner.Config], None, Tuple[], torch._inductor.runtime.hints.HeuristicType, None, Dict[str, Union[bool, str]], bool, None) -> None",
      "(triton.runtime.jit.JITFunction, Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], List[triton.runtime.autotuner.Config], None, List, torch._inductor.runtime.hints.HeuristicType, List[int], Dict[str, Union[Set, bool, int, str]], bool, str) -> None",
      "(triton.runtime.jit.JITFunction, Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], List[triton.runtime.autotuner.Config], function, List, torch._inductor.runtime.hints.HeuristicType, List[int], Dict[str, Union[Set, bool, int, str]], bool, str) -> None",
      "(triton.runtime.jit.JITFunction, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], List[triton.runtime.autotuner.Config], None, List[str], torch._inductor.runtime.hints.HeuristicType, List[int], Dict[str, Union[Set, bool, int, str]], bool, str) -> None"
    ],
    "samples": 544
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 224,
    "func_name": "CachingAutotuner.precompile",
    "type_comments": [
      "(bool) -> None"
    ],
    "samples": 562
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 335,
    "func_name": "CachingAutotuner.get_device_interface",
    "type_comments": [
      "() -> torch._dynamo.device_interface.DeviceInterfaceMeta"
    ],
    "samples": 635
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 341,
    "func_name": "CachingAutotuner._precompile_config",
    "type_comments": [
      "(triton.runtime.autotuner.Config, bool) -> Tuple[triton.compiler.compiler.CompiledKernel, function]"
    ],
    "samples": 635
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 979,
    "func_name": "hash_configs",
    "type_comments": [
      "(List[triton.runtime.autotuner.Config]) -> str"
    ],
    "samples": 413
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 991,
    "func_name": "load_cached_autotuning",
    "type_comments": [
      "(Dict[str, Union[bool, int, str]], str, List[triton.runtime.autotuner.Config], Dict[str, Union[List[str], Set, bool, int, str]]) -> triton.runtime.autotuner.Config",
      "(None, str, List[triton.runtime.autotuner.Config], Dict[str, Union[List, Set, bool, int, str]]) -> None",
      "(Dict[str, Union[int, str]], str, List[triton.runtime.autotuner.Config], Dict[str, Union[List, Set, bool, int, str]]) -> triton.runtime.autotuner.Config",
      "(None, str, List[triton.runtime.autotuner.Config], Dict[str, Union[List[str], Set, bool, int, str]]) -> None",
      "(Dict[str, Union[bool, int, str]], str, List[triton.runtime.autotuner.Config], Dict[str, Union[List, Set, bool, int, str]]) -> triton.runtime.autotuner.Config"
    ],
    "samples": 413
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 1027,
    "func_name": "should_use_remote_autotune_cache",
    "type_comments": [
      "(Dict[str, Union[List[str], Set, bool, int, str]]) -> bool",
      "(Dict[str, Union[List, Set, bool, int, str]]) -> bool"
    ],
    "samples": 413
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 1042,
    "func_name": "cached_autotune",
    "type_comments": [
      "(None, List[triton.runtime.autotuner.Config], Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], torch._inductor.runtime.hints.HeuristicType, None, Dict[str, Union[bool, str]], bool) -> function",
      "(List[int], List[triton.runtime.autotuner.Config], Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], torch._inductor.runtime.hints.HeuristicType, str, Dict[str, Union[List, Set, bool, int, str]], bool) -> function",
      "(List[int], List[triton.runtime.autotuner.Config], Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], torch._inductor.runtime.hints.HeuristicType, str, Dict[str, Union[List[str], Set, bool, int, str]], bool) -> function",
      "(List[int], List[triton.runtime.autotuner.Config], Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], torch._inductor.runtime.hints.HeuristicType, str, Dict[str, Union[List[str], Set, bool, int, str]], bool) -> function",
      "(List[int], List[triton.runtime.autotuner.Config], Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], torch._inductor.runtime.hints.HeuristicType, str, Dict[str, Union[List, Set, bool, int, str]], bool) -> function"
    ],
    "samples": 544
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 1138,
    "func_name": "decorator",
    "type_comments": [
      "(triton.runtime.jit.JITFunction) -> torch._inductor.runtime.triton_heuristics.CachingAutotuner"
    ],
    "samples": 544
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 1181,
    "func_name": "unique_configs",
    "type_comments": [
      "(List[triton.runtime.autotuner.Config]) -> List[triton.runtime.autotuner.Config]"
    ],
    "samples": 544
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 1194,
    "func_name": "check_config",
    "type_comments": [
      "(Dict[str, int], int, int, None) -> None",
      "(Dict[str, int], int, None, None) -> None"
    ],
    "samples": 581
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 1212,
    "func_name": "triton_config",
    "type_comments": [
      "(List[int], int, int, None, int, int, int) -> triton.runtime.autotuner.Config",
      "(List[int], int, None, None, int, int, int) -> triton.runtime.autotuner.Config"
    ],
    "samples": 493
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 1307,
    "func_name": "triton_config_reduction",
    "type_comments": [
      "(List[int], int, int, int, None) -> triton.runtime.autotuner.Config"
    ],
    "samples": 316
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 1372,
    "func_name": "pointwise",
    "type_comments": [
      "(List[int], Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], torch._inductor.runtime.hints.TileHint, str, int, Dict[str, Union[List, Set, bool, int, str]]) -> function",
      "(List[int], Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], None, str, int, Dict[str, Union[List, Set, bool, int, str]]) -> function",
      "(List[int], Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], None, str, int, Dict[str, Union[List, Set, bool, int, str]]) -> function",
      "(List[int], Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], None, str, int, Dict[str, Union[List[str], Set, bool, int, str]]) -> function",
      "(List[int], Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], None, str, int, Dict[str, Union[List[str], Set, bool, int, str]]) -> function"
    ],
    "samples": 413
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 1574,
    "func_name": "persistent_reduction",
    "type_comments": [
      "(List[int], torch._inductor.runtime.hints.ReductionHint, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], str, Dict[str, Union[List[str], Set, bool, int, str]]) -> function",
      "(List[int], torch._inductor.runtime.hints.ReductionHint, Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], str, Dict[str, Union[List, Set, bool, int, str]]) -> function",
      "(List[int], torch._inductor.runtime.hints.ReductionHint, Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], str, Dict[str, Union[List[str], Set, bool, int, str]]) -> function",
      "(List[int], torch._inductor.runtime.hints.ReductionHint, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], str, Dict[str, Union[List, Set, bool, int, str]]) -> function"
    ],
    "samples": 191
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 73,
    "func_name": "BaseSchedulerNode.__init__",
    "type_comments": [
      "(torch._inductor.scheduler.Scheduler, torch._inductor.ir.MutationOutput) -> None",
      "(torch._inductor.scheduler.Scheduler, torch._inductor.ir.ConcatKernel) -> None",
      "(torch._inductor.scheduler.Scheduler, torch._inductor.ir.RandomSeeds) -> None",
      "(torch._inductor.scheduler.Scheduler, torch._inductor.ir.ComputedBuffer) -> None",
      "(torch._inductor.scheduler.Scheduler, torch._inductor.ir.ExternKernelOut) -> None",
      "(torch._inductor.scheduler.Scheduler, torch._inductor.ir.MultiOutput) -> None",
      "(torch._inductor.scheduler.Scheduler, torch._inductor.ir.ExternKernelAlloc) -> None",
      "(torch._inductor.scheduler.Scheduler, torch._inductor.ir.FallbackKernel) -> None",
      "(torch._inductor.scheduler.Scheduler, torch._inductor.ir.DynamicScalar) -> None",
      "(torch._inductor.scheduler.Scheduler, torch._inductor.ir.ScatterFallback) -> None"
    ],
    "samples": 1919
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 139,
    "func_name": "BaseSchedulerNode.update_mutated_names",
    "type_comments": [
      "(Dict[str, str]) -> None",
      "(Dict) -> None"
    ],
    "samples": 1919
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 145,
    "func_name": "BaseSchedulerNode.set_users",
    "type_comments": [
      "(List[torch._inductor.scheduler.NodeUser]) -> None",
      "(List) -> None"
    ],
    "samples": 1919
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 155,
    "func_name": "BaseSchedulerNode.set_last_usage",
    "type_comments": [
      "(Set[str], Dict) -> None",
      "(Set[str], Dict[str, str]) -> None",
      "(Set, Dict[str, str]) -> None",
      "(Set, Dict) -> None"
    ],
    "samples": 1843
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 162,
    "func_name": "BaseSchedulerNode.get_aliases",
    "type_comments": [
      "() -> List",
      "() -> Tuple[]",
      "() -> List[str]"
    ],
    "samples": 4643
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 166,
    "func_name": "BaseSchedulerNode.get_mutations",
    "type_comments": [
      "() -> List",
      "() -> Tuple[]",
      "() -> List[str]"
    ],
    "samples": 6644
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 173,
    "func_name": "BaseSchedulerNode.set_read_writes",
    "type_comments": [
      "(torch._inductor.dependencies.ReadWrites) -> None"
    ],
    "samples": 6650
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 181,
    "func_name": "BaseSchedulerNode.used_buffer_names",
    "type_comments": [
      "() -> Set[str]"
    ],
    "samples": 3798
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 187,
    "func_name": "BaseSchedulerNode.used_or_aliased_buffer_names",
    "type_comments": [
      "() -> Set[str]"
    ],
    "samples": 2400
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 203,
    "func_name": "BaseSchedulerNode.prune_deps",
    "type_comments": [
      "() -> None"
    ],
    "samples": 7999
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 210,
    "func_name": "BaseSchedulerNode.prune_weak_deps",
    "type_comments": [
      "() -> None"
    ],
    "samples": 1662
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 212,
    "func_name": "should_prune",
    "type_comments": [
      "(torch._inductor.dependencies.StarDep) -> bool",
      "(torch._inductor.dependencies.MemoryDep) -> bool",
      "(torch._inductor.dependencies.WeakDep) -> bool"
    ],
    "samples": 3213
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 218,
    "func_name": "BaseSchedulerNode.prune_redundant_deps",
    "type_comments": [
      "(Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(Dict[str, torch._inductor.scheduler.SchedulerNode]) -> None",
      "(Dict[str, torch._inductor.scheduler.ForeachKernelSchedulerNode]) -> None",
      "(Dict[str, Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(Dict[str, torch._inductor.scheduler.FusedSchedulerNode]) -> None",
      "(Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]) -> None",
      "(Dict[str, torch._inductor.scheduler.ExternKernelSchedulerNode]) -> None"
    ],
    "samples": 1883
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 223,
    "func_name": "BaseSchedulerNode.get_name",
    "type_comments": [
      "() -> str"
    ],
    "samples": 25383
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 227,
    "func_name": "BaseSchedulerNode.get_first_name",
    "type_comments": [
      "() -> str"
    ],
    "samples": 1257
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 230,
    "func_name": "BaseSchedulerNode.get_names",
    "type_comments": [
      "() -> Set[str]"
    ],
    "samples": 14476
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 233,
    "func_name": "BaseSchedulerNode.get_nodes",
    "type_comments": [
      "() -> List[torch._inductor.scheduler.ExternKernelSchedulerNode]",
      "() -> List[torch._inductor.scheduler.NopKernelSchedulerNode]",
      "() -> List[torch._inductor.scheduler.SchedulerNode]"
    ],
    "samples": 7252
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 236,
    "func_name": "BaseSchedulerNode.get_device",
    "type_comments": [
      "() -> torch.device"
    ],
    "samples": 7655
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 246,
    "func_name": "BaseSchedulerNode.is_template",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 2970
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 249,
    "func_name": "BaseSchedulerNode.is_extern",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 1126
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 252,
    "func_name": "BaseSchedulerNode.is_foreach",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 8066
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 255,
    "func_name": "BaseSchedulerNode.can_inplace",
    "type_comments": [
      "(torch._inductor.dependencies.StarDep) -> bool"
    ],
    "samples": 718
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 258,
    "func_name": "BaseSchedulerNode.has_side_effects",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 1724
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 261,
    "func_name": "BaseSchedulerNode.decide_inplace_update",
    "type_comments": [
      "() -> None"
    ],
    "samples": 1663
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 348,
    "func_name": "BaseSchedulerNode.allocate",
    "type_comments": [
      "() -> None"
    ],
    "samples": 1666
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 373,
    "func_name": "BaseSchedulerNode.can_free",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 652
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 383,
    "func_name": "BaseSchedulerNode.codegen_originating_info",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer, bool) -> None"
    ],
    "samples": 6494
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 427,
    "func_name": "BaseSchedulerNode.get_read_write_buffers_sizes",
    "type_comments": [
      "() -> int"
    ],
    "samples": 1849
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 458,
    "func_name": "try_size_hint",
    "type_comments": [
      "(sympy.core.numbers.Integer) -> int",
      "(sympy.core.symbol.Symbol) -> int",
      "(sympy.core.numbers.One) -> int",
      "(sympy.core.add.Add) -> int",
      "(sympy.core.numbers.Zero) -> int",
      "(sympy.core.mul.Mul) -> int"
    ],
    "samples": 6443
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 475,
    "func_name": "is_materialized",
    "type_comments": [
      "(str, List[torch._inductor.scheduler.SchedulerNode]) -> bool",
      "(str, List[torch._inductor.scheduler.FusedSchedulerNode]) -> bool"
    ],
    "samples": 2008
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 502,
    "func_name": "get_buf_elems",
    "type_comments": [
      "(torch._inductor.ir.FallbackKernel) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.MutationOutput) -> int",
      "(torch._inductor.ir.MultiOutput) -> int",
      "(torch._inductor.ir.DynamicScalar) -> int",
      "(torch._inductor.ir.ComputedBuffer) -> int",
      "(torch._inductor.ir.ExternKernelOut) -> int",
      "(torch._inductor.ir.ScatterFallback) -> int",
      "(torch._inductor.ir.TensorBox) -> int",
      "(torch._inductor.ir.RandomSeeds) -> int",
      "(torch._inductor.ir.ConcatKernel) -> int",
      "(torch._inductor.ir.ExternKernelAlloc) -> int"
    ],
    "samples": 5952
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 530,
    "func_name": "BaseSchedulerNode.get_estimated_runtime",
    "type_comments": [
      "() -> float",
      "() -> int"
    ],
    "samples": 1513
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 641,
    "func_name": "WhyNoFuse.__init__",
    "type_comments": [
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.ExternKernelSchedulerNode) -> None",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> None",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> None",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> None",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> None",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.ExternKernelSchedulerNode) -> None",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.ExternKernelSchedulerNode) -> None",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> None",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode) -> None",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> None",
      "(torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> None",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> None",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> None",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> None"
    ],
    "samples": 7940
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 645,
    "func_name": "WhyNoFuse.__call__",
    "type_comments": [
      "(str, *Union[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> None",
      "(str, *Union[sympy.core.mul.Mul, sympy.core.numbers.One]) -> None",
      "(str, *Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]) -> None",
      "(str, *sympy.core.numbers.Integer) -> None",
      "(str) -> None"
    ],
    "samples": 4264
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 667,
    "func_name": "OutputNode.__init__",
    "type_comments": [
      "(torch._inductor.dependencies.StarDep) -> None"
    ],
    "samples": 1077
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 676,
    "func_name": "OutputNode.get_name",
    "type_comments": [
      "() -> str"
    ],
    "samples": 2838
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 682,
    "func_name": "_prune_redundant_deps",
    "type_comments": [
      "(torch._inductor.scheduler.FusedSchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]) -> None",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, Dict[str, torch._inductor.scheduler.ExternKernelSchedulerNode]) -> None",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, Dict[str, Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, Dict[str, torch._inductor.scheduler.ForeachKernelSchedulerNode]) -> None",
      "(torch._inductor.scheduler.SchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, Dict[str, torch._inductor.scheduler.FusedSchedulerNode]) -> None",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, Dict[str, torch._inductor.scheduler.SchedulerNode]) -> None",
      "(torch._inductor.scheduler.FusedSchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.FusedSchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]) -> None",
      "(torch._inductor.scheduler.SchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.FusedSchedulerNode, Dict[str, torch._inductor.scheduler.ForeachKernelSchedulerNode]) -> None",
      "(torch._inductor.scheduler.NopKernelSchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.SchedulerNode, Dict[str, torch._inductor.scheduler.FusedSchedulerNode]) -> None",
      "(torch._inductor.scheduler.FusedSchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.SchedulerNode, Dict[str, torch._inductor.scheduler.ForeachKernelSchedulerNode]) -> None",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.SchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.SchedulerNode, Dict[str, Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.SchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]) -> None",
      "(torch._inductor.scheduler.FusedSchedulerNode, Dict[str, Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.NopKernelSchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.SchedulerNode, Dict[str, torch._inductor.scheduler.ExternKernelSchedulerNode]) -> None",
      "(torch._inductor.scheduler.NopKernelSchedulerNode, Dict[str, Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(torch._inductor.scheduler.FusedSchedulerNode, Dict[str, torch._inductor.scheduler.FusedSchedulerNode]) -> None",
      "(torch._inductor.scheduler.SchedulerNode, Dict[str, torch._inductor.scheduler.SchedulerNode]) -> None"
    ],
    "samples": 1886
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 699,
    "func_name": "should_prune",
    "type_comments": [
      "(torch._inductor.dependencies.StarDep) -> bool",
      "(torch._inductor.dependencies.MemoryDep) -> bool"
    ],
    "samples": 2257
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 732,
    "func_name": "ExternKernelSchedulerNode.is_extern",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 695
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 735,
    "func_name": "ExternKernelSchedulerNode.has_side_effects",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 499
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 745,
    "func_name": "SchedulerNode.__init__",
    "type_comments": [
      "(torch._inductor.scheduler.Scheduler, torch._inductor.ir.ComputedBuffer) -> None"
    ],
    "samples": 1723
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 753,
    "func_name": "SchedulerNode._compute_attrs",
    "type_comments": [
      "(None) -> None"
    ],
    "samples": 1723
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 804,
    "func_name": "SchedulerNode.get_ranges",
    "type_comments": [
      "() -> Tuple[List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]]",
      "() -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List]",
      "() -> Tuple[List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], List]",
      "() -> Tuple[List[sympy.core.numbers.Integer], List]",
      "() -> Tuple[List, List[sympy.core.numbers.Integer]]",
      "() -> Tuple[List[sympy.core.numbers.Integer], List[torch.utils._sympy.functions.FloorDiv]]",
      "() -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List]",
      "() -> Tuple[List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol]]",
      "() -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]",
      "() -> Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]]",
      "() -> Tuple[List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]]",
      "() -> Tuple[List[sympy.core.symbol.Symbol], List]",
      "() -> Tuple[List, List[sympy.core.symbol.Symbol]]",
      "() -> Tuple[List[sympy.core.mul.Mul], List]",
      "() -> Tuple[List[sympy.core.numbers.Integer], List[sympy.core.mul.Mul]]",
      "() -> Tuple[List, List]"
    ],
    "samples": 6173
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 807,
    "func_name": "SchedulerNode.is_reduction",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 10781
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 813,
    "func_name": "SchedulerNode.is_split_scan",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 4165
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 821,
    "func_name": "SchedulerNode.is_template",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 11779
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 832,
    "func_name": "SchedulerNode.mark_run",
    "type_comments": [
      "() -> None"
    ],
    "samples": 1471
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 835,
    "func_name": "SchedulerNode.ranges_from_index_vars",
    "type_comments": [
      "(List[List[sympy.core.symbol.Symbol]]) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(List[Union[List, List[sympy.core.symbol.Symbol]]]) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "(List[List[sympy.core.symbol.Symbol]]) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]",
      "(List[List[sympy.core.symbol.Symbol]]) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "(List[List[sympy.core.symbol.Symbol]]) -> Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[List[sympy.core.symbol.Symbol]]) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(List[List[sympy.core.symbol.Symbol]]) -> Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]",
      "(List[List[sympy.core.symbol.Symbol]]) -> Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]",
      "(List[Union[List, List[sympy.core.add.Add]]]) -> Dict[sympy.core.add.Add, sympy.core.mul.Mul]",
      "(List[List]) -> Dict",
      "(List[Union[List, List[sympy.core.symbol.Symbol]]]) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(Tuple[List, List]) -> Dict",
      "(List[Union[List, List[sympy.core.symbol.Symbol]]]) -> Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]",
      "(List[Union[List, List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]]]) -> Dict[Union[sympy.core.add.Add, sympy.core.symbol.Symbol], sympy.core.numbers.Integer]",
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]",
      "(List[Union[List, List[sympy.core.symbol.Symbol]]]) -> Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]",
      "(List[Union[List, List[sympy.core.add.Add]]]) -> Dict[sympy.core.add.Add, sympy.core.numbers.Integer]",
      "(List[Union[List, List[sympy.core.symbol.Symbol]]]) -> Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(List[Union[List, List[sympy.core.symbol.Symbol]]]) -> Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]"
    ],
    "samples": 1470
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 848,
    "func_name": "SchedulerNode.codegen",
    "type_comments": [
      "(List[List]) -> None",
      "(Tuple[List, List]) -> None",
      "(Tuple[List[sympy.core.symbol.Symbol], List]) -> None",
      "(List[Union[List, List[sympy.core.symbol.Symbol]]]) -> None",
      "(List[List[sympy.core.symbol.Symbol]]) -> None",
      "(List[Union[List, List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]]]) -> None",
      "(List[Union[List, List[sympy.core.add.Add]]]) -> None"
    ],
    "samples": 1470
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 859,
    "func_name": "SchedulerNode.pointwise_read_writes",
    "type_comments": [
      "() -> torch._inductor.dependencies.ReadWrites"
    ],
    "samples": 761
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 865,
    "func_name": "fn",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> str",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> str"
    ],
    "samples": 761
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 870,
    "func_name": "SchedulerNode.can_inplace",
    "type_comments": [
      "(torch._inductor.dependencies.StarDep) -> bool",
      "(torch._inductor.dependencies.MemoryDep) -> bool",
      "(torch._inductor.dependencies.WeakDep) -> bool"
    ],
    "samples": 3226
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 902,
    "func_name": "init_group_node",
    "type_comments": [
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.Scheduler, List[torch._inductor.scheduler.SchedulerNode]) -> None",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.Scheduler, List[torch._inductor.scheduler.SchedulerNode]) -> None"
    ],
    "samples": 881
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 938,
    "func_name": "fuse",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> torch._inductor.scheduler.FusedSchedulerNode",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> torch._inductor.scheduler.FusedSchedulerNode",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> torch._inductor.scheduler.FusedSchedulerNode",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> torch._inductor.scheduler.FusedSchedulerNode"
    ],
    "samples": 881
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 948,
    "func_name": "FusedSchedulerNode.__init__",
    "type_comments": [
      "(torch._inductor.scheduler.Scheduler, List[torch._inductor.scheduler.SchedulerNode]) -> None"
    ],
    "samples": 881
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 954,
    "func_name": "get_name",
    "type_comments": [
      "() -> str",
      "() -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 949
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 961,
    "func_name": "get_names",
    "type_comments": [
      "() -> Set[str]"
    ],
    "samples": 952
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 982,
    "func_name": "FusedSchedulerNode.set_last_usage",
    "type_comments": [
      "(Set[str], Dict[str, str]) -> None",
      "(Set, Dict[str, str]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Set, Dict[str, str]) -> None",
      "(Set[str], Dict) -> None"
    ],
    "samples": 544
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 995,
    "func_name": "used_buffer_names",
    "type_comments": [
      "() -> pyannotate_runtime.collect_types.UnknownType",
      "() -> Set[str]"
    ],
    "samples": 546
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 999,
    "func_name": "used_or_aliased_buffer_names",
    "type_comments": [
      "() -> pyannotate_runtime.collect_types.UnknownType",
      "() -> Set[str]"
    ],
    "samples": 544
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1003,
    "func_name": "FusedSchedulerNode.get_nodes",
    "type_comments": [
      "() -> List[torch._inductor.scheduler.SchedulerNode]"
    ],
    "samples": 7610
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1009,
    "func_name": "is_reduction",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 674
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1013,
    "func_name": "is_split_scan",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 672
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1017,
    "func_name": "is_template",
    "type_comments": [
      "() -> pyannotate_runtime.collect_types.UnknownType",
      "() -> bool"
    ],
    "samples": 926
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1028,
    "func_name": "FusedSchedulerNode.get_device",
    "type_comments": [
      "() -> torch.device"
    ],
    "samples": 3438
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1353,
    "func_name": "pick_loop_order",
    "type_comments": [
      "(List[List], List, Tuple[]) -> List",
      "(List[List[int]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List) -> List[int]",
      "(List[List[int]], List[sympy.core.mul.Mul], Tuple[]) -> List[int]",
      "(List[List[int]], List[sympy.core.numbers.Integer], Tuple[]) -> List[int]",
      "(List[List[int]], List[sympy.core.mul.Mul], List) -> List[int]",
      "(List[List[int]], List[sympy.core.numbers.One], Tuple[]) -> List[int]",
      "(List[List], List, List) -> List",
      "(List[List[int]], List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]], Tuple[]) -> List[int]",
      "(List[List[int]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], Tuple[]) -> List[int]",
      "(List[List[int]], List[torch.utils._sympy.functions.FloorDiv], List) -> List[int]",
      "(List[List[int]], List[Union[int, sympy.core.symbol.Symbol]], List) -> List[int]",
      "(List[List[int]], List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], Tuple[]) -> List[int]",
      "(List[List[int]], List[int], List) -> List[int]",
      "(List[List[int]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List) -> List[int]",
      "(List[List[int]], List[Union[int, sympy.core.numbers.Integer]], Tuple[]) -> List[int]",
      "(List[List[int]], List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List) -> List[int]",
      "(List[List[int]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], Tuple[]) -> List[int]",
      "(List[List[int]], List[sympy.core.numbers.Integer], List) -> List[int]",
      "(List[List[int]], List[Union[int, torch.utils._sympy.functions.FloorDiv]], Tuple[]) -> List[int]",
      "(List[List[int]], List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], Tuple[]) -> List[int]",
      "(List[List[int]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], Tuple[]) -> List[int]",
      "(List[List[int]], List[sympy.core.symbol.Symbol], List) -> List[int]",
      "(List[List[int]], List[sympy.core.symbol.Symbol], Tuple[]) -> List[int]",
      "(List[List[int]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], Tuple[]) -> List[int]",
      "(List[List[int]], List[Union[int, torch.utils._sympy.functions.FloorDiv]], List) -> List[int]",
      "(List[List[int]], List[int], Tuple[]) -> List[int]",
      "(List[List[int]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], Tuple[]) -> List[int]",
      "(List[List[int]], List[Union[int, sympy.core.symbol.Symbol]], Tuple[]) -> List[int]"
    ],
    "samples": 3500
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1363,
    "func_name": "index_cmp",
    "type_comments": [
      "(int, int) -> int"
    ],
    "samples": 2614
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1408,
    "func_name": "NodeUser.__hash__",
    "type_comments": [
      "() -> int"
    ],
    "samples": 8284
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1411,
    "func_name": "NodeUser.__eq__",
    "type_comments": [
      "(torch._inductor.scheduler.NodeUser) -> bool"
    ],
    "samples": 837
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1419,
    "func_name": "NodeUser.get_name",
    "type_comments": [
      "() -> str"
    ],
    "samples": 5002
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1437,
    "func_name": "__init__",
    "type_comments": [
      "(List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.MutationOutput, torch._inductor.ir.ScatterFallback]]) -> None",
      "(List[Union[torch._inductor.ir.FallbackKernel, torch._inductor.ir.MultiOutput]]) -> None",
      "(List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ExternKernelAlloc]]) -> None",
      "(List[Union[torch._inductor.ir.DynamicScalar, torch._inductor.ir.FallbackKernel, torch._inductor.ir.MultiOutput]]) -> None",
      "(List[torch._inductor.ir.ComputedBuffer]) -> None",
      "(List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.RandomSeeds]]) -> None",
      "(List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.FallbackKernel, torch._inductor.ir.MultiOutput]]) -> None",
      "(List[Union[torch._inductor.ir.ComputedBuffer, torch._inductor.ir.ExternKernelOut]]) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1524,
    "func_name": "Scheduler.get_current_device_or_throw",
    "type_comments": [
      "() -> torch.device"
    ],
    "samples": 1280
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1530,
    "func_name": "Scheduler.debug_draw_graph",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1543,
    "func_name": "Scheduler.create_scheduler_node",
    "type_comments": [
      "(torch._inductor.ir.RandomSeeds) -> torch._inductor.scheduler.ExternKernelSchedulerNode",
      "(torch._inductor.ir.ConcatKernel) -> torch._inductor.scheduler.NopKernelSchedulerNode",
      "(torch._inductor.ir.ScatterFallback) -> torch._inductor.scheduler.ExternKernelSchedulerNode",
      "(torch._inductor.ir.ExternKernelOut) -> torch._inductor.scheduler.ExternKernelSchedulerNode",
      "(torch._inductor.ir.MutationOutput) -> torch._inductor.scheduler.NopKernelSchedulerNode",
      "(torch._inductor.ir.MultiOutput) -> torch._inductor.scheduler.ExternKernelSchedulerNode",
      "(torch._inductor.ir.ComputedBuffer) -> torch._inductor.scheduler.SchedulerNode",
      "(torch._inductor.ir.DynamicScalar) -> torch._inductor.scheduler.ExternKernelSchedulerNode",
      "(torch._inductor.ir.ExternKernelAlloc) -> torch._inductor.scheduler.ExternKernelSchedulerNode",
      "(torch._inductor.ir.FallbackKernel) -> torch._inductor.scheduler.ExternKernelSchedulerNode"
    ],
    "samples": 1919
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1556,
    "func_name": "Scheduler.create_foreach_nodes",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1586,
    "func_name": "Scheduler.compute_dependencies",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1594,
    "func_name": "DedupList",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1604,
    "func_name": "DedupList.__init__",
    "type_comments": [
      "(None, None) -> None"
    ],
    "samples": 2636
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1612,
    "func_name": "DedupList.append",
    "type_comments": [
      "(torch._inductor.scheduler.NodeUser) -> None"
    ],
    "samples": 4672
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1648,
    "func_name": "rename",
    "type_comments": [
      "(str) -> str",
      "(str) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 6320
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1668,
    "func_name": "add_user",
    "type_comments": [
      "(str, torch._inductor.scheduler.SchedulerNode, bool, bool) -> None",
      "(str, torch._inductor.scheduler.OutputNode, bool, bool) -> None",
      "(str, torch._inductor.scheduler.ExternKernelSchedulerNode, bool, bool) -> None",
      "(str, torch._inductor.scheduler.NopKernelSchedulerNode, bool, bool) -> None"
    ],
    "samples": 4672
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1794,
    "func_name": "Scheduler.dead_node_elimination",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1804,
    "func_name": "can_eliminate_user",
    "type_comments": [
      "(torch._inductor.scheduler.NodeUser) -> bool"
    ],
    "samples": 1895
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1824,
    "func_name": "Scheduler.topological_sort_schedule",
    "type_comments": [
      "(List[torch._inductor.scheduler.ForeachKernelSchedulerNode]) -> List[torch._inductor.scheduler.ForeachKernelSchedulerNode]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> List[Union[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[torch._inductor.scheduler.ExternKernelSchedulerNode]) -> List[torch._inductor.scheduler.ExternKernelSchedulerNode]",
      "(List[torch._inductor.scheduler.FusedSchedulerNode]) -> List[torch._inductor.scheduler.FusedSchedulerNode]"
    ],
    "samples": 517
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1834,
    "func_name": "visit",
    "type_comments": [
      "(torch._inductor.scheduler.NopKernelSchedulerNode) -> None",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.NopKernelSchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.SchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.SchedulerNode) -> None",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode) -> None",
      "(torch._inductor.scheduler.FusedSchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode) -> None",
      "(torch._inductor.scheduler.FusedSchedulerNode) -> None"
    ],
    "samples": 8084
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1851,
    "func_name": "Scheduler.compute_ancestors",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1869,
    "func_name": "Scheduler.fuse_nodes",
    "type_comments": [
      "(List[torch._inductor.scheduler.SchedulerNode]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> List[torch._inductor.scheduler.FusedSchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> List[Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[torch._inductor.scheduler.ForeachKernelSchedulerNode]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[torch._inductor.scheduler.ExternKernelSchedulerNode]) -> List[torch._inductor.scheduler.ExternKernelSchedulerNode]"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1893,
    "func_name": "Scheduler.process_grouped_nodes",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1917,
    "func_name": "Scheduler.finalize_multi_template_buffers",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1966,
    "func_name": "Scheduler.speedup_by_fusion",
    "type_comments": [
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> bool"
    ],
    "samples": 752
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2116,
    "func_name": "Scheduler.fuse_nodes_once",
    "type_comments": [
      "(List[torch._inductor.scheduler.SchedulerNode]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[torch._inductor.scheduler.ForeachKernelSchedulerNode]) -> List[torch._inductor.scheduler.ForeachKernelSchedulerNode]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> List[torch._inductor.scheduler.FusedSchedulerNode]",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> List[Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[torch._inductor.scheduler.ForeachKernelSchedulerNode]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> List[torch._inductor.scheduler.SchedulerNode]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[torch._inductor.scheduler.ExternKernelSchedulerNode]) -> List[torch._inductor.scheduler.ExternKernelSchedulerNode]"
    ],
    "samples": 293
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2157,
    "func_name": "Scheduler.prune_redundant_deps",
    "type_comments": [
      "(List[Union[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(List[Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(List[torch._inductor.scheduler.ExternKernelSchedulerNode]) -> None",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]) -> None",
      "(List[torch._inductor.scheduler.ForeachKernelSchedulerNode]) -> None",
      "(List[torch._inductor.scheduler.FusedSchedulerNode]) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> None",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None"
    ],
    "samples": 293
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2161,
    "func_name": "Scheduler.get_possible_fusions",
    "type_comments": [
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List",
      "(List[Union[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[Tuple[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode], Tuple[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> List",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Tuple[torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Tuple[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[Tuple[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode], Tuple[torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]]",
      "(List[torch._inductor.scheduler.ExternKernelSchedulerNode]) -> List[Tuple[torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> List[Tuple[torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]) -> List[Tuple[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Tuple[torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[torch._inductor.scheduler.ForeachKernelSchedulerNode]) -> List",
      "(List[torch._inductor.scheduler.ExternKernelSchedulerNode]) -> List",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Tuple[torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]) -> List",
      "(List[Union[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Tuple[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Union[Tuple[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode], Tuple[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]]"
    ],
    "samples": 293
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2170,
    "func_name": "check_all_pairs",
    "type_comments": [
      "(List[Union[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(List[Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode]]) -> None",
      "(List[Union[torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(List[Union[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None",
      "(List[torch._inductor.scheduler.ExternKernelSchedulerNode]) -> None",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode]]) -> None",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]) -> None",
      "(List[torch._inductor.scheduler.ForeachKernelSchedulerNode]) -> None",
      "(List[torch._inductor.scheduler.FusedSchedulerNode]) -> None",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> None",
      "(List[Union[torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> None"
    ],
    "samples": 4405
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2209,
    "func_name": "Scheduler.will_fusion_create_cycle",
    "type_comments": [
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> bool"
    ],
    "samples": 752
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2219,
    "func_name": "found_path",
    "type_comments": [
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.NopKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode) -> bool"
    ],
    "samples": 20468
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2249,
    "func_name": "Scheduler.can_fusion_increase_peak_memory",
    "type_comments": [
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> bool"
    ],
    "samples": 786
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2335,
    "func_name": "Scheduler.can_fuse",
    "type_comments": [
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.ExternKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.NopKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.NopKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.ExternKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.ExternKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool"
    ],
    "samples": 5426
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2438,
    "func_name": "Scheduler.can_fuse_vertical",
    "type_comments": [
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> bool",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> bool"
    ],
    "samples": 1939
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2495,
    "func_name": "Scheduler.fusable_read_and_write",
    "type_comments": [
      "(torch._inductor.dependencies.StarDep, torch._inductor.dependencies.MemoryDep) -> bool",
      "(torch._inductor.dependencies.MemoryDep, torch._inductor.dependencies.MemoryDep) -> bool"
    ],
    "samples": 13254
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2521,
    "func_name": "Scheduler.score_fusion",
    "type_comments": [
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> Tuple[bool, bool, int, int]",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> Tuple[bool, bool, int, int]",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> Tuple[bool, bool, int, int]",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> Tuple[bool, bool, int, int]"
    ],
    "samples": 819
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2545,
    "func_name": "Scheduler.dep_size_hint",
    "type_comments": [
      "(torch._inductor.dependencies.MemoryDep) -> int"
    ],
    "samples": 4253
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2561,
    "func_name": "Scheduler.score_fusion_memory",
    "type_comments": [
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> int",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> int",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> int",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> int",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> int",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> int",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> int"
    ],
    "samples": 4606
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2573,
    "func_name": "Scheduler.get_possible_fusions_with_highest_priority",
    "type_comments": [
      "(List[Tuple[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Tuple[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Tuple[torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]) -> List[Tuple[torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]",
      "(List[Tuple[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Tuple[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Tuple[torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode]]) -> List[Tuple[torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode]]",
      "(List[Tuple[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]) -> List[Tuple[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode]]",
      "(List) -> List",
      "(List[Union[Tuple[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode], Tuple[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]]) -> List[Union[Tuple[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode], Tuple[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]]]",
      "(List[Union[Tuple[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode], Tuple[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]]) -> List[Union[Tuple[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode], Tuple[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]]]"
    ],
    "samples": 293
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2605,
    "func_name": "Scheduler.score_fusion_key",
    "type_comments": [
      "(Tuple[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode]) -> Tuple[bool, bool, int, int]",
      "(Tuple[torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode]) -> Tuple[bool, bool, int, int]",
      "(Tuple[torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode]) -> Tuple[bool, bool, int, int]",
      "(Tuple[torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode]) -> Tuple[bool, bool, int, int]"
    ],
    "samples": 819
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2614,
    "func_name": "Scheduler.compute_last_usage",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2625,
    "func_name": "Scheduler.free_buffers",
    "type_comments": [
      "() -> None"
    ],
    "samples": 1239
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2643,
    "func_name": "Scheduler.remove_kernel_local_buffers",
    "type_comments": [
      "() -> None"
    ],
    "samples": 961
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2660,
    "func_name": "remove_filter",
    "type_comments": [
      "(str) -> bool"
    ],
    "samples": 558
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2698,
    "func_name": "Scheduler.flush",
    "type_comments": [
      "() -> None"
    ],
    "samples": 634
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2703,
    "func_name": "Scheduler.codegen_extern_call",
    "type_comments": [
      "(torch._inductor.scheduler.ExternKernelSchedulerNode) -> None"
    ],
    "samples": 496
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2718,
    "func_name": "Scheduler.create_backend",
    "type_comments": [
      "(torch.device) -> torch._inductor.codegen.cuda_combined_scheduling.CUDACombinedScheduling",
      "(torch.device) -> torch._inductor.codegen.cpp.CppScheduling"
    ],
    "samples": 162
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2743,
    "func_name": "Scheduler.get_backend",
    "type_comments": [
      "(torch.device) -> torch._inductor.codegen.cuda_combined_scheduling.CUDACombinedScheduling",
      "(torch.device) -> torch._inductor.codegen.cpp.CppScheduling"
    ],
    "samples": 4602
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2748,
    "func_name": "Scheduler.enter_context",
    "type_comments": [
      "(torch._inductor.scheduler.NopKernelSchedulerNode) -> None",
      "(torch._inductor.scheduler.SchedulerNode) -> None",
      "(torch._inductor.scheduler.ExternKernelSchedulerNode) -> None",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode) -> None",
      "(torch._inductor.scheduler.FusedSchedulerNode) -> None"
    ],
    "samples": 960
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2749,
    "func_name": "get_order",
    "type_comments": [
      "(torch.fx.node.Node) -> int"
    ],
    "samples": 3391
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2766,
    "func_name": "codegen",
    "type_comments": [
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2845,
    "func_name": "Scheduler.get_buffer_layout",
    "type_comments": [
      "(str) -> torch._inductor.ir.FixedLayout",
      "(str) -> torch._inductor.ir.NonOwningLayout"
    ],
    "samples": 1228
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2873,
    "func_name": "BaseScheduling.fuse",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> torch._inductor.scheduler.FusedSchedulerNode",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> torch._inductor.scheduler.ForeachKernelSchedulerNode",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> torch._inductor.scheduler.FusedSchedulerNode",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> torch._inductor.scheduler.FusedSchedulerNode",
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> torch._inductor.scheduler.FusedSchedulerNode",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> torch._inductor.scheduler.ForeachKernelSchedulerNode"
    ],
    "samples": 752
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2917,
    "func_name": "BaseScheduling.ready_to_flush",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 953
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2939,
    "func_name": "BaseScheduling.get_fusion_pair_priority",
    "type_comments": [
      "(torch._inductor.scheduler.FusedSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> int",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> int",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> int",
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.SchedulerNode) -> int"
    ],
    "samples": 819
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/select_algorithm.py",
    "line": 808,
    "func_name": "ExternKernelChoice.call_name",
    "type_comments": [
      "() -> str"
    ],
    "samples": 438
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/select_algorithm.py",
    "line": 825,
    "func_name": "ExternKernelChoice.bind",
    "type_comments": [
      "(Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FlexibleLayout, Tuple[]) -> torch._inductor.select_algorithm.ExternKernelCaller",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FlexibleLayout, Tuple[]) -> torch._inductor.select_algorithm.ExternKernelCaller",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FlexibleLayout, Tuple[]) -> torch._inductor.select_algorithm.ExternKernelCaller",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], torch._inductor.ir.FlexibleLayout, Tuple[]) -> torch._inductor.select_algorithm.ExternKernelCaller",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox], torch._inductor.ir.FixedLayout, Tuple[]) -> torch._inductor.select_algorithm.ExternKernelCaller",
      "(Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox], torch._inductor.ir.FixedLayout, Tuple[]) -> torch._inductor.select_algorithm.ExternKernelCaller",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], torch._inductor.ir.FixedLayout, Tuple[]) -> torch._inductor.select_algorithm.ExternKernelCaller",
      "(Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox], torch._inductor.ir.FlexibleLayout, Tuple[]) -> torch._inductor.select_algorithm.ExternKernelCaller",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FlexibleLayout, Tuple[]) -> torch._inductor.select_algorithm.ExternKernelCaller",
      "(Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FixedLayout, Tuple[]) -> torch._inductor.select_algorithm.ExternKernelCaller",
      "(List[torch._inductor.ir.TensorBox], torch._inductor.ir.FixedLayout, List[str]) -> torch._inductor.select_algorithm.ExternKernelCaller",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], torch._inductor.ir.FlexibleLayout, Tuple[]) -> torch._inductor.select_algorithm.ExternKernelCaller",
      "(Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FixedLayout, Tuple[]) -> torch._inductor.select_algorithm.ExternKernelCaller",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox], torch._inductor.ir.FlexibleLayout, Tuple[]) -> torch._inductor.select_algorithm.ExternKernelCaller"
    ],
    "samples": 438
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/select_algorithm.py",
    "line": 911,
    "func_name": "ExternKernelCaller.__init__",
    "type_comments": [
      "(torch._inductor.select_algorithm.ExternKernelChoice, Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox], torch._inductor.ir.FlexibleLayout, Dict, bool) -> None",
      "(torch._inductor.select_algorithm.ExternKernelChoice, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FlexibleLayout, Dict[str, int], bool) -> None",
      "(torch._inductor.select_algorithm.ExternKernelChoice, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FlexibleLayout, Dict, bool) -> None",
      "(torch._inductor.select_algorithm.ExternKernelChoice, Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FixedLayout, Dict, bool) -> None",
      "(torch._inductor.select_algorithm.ExternKernelChoice, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FixedLayout, Dict, bool) -> None",
      "(torch._inductor.select_algorithm.ExternKernelChoice, List[torch._inductor.ir.TensorBox], torch._inductor.ir.FixedLayout, Dict[str, Union[Tuple[int], bool]], bool) -> None",
      "(torch._inductor.select_algorithm.ExternKernelChoice, Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox], torch._inductor.ir.FixedLayout, Dict, bool) -> None",
      "(torch._inductor.select_algorithm.ExternKernelChoice, Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FlexibleLayout, Dict, bool) -> None",
      "(torch._inductor.select_algorithm.ExternKernelChoice, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], torch._inductor.ir.FixedLayout, Dict, bool) -> None",
      "(torch._inductor.select_algorithm.ExternKernelChoice, Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], torch._inductor.ir.FlexibleLayout, Dict, bool) -> None",
      "(torch._inductor.select_algorithm.ExternKernelChoice, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox], torch._inductor.ir.FlexibleLayout, Dict[str, int], bool) -> None",
      "(torch._inductor.select_algorithm.ExternKernelChoice, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox], torch._inductor.ir.FixedLayout, Dict, bool) -> None",
      "(torch._inductor.select_algorithm.ExternKernelChoice, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], torch._inductor.ir.FlexibleLayout, Dict[str, int], bool) -> None",
      "(torch._inductor.select_algorithm.ExternKernelChoice, Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], torch._inductor.ir.FlexibleLayout, Dict[str, int], bool) -> None",
      "(torch._inductor.select_algorithm.ExternKernelChoice, List[torch._inductor.ir.TensorBox], torch._inductor.ir.FixedLayout, Dict[str, Union[Tuple[int, int], bool]], bool) -> None"
    ],
    "samples": 438
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/select_algorithm.py",
    "line": 962,
    "func_name": "ExternKernelCaller.output_node",
    "type_comments": [
      "() -> torch._inductor.ir.TensorBox"
    ],
    "samples": 438
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/select_algorithm.py",
    "line": 994,
    "func_name": "get_mm_log_filename",
    "type_comments": [
      "() -> None"
    ],
    "samples": 57
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/select_algorithm.py",
    "line": 1121,
    "func_name": "AlgorithmSelectorCache.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 57
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/select_algorithm.py",
    "line": 1130,
    "func_name": "AlgorithmSelectorCache.__call__",
    "type_comments": [
      "(str, List[torch._inductor.select_algorithm.ExternKernelCaller], List[torch._inductor.ir.StorageBox], torch._inductor.ir.FixedLayout, None, int, bool) -> torch._inductor.ir.TensorBox",
      "(str, List[torch._inductor.select_algorithm.ExternKernelCaller], List[torch._inductor.ir.ReinterpretView], torch._inductor.ir.FixedLayout, None, int, bool) -> torch._inductor.ir.TensorBox",
      "(str, List[torch._inductor.select_algorithm.ExternKernelCaller], List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.TensorBox]], torch._inductor.ir.FlexibleLayout, None, int, bool) -> torch._inductor.ir.TensorBox",
      "(str, List[torch._inductor.select_algorithm.ExternKernelCaller], List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox, torch._inductor.ir.TensorBox]], torch._inductor.ir.FlexibleLayout, None, int, bool) -> torch._inductor.ir.TensorBox",
      "(str, List[torch._inductor.select_algorithm.ExternKernelCaller], List[torch._inductor.ir.TensorBox], torch._inductor.ir.FixedLayout, None, int, bool) -> torch._inductor.ir.TensorBox",
      "(str, List[torch._inductor.select_algorithm.ExternKernelCaller], List[Union[torch._inductor.ir.StorageBox, torch._inductor.ir.TensorBox]], torch._inductor.ir.FlexibleLayout, None, int, bool) -> torch._inductor.ir.TensorBox",
      "(str, List[torch._inductor.select_algorithm.ExternKernelCaller], List[Union[torch._inductor.ir.StorageBox, torch._inductor.ir.TensorBox]], torch._inductor.ir.FixedLayout, None, int, bool) -> torch._inductor.ir.TensorBox",
      "(str, List[torch._inductor.select_algorithm.ExternKernelCaller], List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]], torch._inductor.ir.FixedLayout, None, int, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 438
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/select_algorithm.py",
    "line": 1670,
    "func_name": "autotune_select_algorithm",
    "type_comments": [
      "(*Union[List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.TensorBox]], List[torch._inductor.select_algorithm.ExternKernelCaller], str, torch._inductor.ir.FlexibleLayout]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[Union[torch._inductor.ir.StorageBox, torch._inductor.ir.TensorBox]], List[torch._inductor.select_algorithm.ExternKernelCaller], str, torch._inductor.ir.FlexibleLayout]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox]], List[torch._inductor.select_algorithm.ExternKernelCaller], str, torch._inductor.ir.FixedLayout]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[torch._inductor.ir.StorageBox], List[torch._inductor.select_algorithm.ExternKernelCaller], str, torch._inductor.ir.FixedLayout]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[Union[torch._inductor.ir.StorageBox, torch._inductor.ir.TensorBox]], List[torch._inductor.select_algorithm.ExternKernelCaller], str, torch._inductor.ir.FixedLayout]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[Union[torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox, torch._inductor.ir.TensorBox]], List[torch._inductor.select_algorithm.ExternKernelCaller], str, torch._inductor.ir.FlexibleLayout]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[torch._inductor.ir.ReinterpretView], List[torch._inductor.select_algorithm.ExternKernelCaller], str, torch._inductor.ir.FixedLayout]) -> torch._inductor.ir.TensorBox",
      "(*Union[List[torch._inductor.ir.TensorBox], List[torch._inductor.select_algorithm.ExternKernelCaller], str, torch._inductor.ir.FixedLayout]) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 438
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/select_algorithm.py",
    "line": 1683,
    "func_name": "realize_inputs",
    "type_comments": [
      "(*torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(*torch._inductor.ir.TensorBox) -> torch._inductor.ir.ReinterpretView",
      "(*torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(*torch._inductor.ir.TensorBox) -> torch._inductor.ir.StorageBox"
    ],
    "samples": 611
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 42,
    "func_name": "SizeVarAllocator.__init__",
    "type_comments": [
      "(torch.fx.experimental.symbolic_shapes.ShapeEnv) -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 65,
    "func_name": "SizeVarAllocator.simplify",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.numbers.One) -> sympy.core.numbers.One",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(int) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Zero) -> sympy.core.numbers.Zero",
      "(int) -> sympy.core.numbers.NegativeOne",
      "(sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add) -> sympy.core.add.Add",
      "(sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.mul.Mul) -> sympy.core.mul.Mul",
      "(sympy.core.symbol.Symbol) -> sympy.core.numbers.Integer",
      "(torch.utils._sympy.functions.FloorDiv) -> torch.utils._sympy.functions.FloorDiv",
      "(int) -> sympy.core.numbers.One",
      "(torch.utils._sympy.functions.Identity) -> torch.utils._sympy.functions.Identity"
    ],
    "samples": 31694
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 68,
    "func_name": "SizeVarAllocator.make_simplify_with_ranges_cache",
    "type_comments": [
      "() -> function"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 75,
    "func_name": "simplify_with_ranges",
    "type_comments": [
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> sympy.core.add.Add",
      "(torch.utils._sympy.functions.Identity, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> torch.utils._sympy.functions.Identity",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[int, torch.utils._sympy.functions.FloorDiv]]) -> sympy.core.add.Add",
      "(sympy.core.numbers.Integer, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]) -> sympy.core.add.Add",
      "(torch.utils._sympy.functions.Identity, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch.utils._sympy.functions.Identity",
      "(sympy.core.mul.Mul, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]) -> sympy.core.mul.Mul",
      "(torch.utils._sympy.functions.ModularIndexing, Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.mul.Mul, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> sympy.core.mul.Mul",
      "(sympy.core.mul.Mul, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.core.mul.Mul",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.numbers.Integer, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.numbers.Integer",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, int]) -> sympy.core.symbol.Symbol",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.symbol.Symbol",
      "(torch.utils._sympy.functions.FloatTrueDiv, Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(sympy.functions.elementary.complexes.Abs, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.functions.elementary.complexes.Abs",
      "(torch.utils._sympy.functions.ModularIndexing, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> sympy.core.symbol.Symbol",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> sympy.core.symbol.Symbol",
      "(torch.utils._sympy.functions.FloorDiv, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch.utils._sympy.functions.FloorDiv",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]) -> sympy.core.add.Add",
      "(torch.utils._sympy.functions.FloatTrueDiv, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]) -> sympy.core.symbol.Symbol",
      "(sympy.core.mul.Mul, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.mul.Mul",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer]]) -> sympy.core.add.Add",
      "(torch.utils._sympy.functions.ModularIndexing, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> torch.utils._sympy.functions.FloorDiv",
      "(sympy.functions.elementary.miscellaneous.Min, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.functions.elementary.miscellaneous.Min",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, int]) -> sympy.core.add.Add",
      "(sympy.core.numbers.Integer, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.numbers.Integer",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.core.symbol.Symbol",
      "(sympy.core.numbers.Zero, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.core.numbers.Zero",
      "(torch.utils._sympy.functions.FloatTrueDiv, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(sympy.core.numbers.Zero, Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(sympy.functions.elementary.complexes.Abs, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.functions.elementary.complexes.Abs",
      "(sympy.core.add.Add, Dict[sympy.core.add.Add, sympy.core.mul.Mul]) -> sympy.core.add.Add",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(sympy.core.numbers.Zero, Dict) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Dict[Union[sympy.core.add.Add, sympy.core.symbol.Symbol], sympy.core.numbers.Integer]) -> sympy.core.add.Add"
    ],
    "samples": 14106
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 90,
    "func_name": "SizeVarAllocator.make_simplify_loops_cache",
    "type_comments": [
      "() -> function"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 97,
    "func_name": "simplify_loops",
    "type_comments": [
      "(List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List, List, List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]) -> Tuple[List, function, function]",
      "(List, List, List[Union[sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.symbol.Symbol]], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.mul.Mul, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List, List, List[sympy.core.add.Add]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List, List, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List, List, List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[int], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.mul.Mul]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List, List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.mul.Mul]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> Tuple[List[sympy.core.symbol.Symbol], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> Tuple[List[sympy.core.symbol.Symbol], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List, List, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[int], List[sympy.core.symbol.Symbol]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List, List, List[sympy.core.numbers.Zero]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.symbol.Symbol]], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List, Tuple[], List[sympy.core.numbers.Zero]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.mul.Mul]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol, sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer], List[Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.symbol.Symbol], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[torch.utils._sympy.functions.FloorDiv], List[Union[sympy.core.add.Add, sympy.core.mul.Mul]]) -> Tuple[List[torch.utils._sympy.functions.FloorDiv], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv], List[Union[sympy.core.add.Add, sympy.core.mul.Mul]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.mul.Mul], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.mul.Mul]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul], List[sympy.core.symbol.Symbol]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List, List, List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.Zero]]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[int, torch.utils._sympy.functions.FloorDiv]], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.functions.elementary.complexes.Abs]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.mul.Mul], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]"
    ],
    "samples": 7290
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 112,
    "func_name": "SizeVarAllocator._simplify_with_ranges",
    "type_comments": [
      "(sympy.functions.elementary.miscellaneous.Min, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> sympy.functions.elementary.miscellaneous.Min",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> sympy.core.add.Add",
      "(torch.utils._sympy.functions.Identity, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> torch.utils._sympy.functions.Identity",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[int, torch.utils._sympy.functions.FloorDiv]]) -> sympy.core.add.Add",
      "(sympy.core.numbers.Integer, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.symbol.Symbol",
      "(torch.utils._sympy.functions.FloatTrueDiv, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]) -> sympy.core.add.Add",
      "(sympy.core.mul.Mul, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]) -> sympy.core.mul.Mul",
      "(sympy.core.numbers.Zero, Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> sympy.core.numbers.Zero",
      "(sympy.core.mul.Mul, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> sympy.core.mul.Mul",
      "(sympy.core.mul.Mul, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.core.mul.Mul",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, int]) -> sympy.core.symbol.Symbol",
      "(sympy.core.symbol.Symbol, Dict[Union[sympy.core.add.Add, sympy.core.symbol.Symbol], sympy.core.numbers.Integer]) -> sympy.core.symbol.Symbol",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.functions.elementary.complexes.Abs, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.functions.elementary.complexes.Abs",
      "(torch.utils._sympy.functions.ModularIndexing, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> sympy.core.symbol.Symbol",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> sympy.core.symbol.Symbol",
      "(torch.utils._sympy.functions.FloorDiv, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch.utils._sympy.functions.FloorDiv",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]) -> sympy.core.add.Add",
      "(sympy.core.numbers.Zero, Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer]]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]) -> sympy.core.symbol.Symbol",
      "(sympy.core.mul.Mul, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.mul.Mul",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer]]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.utils._sympy.functions.ModularIndexing, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, int]) -> sympy.core.add.Add",
      "(sympy.core.numbers.Integer, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.numbers.Integer",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.core.symbol.Symbol",
      "(sympy.core.numbers.Zero, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.core.numbers.Zero",
      "(torch.utils._sympy.functions.FloatTrueDiv, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(sympy.core.numbers.Zero, Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[int, torch.utils._sympy.functions.FloorDiv]]) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(sympy.functions.elementary.complexes.Abs, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.functions.elementary.complexes.Abs",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(sympy.core.numbers.Zero, Dict) -> sympy.core.numbers.Zero"
    ],
    "samples": 1395
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 186,
    "func_name": "SizeVarAllocator._simplify_loops_impl",
    "type_comments": [
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List, List, List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.mul.Mul], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List, List, List[Union[sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.symbol.Symbol]], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.mul.Mul, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List, List, List[sympy.core.add.Add]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol, torch.utils._sympy.functions.FloatTrueDiv]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List, List, List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol, torch.utils._sympy.functions.FloatTrueDiv]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> Tuple[List[sympy.core.symbol.Symbol], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> Tuple[List[sympy.core.symbol.Symbol], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.symbol.Symbol], function, function]",
      "(List, List, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], List[int], List[sympy.core.symbol.Symbol]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[int, torch.utils._sympy.functions.FloorDiv]], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer], List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.symbol.Symbol]], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List, List, List[sympy.core.numbers.Zero]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul], List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol, sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.mul.Mul], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul], List[Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv], List[Union[sympy.core.add.Add, sympy.core.mul.Mul]]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]], function, function]",
      "(List, List, List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.Zero]]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul], List[sympy.core.symbol.Symbol]) -> Tuple[List[sympy.core.mul.Mul], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[sympy.core.symbol.Symbol]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List, List, List[Union[sympy.core.mul.Mul, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> Tuple[List, function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[Union[int, torch.utils._sympy.functions.FloorDiv]], List[sympy.core.add.Add]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.functions.elementary.complexes.Abs]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.symbol.Symbol, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.mul.Mul], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer], List[sympy.core.add.Add]) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], function, function]",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.Zero]]) -> Tuple[List[sympy.core.numbers.Integer], function, function]"
    ],
    "samples": 1047
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 214,
    "func_name": "can_merge_dims",
    "type_comments": [
      "(int, int) -> bool"
    ],
    "samples": 1842
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 246,
    "func_name": "reindex",
    "type_comments": [
      "(List[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List) -> List",
      "(List[sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]"
    ],
    "samples": 7111
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 289,
    "func_name": "SizeVarAllocator.is_expr_static_and_true",
    "type_comments": [
      "(sympy.core.relational.LessThan) -> bool",
      "(sympy.core.relational.GreaterThan) -> bool",
      "(sympy.logic.boolalg.BooleanTrue) -> bool",
      "(sympy.core.relational.StrictLessThan) -> bool",
      "(bool) -> bool",
      "(sympy.logic.boolalg.BooleanFalse) -> bool",
      "(sympy.core.relational.Equality) -> bool"
    ],
    "samples": 23064
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 302,
    "func_name": "SizeVarAllocator.statically_known_equals",
    "type_comments": [
      "(sympy.core.numbers.One, int) -> bool",
      "(sympy.core.numbers.Integer, sympy.core.mul.Mul) -> bool",
      "(sympy.core.numbers.Integer, int) -> bool",
      "(sympy.core.mul.Mul, int) -> bool",
      "(sympy.core.symbol.Symbol, int) -> bool",
      "(sympy.core.mul.Mul, sympy.core.mul.Mul) -> bool",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.One) -> bool",
      "(int, sympy.core.numbers.Zero) -> bool",
      "(sympy.core.numbers.Integer, sympy.core.numbers.One) -> bool",
      "(int, sympy.core.numbers.One) -> bool",
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol) -> bool",
      "(sympy.core.numbers.One, sympy.core.symbol.Symbol) -> bool",
      "(sympy.core.numbers.One, sympy.core.numbers.Integer) -> bool",
      "(torch.utils._sympy.functions.FloorDiv, torch.utils._sympy.functions.FloorDiv) -> bool",
      "(sympy.core.mul.Mul, sympy.core.numbers.One) -> bool",
      "(sympy.core.numbers.One, sympy.core.numbers.One) -> bool",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> bool",
      "(int, sympy.core.numbers.Integer) -> bool",
      "(torch.utils._sympy.functions.FloorDiv, int) -> bool"
    ],
    "samples": 11793
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 309,
    "func_name": "SizeVarAllocator.statically_known_list_equals",
    "type_comments": [
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> bool",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> bool",
      "(List[sympy.core.mul.Mul], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer]) -> bool",
      "(List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]) -> bool",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]], List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.mul.Mul]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> bool",
      "(List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[sympy.core.mul.Mul]) -> bool",
      "(List[sympy.core.numbers.One], List[sympy.core.numbers.One]) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> bool"
    ],
    "samples": 854
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 318,
    "func_name": "SizeVarAllocator.statically_known_leq",
    "type_comments": [
      "(sympy.core.mul.Mul, sympy.core.numbers.Integer) -> bool",
      "(sympy.core.numbers.Integer, int) -> bool",
      "(sympy.core.mul.Mul, sympy.core.numbers.One) -> bool",
      "(sympy.core.mul.Mul, int) -> bool",
      "(sympy.core.symbol.Symbol, int) -> bool",
      "(int, int) -> bool",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> bool",
      "(int, sympy.core.numbers.Zero) -> bool",
      "(sympy.core.add.Add, int) -> bool",
      "(sympy.core.numbers.Integer, sympy.core.numbers.One) -> bool",
      "(sympy.core.numbers.One, int) -> bool",
      "(int, sympy.core.numbers.One) -> bool",
      "(int, sympy.core.numbers.Integer) -> bool",
      "(torch.utils._sympy.functions.FloorDiv, sympy.core.numbers.One) -> bool",
      "(torch.utils._sympy.functions.FloorDiv, int) -> bool",
      "(int, sympy.core.symbol.Symbol) -> bool"
    ],
    "samples": 540
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 326,
    "func_name": "SizeVarAllocator.statically_known_geq",
    "type_comments": [
      "(sympy.core.numbers.Integer, int) -> bool",
      "(sympy.core.symbol.Symbol, int) -> bool"
    ],
    "samples": 321
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 350,
    "func_name": "SizeVarAllocator.statically_known_multiple_of",
    "type_comments": [
      "(sympy.core.numbers.Integer, int) -> bool",
      "(sympy.core.mul.Mul, int) -> bool",
      "(sympy.core.symbol.Symbol, int) -> bool",
      "(sympy.core.mul.Mul, sympy.core.mul.Mul) -> bool",
      "(sympy.core.add.Add, sympy.core.add.Add) -> bool",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> bool",
      "(sympy.core.mul.Mul, sympy.core.symbol.Symbol) -> bool",
      "(sympy.core.add.Add, int) -> bool",
      "(sympy.core.numbers.One, int) -> bool",
      "(sympy.core.numbers.Zero, int) -> bool",
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol) -> bool",
      "(torch.utils._sympy.functions.FloorDiv, int) -> bool"
    ],
    "samples": 8326
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 371,
    "func_name": "SizeVarAllocator.guard_equals",
    "type_comments": [
      "(sympy.core.mul.Mul, sympy.core.mul.Mul) -> sympy.core.mul.Mul",
      "(sympy.core.numbers.One, int) -> sympy.core.numbers.One",
      "(sympy.core.numbers.One, sympy.core.numbers.One) -> sympy.core.numbers.One",
      "(sympy.core.numbers.Integer, int) -> sympy.core.numbers.Integer",
      "(int, sympy.core.numbers.Integer) -> int",
      "(sympy.core.add.Add, sympy.core.add.Add) -> sympy.core.add.Add",
      "(int, int) -> int",
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> sympy.core.numbers.Integer"
    ],
    "samples": 4227
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 379,
    "func_name": "SizeVarAllocator.guard_leq",
    "type_comments": [
      "(int, sympy.core.add.Add) -> None",
      "(sympy.core.numbers.One, sympy.core.numbers.One) -> None",
      "(sympy.core.symbol.Symbol, int) -> None",
      "(sympy.core.numbers.One, int) -> None",
      "(sympy.core.numbers.Integer, int) -> None",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> None",
      "(int, sympy.core.numbers.One) -> None",
      "(sympy.core.add.Add, sympy.core.symbol.Symbol) -> None",
      "(int, sympy.core.numbers.Integer) -> None",
      "(sympy.core.mul.Mul, int) -> None",
      "(int, int) -> None",
      "(sympy.core.add.Add, int) -> None",
      "(sympy.core.numbers.Zero, int) -> None",
      "(sympy.core.numbers.One, sympy.core.numbers.Integer) -> None"
    ],
    "samples": 3283
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 382,
    "func_name": "SizeVarAllocator.guard_lt",
    "type_comments": [
      "(sympy.core.symbol.Symbol, int) -> None",
      "(sympy.core.numbers.One, int) -> None",
      "(sympy.core.numbers.Integer, int) -> None",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> None",
      "(int, sympy.core.numbers.Integer) -> None",
      "(sympy.core.mul.Mul, int) -> None",
      "(int, sympy.core.symbol.Symbol) -> None",
      "(int, int) -> None",
      "(sympy.core.add.Add, int) -> None",
      "(sympy.core.numbers.Zero, int) -> None",
      "(sympy.core.add.Add, sympy.core.add.Add) -> None",
      "(sympy.core.numbers.One, sympy.core.numbers.Integer) -> None"
    ],
    "samples": 3284
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 409,
    "func_name": "SizeVarAllocator.evaluate_expr",
    "type_comments": [
      "(sympy.logic.boolalg.BooleanTrue) -> sympy.logic.boolalg.BooleanTrue"
    ],
    "samples": 275
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 449,
    "func_name": "SizeVarAllocator.evaluate_static_shape",
    "type_comments": [
      "(sympy.core.numbers.Integer) -> int",
      "(sympy.core.numbers.One) -> int",
      "(int) -> int"
    ],
    "samples": 468
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 464,
    "func_name": "SizeVarAllocator.symbolic_hint",
    "type_comments": [
      "(sympy.core.numbers.Integer) -> int",
      "(sympy.core.add.Add) -> sympy.core.numbers.One",
      "(sympy.core.add.Add) -> sympy.core.add.Add",
      "(sympy.core.numbers.One) -> int",
      "(sympy.core.add.Add) -> sympy.core.numbers.Integer",
      "(sympy.core.mul.Mul) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Zero) -> int",
      "(sympy.core.symbol.Symbol) -> sympy.core.numbers.Integer",
      "(int) -> int",
      "(torch.utils._sympy.functions.FloorDiv) -> sympy.core.numbers.Integer"
    ],
    "samples": 20643
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 481,
    "func_name": "SizeVarAllocator.size_hint",
    "type_comments": [
      "(sympy.core.add.Add, None) -> pyannotate_runtime.collect_types.NoReturnType",
      "(sympy.core.numbers.Zero, None) -> int",
      "(sympy.core.numbers.NegativeOne, None) -> int",
      "(sympy.core.numbers.One, None) -> int",
      "(sympy.core.add.Add, None) -> int",
      "(sympy.core.mul.Mul, int) -> int",
      "(sympy.core.symbol.Symbol, None) -> int",
      "(sympy.core.symbol.Symbol, int) -> int",
      "(int, None) -> int",
      "(sympy.core.numbers.Integer, None) -> int",
      "(sympy.core.numbers.One, int) -> int",
      "(sympy.core.numbers.Integer, int) -> int",
      "(sympy.core.mul.Mul, None) -> int",
      "(sympy.core.numbers.Zero, int) -> int",
      "(int, int) -> int"
    ],
    "samples": 20463
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 504,
    "func_name": "SizeVarAllocator.size_hints",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], None) -> Tuple[int, int, int]",
      "(List[Union[int, sympy.core.numbers.Integer, sympy.core.numbers.One]], None) -> Tuple[int, int, int]",
      "(List[sympy.core.numbers.One], None) -> Tuple[int, int]",
      "(Tuple[int], None) -> Tuple[int]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], None) -> Tuple[int, int, int, int, int]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], None) -> Tuple[int, int, int, int]",
      "(Tuple[int, int], None) -> Tuple[int, int]",
      "(List[sympy.core.numbers.One], None) -> Tuple[int]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], None) -> Tuple[int, int]"
    ],
    "samples": 367
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 512,
    "func_name": "SizeVarAllocator._lru_cache",
    "type_comments": [
      "(method, None) -> function"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 520,
    "func_name": "wrapper",
    "type_comments": [
      "(*Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[sympy.core.numbers.Integer]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[sympy.core.numbers.One]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], sympy.core.mul.Mul]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.symbol.Symbol], sympy.core.numbers.Zero]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[sympy.core.numbers.One]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Zero, torch.utils._sympy.functions.FloorDiv]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol], sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.symbol.Symbol]) -> List",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.numbers.Zero]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], torch.utils._sympy.functions.ModularIndexing]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol], sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], sympy.core.numbers.Zero]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.mul.Mul]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(*Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.symbol.Symbol]) -> List",
      "(*Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], sympy.core.mul.Mul]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[sympy.core.numbers.Integer]",
      "(*Union[Tuple[sympy.core.symbol.Symbol], sympy.core.mul.Mul]) -> List[sympy.core.numbers.Integer]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol], sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.One]",
      "(*Union[Tuple[], Tuple[sympy.core.symbol.Symbol], sympy.core.numbers.Zero]) -> List",
      "(*Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.numbers.One]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.symbol.Symbol], int]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol], torch.utils._sympy.functions.ModularIndexing]) -> List[sympy.core.numbers.One]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], sympy.core.numbers.One]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[sympy.core.numbers.Integer]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], torch.utils._sympy.functions.Identity]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero], sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.symbol.Symbol]) -> List",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.numbers.Zero]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero], sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[sympy.core.numbers.Integer]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[], Tuple[sympy.core.symbol.Symbol], sympy.core.symbol.Symbol]) -> List",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero], sympy.core.numbers.Zero]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.numbers.One]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[], sympy.core.add.Add]) -> List",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[sympy.core.numbers.Integer]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "(*Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[], sympy.core.numbers.Zero]) -> List",
      "(*Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List",
      "(*Union[Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], sympy.core.mul.Mul]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[], sympy.core.symbol.Symbol]) -> List",
      "(*Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[sympy.core.numbers.Integer]",
      "(*Union[Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[sympy.core.numbers.Integer]",
      "(*Union[Tuple[sympy.core.symbol.Symbol], sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.One]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], sympy.core.numbers.Integer]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero], sympy.core.mul.Mul]) -> List[sympy.core.numbers.Zero]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], sympy.core.add.Add]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(*Union[Tuple[sympy.core.symbol.Symbol], sympy.core.add.Add]) -> List[sympy.core.numbers.One]"
    ],
    "samples": 11193
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 530,
    "func_name": "SizeVarAllocator.make_stride_vars_cache",
    "type_comments": [
      "() -> function"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 533,
    "func_name": "stride_vars",
    "type_comments": [
      "(sympy.core.add.Add, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.mul.Mul, List[sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.One, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.numbers.Zero, Tuple[], None) -> List",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, List, List[sympy.core.symbol.Symbol]) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol], dict_keys) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.One, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.numbers.Integer, List[sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], dict_keys) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[sympy.core.numbers.Zero]",
      "(torch.utils._sympy.functions.Identity, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, List, None) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], dict_keys) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, List, None) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.Zero, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.numbers.One, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol], dict_keys) -> List[sympy.core.numbers.One]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.One]",
      "(sympy.core.numbers.Zero, List, List[sympy.core.symbol.Symbol]) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.Zero, List[sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch.utils._sympy.functions.ModularIndexing, List[sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.One]",
      "(sympy.core.symbol.Symbol, List[sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(torch.utils._sympy.functions.Identity, List[sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.One]",
      "(torch.utils._sympy.functions.ModularIndexing, Tuple[sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.One]",
      "(sympy.core.add.Add, List, List[sympy.core.symbol.Symbol]) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, List[sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.numbers.Zero, List, List) -> List",
      "(sympy.core.symbol.Symbol, List[sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.One]",
      "(sympy.core.add.Add, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], dict_keys) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.Zero, List, None) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(int, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.Integer, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], dict_keys) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.symbol.Symbol, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.One]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]"
    ],
    "samples": 11193
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 544,
    "func_name": "SizeVarAllocator._stride_vars",
    "type_comments": [
      "(sympy.core.mul.Mul, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.One, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.numbers.Zero], Tuple[sympy.core.numbers.Zero]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[], Tuple[]) -> List",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch.utils._sympy.functions.Identity, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.numbers.Integer, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.add.Add, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.One]",
      "(sympy.core.symbol.Symbol, Tuple[], Tuple[]) -> List",
      "(sympy.core.add.Add, Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.One]",
      "(sympy.core.numbers.Zero, Tuple[], Tuple[sympy.core.symbol.Symbol]) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.add.Add, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.One]",
      "(sympy.core.numbers.One, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.NegativeOne]]",
      "(torch.utils._sympy.functions.ModularIndexing, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[torch.utils._sympy.functions.ModularIndexing]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.numbers.Zero, Tuple[], Tuple[]) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero]]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.mul.Mul, Tuple[], Tuple[]) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero, torch.utils._sympy.functions.FloorDiv]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer]]",
      "(sympy.core.symbol.Symbol, Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.One]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.One]",
      "(sympy.core.add.Add, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[], Tuple[sympy.core.symbol.Symbol]) -> List",
      "(torch.utils._sympy.functions.FloatTrueDiv, Tuple[], Tuple[]) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.One]",
      "(sympy.core.symbol.Symbol, Tuple[], Tuple[sympy.core.symbol.Symbol]) -> List",
      "(torch.utils._sympy.functions.FloatTrueDiv, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Zero]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, torch.utils._sympy.functions.FloorDiv]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.numbers.Integer]",
      "(sympy.core.add.Add, Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(sympy.core.add.Add, Tuple[], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]"
    ],
    "samples": 1220
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 584,
    "func_name": "SizeVarAllocator.offset_var",
    "type_comments": [
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Integer",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero"
    ],
    "samples": 381
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 589,
    "func_name": "SizeVarAllocator.stride_hints",
    "type_comments": [
      "(sympy.core.mul.Mul, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[int]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[int]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[int]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[int]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.numbers.One, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[int]",
      "(torch.utils._sympy.functions.Identity, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[int]",
      "(sympy.core.add.Add, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], dict_keys) -> List[int]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[int]",
      "(torch.utils._sympy.functions.ModularIndexing, List[sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.symbol.Symbol, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[int]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[int]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol], dict_keys) -> List[int]",
      "(sympy.core.numbers.Zero, List, List) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[int]",
      "(sympy.core.symbol.Symbol, List[sympy.core.symbol.Symbol], None) -> List[int]",
      "(torch.utils._sympy.functions.Identity, List[sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.add.Add, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[int]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.numbers.Zero, List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> List[int]",
      "(sympy.core.mul.Mul, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[int]",
      "(sympy.core.numbers.Zero, List, List[sympy.core.symbol.Symbol]) -> List",
      "(sympy.core.numbers.Zero, Tuple[], None) -> List",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.symbol.Symbol, List, List[sympy.core.symbol.Symbol]) -> List",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.add.Add, List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], None) -> List[int]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[int]",
      "(sympy.core.add.Add, List[sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.numbers.One, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], dict_keys) -> List[int]",
      "(sympy.core.add.Add, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], dict_keys) -> List[int]",
      "(sympy.core.symbol.Symbol, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[int]",
      "(torch.utils._sympy.functions.ModularIndexing, Tuple[sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.numbers.Zero, Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[int]",
      "(sympy.core.add.Add, List, List[sympy.core.symbol.Symbol]) -> List",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], None) -> List[int]",
      "(sympy.core.numbers.Integer, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], None) -> List[int]",
      "(sympy.core.numbers.Integer, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[int]",
      "(sympy.core.add.Add, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], None) -> List[int]"
    ],
    "samples": 10131
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 681,
    "func_name": "SizeVarAllocator.expand_floor_div",
    "type_comments": [
      "(sympy.functions.elementary.miscellaneous.Min) -> bool",
      "(torch.utils._sympy.functions.FloorDiv) -> bool",
      "(torch.utils._sympy.functions.ModularIndexing) -> bool",
      "(sympy.core.numbers.Zero) -> bool",
      "(sympy.core.symbol.Symbol) -> bool",
      "(sympy.functions.elementary.complexes.Abs) -> bool",
      "(sympy.core.mul.Mul) -> bool",
      "(sympy.core.add.Add) -> bool",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> bool",
      "(sympy.functions.elementary.miscellaneous.Max) -> bool",
      "(sympy.core.numbers.Integer) -> bool"
    ],
    "samples": 2702
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 763,
    "func_name": "join_dimensions",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing) -> torch.utils._sympy.functions.ModularIndexing",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(sympy.core.numbers.Zero) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add) -> sympy.core.add.Add",
      "(sympy.functions.elementary.miscellaneous.Min) -> sympy.functions.elementary.miscellaneous.Min",
      "(sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.mul.Mul) -> sympy.core.mul.Mul",
      "(torch.utils._sympy.functions.Identity) -> torch.utils._sympy.functions.Identity",
      "(sympy.functions.elementary.miscellaneous.Max) -> sympy.functions.elementary.miscellaneous.Max"
    ],
    "samples": 1401
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 830,
    "func_name": "SimplifyIndexing.__init__",
    "type_comments": [
      "(torch._inductor.ir:LoopBodyBlock.__init__.<locals>.CaptureIndexing, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]) -> None",
      "(torch._inductor.codegen.common:Kernel.__enter__.<locals>.CSEProxy, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir:LoopBodyBlock.__init__.<locals>.CaptureIndexing, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> None",
      "(torch._inductor.codegen.common:Kernel.__enter__.<locals>.CSEProxy, Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> None",
      "(torch._inductor.ir:LoopBodyBlock.__init__.<locals>.CaptureIndexing, Dict) -> None",
      "(torch._inductor.ir:LoopBodyBlock.__init__.<locals>.CaptureIndexing, Dict[sympy.core.symbol.Symbol, Union[int, torch.utils._sympy.functions.FloorDiv]]) -> None",
      "(torch._inductor.ir:LoopBodyBlock.__init__.<locals>.CaptureIndexing, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]) -> None",
      "(torch._inductor.ir:LoopBodyBlock.__init__.<locals>.CaptureIndexing, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(torch._inductor.ir:LoopBodyBlock.__init__.<locals>.CaptureIndexing, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir:LoopBodyBlock.__init__.<locals>.CaptureIndexing, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir:LoopBodyBlock.__init__.<locals>.CaptureIndexing, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.ir:LoopBodyBlock.__init__.<locals>.CaptureIndexing, Dict[sympy.core.symbol.Symbol, int]) -> None",
      "(torch._inductor.ir:LoopBodyBlock.__init__.<locals>.CaptureIndexing, Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> None",
      "(torch._inductor.ir:LoopBodyBlock.__init__.<locals>.CaptureIndexing, Dict[sympy.core.symbol.Symbol, sympy.core.mul.Mul]) -> None",
      "(torch._inductor.codegen.common:Kernel.__enter__.<locals>.CSEProxy, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> None",
      "(torch._inductor.codegen.common:Kernel.__enter__.<locals>.CSEProxy, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv]]) -> None"
    ],
    "samples": 4019
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 837,
    "func_name": "SimplifyIndexing.load",
    "type_comments": [
      "(str, sympy.core.symbol.Symbol) -> torch._inductor.codegen.cpp.CppCSEVariable",
      "(str, torch.utils._sympy.functions.Identity) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, sympy.core.numbers.Zero) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, torch.utils._sympy.functions.Identity) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.mul.Mul) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.symbol.Symbol) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.mul.Mul) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, sympy.core.add.Add) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, sympy.core.symbol.Symbol) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, torch.utils._sympy.functions.ModularIndexing) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, torch.utils._sympy.functions.ModularIndexing) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.add.Add) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.numbers.Zero) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.numbers.Integer) -> torch.fx.proxy.Proxy"
    ],
    "samples": 7938
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 840,
    "func_name": "SimplifyIndexing.store",
    "type_comments": [
      "(str, sympy.core.add.Add, torch.fx.proxy.Proxy, None) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.add.Add, torch.fx.proxy.Proxy, str) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.numbers.Zero, torch._inductor.codegen.triton.TritonCSEVariable, None) -> None",
      "(str, sympy.core.add.Add, torch._inductor.codegen.triton.TritonCSEVariable, None) -> None",
      "(str, sympy.core.symbol.Symbol, torch.fx.proxy.Proxy, str) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.symbol.Symbol, torch.fx.proxy.Proxy, None) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.add.Add, torch._inductor.codegen.triton.TritonCSEVariable, str) -> None",
      "(str, sympy.core.symbol.Symbol, torch._inductor.codegen.triton.TritonCSEVariable, str) -> None",
      "(str, sympy.core.numbers.Zero, torch.fx.proxy.Proxy, None) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.symbol.Symbol, torch._inductor.codegen.triton.TritonCSEVariable, None) -> None"
    ],
    "samples": 3346
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 843,
    "func_name": "SimplifyIndexing.store_reduction",
    "type_comments": [
      "(str, sympy.core.add.Add, torch._inductor.codegen.triton.TritonCSEVariable) -> None",
      "(str, sympy.core.numbers.Zero, torch.fx.proxy.Proxy) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.symbol.Symbol, torch._inductor.codegen.triton.TritonCSEVariable) -> None",
      "(str, sympy.core.numbers.Zero, torch._inductor.codegen.triton.TritonCSEVariable) -> None",
      "(str, sympy.core.symbol.Symbol, torch.fx.proxy.Proxy) -> torch.fx.proxy.Proxy",
      "(str, sympy.core.add.Add, torch.fx.proxy.Proxy) -> torch.fx.proxy.Proxy"
    ],
    "samples": 827
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 846,
    "func_name": "SimplifyIndexing.index_expr",
    "type_comments": [
      "(sympy.core.symbol.Symbol, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.functions.elementary.miscellaneous.Min, torch.dtype) -> torch.fx.proxy.Proxy",
      "(torch.utils._sympy.functions.FloatTrueDiv, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.core.mul.Mul, torch.dtype) -> torch.fx.proxy.Proxy",
      "(torch.utils._sympy.functions.FloatTrueDiv, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(sympy.core.numbers.Integer, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(sympy.functions.elementary.miscellaneous.Max, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.core.symbol.Symbol, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(sympy.functions.elementary.complexes.Abs, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(sympy.core.add.Add, torch.dtype) -> torch.fx.proxy.Proxy",
      "(sympy.core.add.Add, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(sympy.functions.elementary.miscellaneous.Min, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(sympy.core.mul.Mul, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(sympy.functions.elementary.miscellaneous.Max, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch.utils._sympy.functions.FloorDiv, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(torch.utils._sympy.functions.ModularIndexing, torch.dtype) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(sympy.functions.elementary.complexes.Abs, torch.dtype) -> torch.fx.proxy.Proxy",
      "(torch.utils._sympy.functions.ModularIndexing, torch.dtype) -> torch.fx.proxy.Proxy",
      "(torch.utils._sympy.functions.FloorDiv, torch.dtype) -> torch.fx.proxy.Proxy"
    ],
    "samples": 923
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 199,
    "func_name": "decode_device",
    "type_comments": [
      "(torch.device) -> torch.device"
    ],
    "samples": 3323
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 210,
    "func_name": "sympy_product",
    "type_comments": [
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer",
      "(List[torch.utils._sympy.functions.FloorDiv]) -> torch.utils._sympy.functions.FloorDiv",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> sympy.core.mul.Mul",
      "(List[sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer",
      "(List[sympy.core.numbers.One]) -> sympy.core.numbers.One",
      "(List[int]) -> sympy.core.numbers.Integer",
      "(List[sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> sympy.core.mul.Mul",
      "(generator) -> sympy.core.numbers.Integer",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> sympy.core.mul.Mul",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]) -> sympy.core.mul.Mul",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> sympy.core.mul.Mul",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer",
      "(Tuple[int, int, int]) -> sympy.core.numbers.Integer",
      "(List[sympy.core.numbers.Zero]) -> sympy.core.numbers.Zero",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> sympy.core.numbers.Integer",
      "(generator) -> sympy.core.mul.Mul",
      "(Tuple[sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer",
      "(List[Union[int, sympy.core.symbol.Symbol]]) -> sympy.core.mul.Mul",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> sympy.core.mul.Mul",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer",
      "(List) -> sympy.core.numbers.One",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer",
      "(Tuple[sympy.core.numbers.One, sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> sympy.core.mul.Mul",
      "(torch.fx.immutable_collections.immutable_list) -> sympy.core.mul.Mul",
      "(List[sympy.core.mul.Mul]) -> sympy.core.mul.Mul",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> sympy.core.symbol.Symbol",
      "(List[Union[int, sympy.core.numbers.One]]) -> sympy.core.numbers.Integer",
      "(Tuple[sympy.core.symbol.Symbol, int, int]) -> sympy.core.mul.Mul",
      "(Tuple[sympy.core.numbers.Integer, int]) -> sympy.core.numbers.Integer",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> sympy.core.mul.Mul",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> sympy.core.mul.Mul",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> sympy.core.mul.Mul",
      "(Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer",
      "(Tuple[sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer"
    ],
    "samples": 21230
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 214,
    "func_name": "sympy_dot",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]) -> sympy.core.add.Add",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.One]) -> sympy.core.symbol.Symbol",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]) -> sympy.core.add.Add",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]) -> sympy.core.add.Add",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> sympy.core.add.Add",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.One, torch.utils._sympy.functions.FloorDiv]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol], List[sympy.core.numbers.One]) -> sympy.core.symbol.Symbol",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]) -> sympy.core.add.Add",
      "(List, List) -> sympy.core.numbers.Zero",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]) -> sympy.core.symbol.Symbol",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> sympy.core.add.Add",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]) -> sympy.core.add.Add",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One, torch.utils._sympy.functions.FloorDiv]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]) -> sympy.core.symbol.Symbol",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]) -> sympy.core.symbol.Symbol",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero]]) -> sympy.core.add.Add",
      "(List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero], List[sympy.core.numbers.Zero]) -> sympy.core.numbers.Zero",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer]) -> sympy.core.add.Add"
    ],
    "samples": 7416
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 219,
    "func_name": "unique",
    "type_comments": [
      "(dict_values) -> dict_values"
    ],
    "samples": 1569
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 237,
    "func_name": "_type_of",
    "type_comments": [
      "(torch.dtype) -> str"
    ],
    "samples": 2423
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 272,
    "func_name": "convert_shape_to_inductor",
    "type_comments": [
      "(Tuple[torch.SymInt, int]) -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(torch.Size) -> List",
      "(torch.Size) -> List[sympy.core.numbers.Zero]",
      "(Tuple[int]) -> List[sympy.core.numbers.One]",
      "(torch.Size) -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(Tuple[torch.SymInt, torch.SymInt, int, int]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch.Size) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch.Size) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "(Tuple[int, int, int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch.Size) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[int, int, int, int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch.Size) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]]",
      "(Tuple[int, int, int, int, int]) -> List[sympy.core.numbers.Integer]",
      "(Tuple[]) -> List",
      "(torch.Size) -> List[sympy.core.numbers.Integer]",
      "(torch.Size) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(Tuple[int, int]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(torch.Size) -> List[sympy.core.mul.Mul]",
      "(torch.Size) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(torch.Size) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(Tuple[int, int]) -> List[sympy.core.numbers.One]"
    ],
    "samples": 608
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 283,
    "func_name": "convert_shape_to_symint",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> List[Union[int, torch.SymInt]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Zero]]) -> List[int]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> List[Union[int, torch.SymInt]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> List[int]",
      "(List[int]) -> List[int]",
      "(List[sympy.core.numbers.One]) -> List[int]",
      "(List[sympy.core.numbers.Integer]) -> List[int]",
      "(List) -> List"
    ],
    "samples": 1630
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 302,
    "func_name": "is_view",
    "type_comments": [
      "(torch._ops.OpOverload) -> bool"
    ],
    "samples": 356
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 310,
    "func_name": "is_pointwise_use",
    "type_comments": [
      "(torch.fx.node.Node) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 317
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 392,
    "func_name": "cmp",
    "type_comments": [
      "(int, int) -> int",
      "(bool, bool) -> int"
    ],
    "samples": 926
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 433,
    "func_name": "cache_on_self",
    "type_comments": [
      "(function) -> function"
    ],
    "samples": 305
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 436,
    "func_name": "wrapper",
    "type_comments": [
      "() -> Tuple[Tuple[List, List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody, Tuple[List, List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> int",
      "() -> Tuple[Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[sympy.core.numbers.Integer], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> None",
      "() -> Tuple[Tuple[List[int], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> Tuple[Tuple[List, List], torch._inductor.ir.LoopBody, Tuple[List, List]]",
      "() -> Dict[torch.fx.node.Node, Union[torch.utils._sympy.value_ranges.ValueRangeAnalysis, torch.utils._sympy.value_ranges.ValueRanges]]",
      "() -> str",
      "() -> Tuple[Tuple[List[int], List[int]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> torch._inductor.bounds.BoundVars",
      "() -> Dict[torch.fx.node.Node, torch.utils._sympy.value_ranges.ValueRanges]",
      "() -> Dict[torch.fx.node.Node, Optional[Union[torch.utils._sympy.value_ranges.ValueRangeAnalysis, torch.utils._sympy.value_ranges.ValueRanges]]]",
      "() -> Set",
      "() -> Tuple[Tuple[List[Union[int, sympy.core.symbol.Symbol]], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> pyannotate_runtime.collect_types.UnknownType",
      "() -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[torch.utils._sympy.functions.FloorDiv]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[sympy.core.mul.Mul]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> List[str]",
      "() -> bool",
      "() -> Tuple[Tuple[List[Union[int, sympy.core.symbol.Symbol]], List[int]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> List[torch.fx.node.Node]",
      "() -> Tuple[Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> Tuple[Tuple[List[sympy.core.mul.Mul], List], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List]]",
      "() -> Set[str]",
      "() -> Tuple[Tuple[List[sympy.core.numbers.Integer], List[int]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[Union[int, sympy.core.numbers.Integer]], List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]",
      "() -> Tuple[Tuple[List[sympy.core.mul.Mul], List[sympy.core.numbers.Integer]], torch._inductor.ir.LoopBody, Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]]]"
    ],
    "samples": 23492
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 450,
    "func_name": "aggregate_origins",
    "type_comments": [
      "(torch._inductor.ir.RandomSeeds) -> Set[torch.fx.node.Node]",
      "(List[torch._inductor.scheduler.ForeachKernelSchedulerNode]) -> Set",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]]) -> Set[torch.fx.node.Node]",
      "(torch._inductor.ir.FallbackKernel) -> Set[torch.fx.node.Node]",
      "(List[torch._inductor.scheduler.SchedulerNode]) -> Set[torch.fx.node.Node]",
      "(torch._inductor.ir.ExternKernelOut) -> Set[torch.fx.node.Node]",
      "(torch._inductor.ir.ExternKernelAlloc) -> Set[torch.fx.node.Node]"
    ],
    "samples": 1192
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 469,
    "func_name": "get_fused_kernel_name",
    "type_comments": [
      "(List[torch._inductor.scheduler.SchedulerNode], str) -> str",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], str) -> str",
      "(List[torch._inductor.scheduler.ForeachKernelSchedulerNode], str) -> str"
    ],
    "samples": 562
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 502,
    "func_name": "get_kernel_metadata",
    "type_comments": [
      "(torch._inductor.ir.ExternKernelAlloc, torch._inductor.codegen.wrapper.WrapperCodeGen) -> Tuple[str, str]",
      "(torch._inductor.ir.ExternKernelOut, torch._inductor.codegen.wrapper.WrapperCodeGen) -> Tuple[str, str]",
      "(List[torch._inductor.scheduler.SchedulerNode], torch._inductor.codegen.wrapper.WrapperCodeGen) -> Tuple[str, str]",
      "(torch._inductor.ir.FallbackKernel, torch._inductor.codegen.wrapper.WrapperCodeGen) -> Tuple[str, str]",
      "(torch._inductor.ir.RandomSeeds, torch._inductor.codegen.wrapper.WrapperCodeGen) -> Tuple[str, str]",
      "(List[Union[torch._inductor.scheduler.SchedulerNode, type]], torch._inductor.codegen.wrapper.WrapperCodeGen) -> Tuple[str, str]",
      "(List[torch._inductor.scheduler.ForeachKernelSchedulerNode], torch._inductor.codegen.wrapper.WrapperCodeGen) -> Tuple[str, str]"
    ],
    "samples": 1089
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 528,
    "func_name": "dominated_nodes",
    "type_comments": [
      "(generator, None) -> Set[torch.fx.node.Node]",
      "(generator, None) -> Set",
      "(List[torch.fx.node.Node], function) -> Set[torch.fx.node.Node]"
    ],
    "samples": 1474
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 547,
    "func_name": "gather_origins",
    "type_comments": [
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch.utils._sympy.functions.IntTrueDiv, sympy.core.add.Add], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, torch.dtype], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, sympy.core.symbol.Symbol], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[sympy.core.symbol.Symbol, int], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[List[torch._inductor.ir.TensorBox], int], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[sympy.core.mul.Mul, int], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, torch.dtype], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, int, torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[int, torch.device], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, int, int], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[torch._inductor.ir.TensorBox, int, int, int], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[torch.fx.immutable_collections.immutable_list, float], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, bool, int, bool], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, bool], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, int], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[int], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], int], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch.utils._sympy.functions.IntTrueDiv, float], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[torch._inductor.ir.TensorBox, int, int, int], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, int, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, str], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, int], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[int, int, torch.fx.immutable_collections.immutable_list, torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], int], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch.fx.immutable_collections.immutable_list], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[int, torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, float], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[torch._inductor.ir.TensorBox, int, int], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[torch._inductor.ir.TensorBox, float], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, torch.device], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch.fx.immutable_collections.immutable_list, torch._inductor.ir.TensorBox, str], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], int], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], torch.fx.immutable_collections.immutable_dict) -> Set[torch.fx.node.Node]",
      "(Tuple[torch._inductor.ir.TensorBox, torch.utils._sympy.functions.FloatTrueDiv], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch.fx.immutable_collections.immutable_list, int], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, int], torch.fx.immutable_collections.immutable_dict) -> Set",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, bool, int, bool, None, bool], torch.fx.immutable_collections.immutable_dict) -> Set"
    ],
    "samples": 4458
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 552,
    "func_name": "is_unrealized_node",
    "type_comments": [
      "(torch._inductor.ir.StorageBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.layout) -> bool",
      "(torch.utils._sympy.functions.IntTrueDiv) -> bool",
      "(sympy.core.add.Add) -> bool",
      "(torch._inductor.ir.ComputedBuffer) -> bool",
      "(torch._inductor.ir.ReinterpretView) -> bool",
      "(torch.fx.immutable_collections.immutable_list) -> bool",
      "(torch._inductor.ir.InputBuffer) -> bool",
      "(torch.device) -> bool",
      "(torch.dtype) -> bool",
      "(None) -> bool",
      "(torch._inductor.ir.ExternKernelOut) -> bool",
      "(torch._inductor.ir.ConstantBuffer) -> bool",
      "(float) -> bool",
      "(torch._inductor.ir.View) -> bool",
      "(torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.memory_format) -> bool",
      "(int) -> bool",
      "(torch._inductor.ir.ExternKernelAlloc) -> bool",
      "(torch._inductor.ir.Pointwise) -> bool",
      "(List[torch._inductor.ir.TensorBox]) -> bool",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> bool",
      "(torch._inductor.ir.MultiOutput) -> bool",
      "(torch._inductor.ir.PermuteView) -> bool",
      "(sympy.core.mul.Mul) -> bool",
      "(Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]) -> bool",
      "(str) -> bool",
      "(torch._inductor.ir.RandomSeeds) -> bool",
      "(bool) -> bool",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> bool"
    ],
    "samples": 12445
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 564,
    "func_name": "sympy_str",
    "type_comments": [
      "(torch.utils._sympy.functions.FloorDiv) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.add.Add) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.numbers.One) -> str",
      "(sympy.core.numbers.NegativeOne) -> str",
      "(int) -> str",
      "(torch.utils._sympy.functions.ModularIndexing) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.utils._sympy.functions.Identity) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.numbers.Integer) -> str",
      "(sympy.functions.elementary.miscellaneous.Max) -> str",
      "(sympy.core.numbers.Zero) -> str",
      "(sympy.functions.elementary.complexes.Abs) -> str",
      "(sympy.core.symbol.Symbol) -> str",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> str",
      "(sympy.functions.elementary.miscellaneous.Min) -> str",
      "(sympy.core.mul.Mul) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 30191
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 582,
    "func_name": "get_bounds_index_expr",
    "type_comments": [
      "(sympy.core.numbers.Integer) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(sympy.core.mul.Mul) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(sympy.functions.elementary.complexes.Abs) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(torch.utils._sympy.functions.ModularIndexing) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(sympy.core.numbers.One) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(torch.utils._sympy.functions.FloorDiv) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(sympy.core.symbol.Symbol) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(torch.utils._sympy.functions.Identity) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(sympy.functions.elementary.miscellaneous.Max) -> torch.utils._sympy.value_ranges.ValueRanges",
      "(sympy.core.add.Add) -> torch.utils._sympy.value_ranges.ValueRanges"
    ],
    "samples": 528
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 596,
    "func_name": "sympy_index_symbol_with_prefix",
    "type_comments": [
      "(torch.utils._sympy.symbol.SymT, int) -> sympy.core.symbol.Symbol"
    ],
    "samples": 7772
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 612,
    "func_name": "sympy_index_symbol",
    "type_comments": [
      "(str) -> sympy.core.symbol.Symbol"
    ],
    "samples": 23616
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 624,
    "func_name": "sympy_subs",
    "type_comments": [
      "(sympy.core.mul.Mul, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.numbers.Zero",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, int]) -> int",
      "(sympy.core.numbers.One, Dict) -> sympy.core.numbers.One",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> sympy.core.symbol.Symbol",
      "(torch.utils._sympy.functions.ModularIndexing, Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.numbers.Zero, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> sympy.core.numbers.Zero",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity, torch.utils._sympy.functions.ModularIndexing]]) -> sympy.core.symbol.Symbol",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> sympy.core.numbers.Zero",
      "(sympy.core.numbers.Zero, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.One]) -> sympy.core.numbers.Zero",
      "(torch.utils._sympy.functions.ModularIndexing, Dict[sympy.core.symbol.Symbol, int]) -> sympy.core.numbers.One",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.FloorDiv, torch.utils._sympy.functions.ModularIndexing]]) -> torch.utils._sympy.functions.FloorDiv",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> sympy.core.add.Add",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol]]) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(torch.utils._sympy.functions.ModularIndexing, Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.One]) -> sympy.core.numbers.One",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.add.Add]]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.symbol.Symbol",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[int, sympy.core.numbers.Integer]]) -> sympy.core.numbers.Integer",
      "(sympy.core.symbol.Symbol, Dict) -> sympy.core.symbol.Symbol",
      "(sympy.core.mul.Mul, Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer]]) -> sympy.core.add.Add",
      "(torch.utils._sympy.functions.FloorDiv, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.core.numbers.One",
      "(sympy.core.numbers.Integer, Dict) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Zero, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.numbers.Zero",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> sympy.core.symbol.Symbol",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, int]) -> sympy.core.numbers.Integer",
      "(sympy.core.mul.Mul, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.One]) -> sympy.core.numbers.Integer",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.One, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> sympy.core.symbol.Symbol",
      "(sympy.core.numbers.Zero, Dict[sympy.core.symbol.Symbol, sympy.core.add.Add]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, int]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Integer]]) -> sympy.core.add.Add",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.One, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> sympy.core.numbers.One",
      "(sympy.core.mul.Mul, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Integer]) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Zero, Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.numbers.Zero]]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, int]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.One]) -> sympy.core.numbers.NegativeOne",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.numbers.Integer",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> sympy.core.add.Add",
      "(torch.utils._sympy.functions.ModularIndexing, Dict[sympy.core.symbol.Symbol, sympy.core.add.Add]) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.One]) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.mul.Mul",
      "(sympy.core.numbers.Zero, Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, Dict) -> sympy.core.add.Add",
      "(sympy.core.add.Add, Dict[sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> sympy.core.numbers.Zero",
      "(sympy.core.mul.Mul, Dict) -> sympy.core.mul.Mul",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> sympy.core.symbol.Symbol",
      "(sympy.core.numbers.Zero, Dict) -> sympy.core.numbers.Zero",
      "(sympy.core.symbol.Symbol, Dict[sympy.core.symbol.Symbol, Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> sympy.core.symbol.Symbol"
    ],
    "samples": 25757
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 630,
    "func_name": "to_symbol",
    "type_comments": [
      "(sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity) -> torch.utils._sympy.functions.Identity",
      "(sympy.core.symbol.Symbol, sympy.core.add.Add) -> sympy.core.add.Add",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Zero) -> sympy.core.numbers.Zero",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.One) -> sympy.core.numbers.One",
      "(sympy.core.symbol.Symbol, int) -> int",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.symbol.Symbol, sympy.core.mul.Mul) -> sympy.core.mul.Mul",
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.symbol.Symbol, torch.utils._sympy.functions.FloorDiv) -> torch.utils._sympy.functions.FloorDiv"
    ],
    "samples": 25757
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 658,
    "func_name": "get_first_incompatible_cudagraph_node",
    "type_comments": [
      "(torch.fx.GraphModule) -> None"
    ],
    "samples": 173
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 701,
    "func_name": "has_incompatible_cudagraph_ops",
    "type_comments": [
      "(torch.fx.GraphModule) -> bool"
    ],
    "samples": 173
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 705,
    "func_name": "output_node",
    "type_comments": [
      "(torch.fx.GraphModule) -> torch.fx.node.Node"
    ],
    "samples": 594
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 774,
    "func_name": "argsort",
    "type_comments": [
      "(Tuple[]) -> List",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> List[int]",
      "(List[int]) -> List[int]",
      "(Tuple[int, int, int, int, int]) -> List[int]",
      "(Tuple[int, int, int, int]) -> List[int]",
      "(List[sympy.core.numbers.Integer]) -> List[int]",
      "(List[Union[int, sympy.core.numbers.Integer]]) -> List[int]",
      "(List[sympy.core.numbers.One]) -> List[int]",
      "(Tuple[int]) -> List[int]",
      "(Tuple[int, int]) -> List[int]",
      "(Tuple[int, int, int]) -> List[int]"
    ],
    "samples": 4709
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 781,
    "func_name": "get_dtype_size",
    "type_comments": [
      "(None) -> int",
      "(torch.dtype) -> int"
    ],
    "samples": 234
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 793,
    "func_name": "IndentedBuffer.__init__",
    "type_comments": [
      "(int) -> None"
    ],
    "samples": 12639
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 797,
    "func_name": "IndentedBuffer.getvaluewithlinemap",
    "type_comments": [
      "() -> Tuple[str, List[Tuple[int, torch.fx.node.Node]]]",
      "() -> Tuple[str, List]"
    ],
    "samples": 976
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 815,
    "func_name": "IndentedBuffer.getvalue",
    "type_comments": [
      "() -> str"
    ],
    "samples": 951
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 837,
    "func_name": "IndentedBuffer.clear",
    "type_comments": [
      "() -> None"
    ],
    "samples": 2968
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 840,
    "func_name": "IndentedBuffer.__bool__",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 1839
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 843,
    "func_name": "IndentedBuffer.prefix",
    "type_comments": [
      "() -> str"
    ],
    "samples": 31832
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 849,
    "func_name": "IndentedBuffer.writeline",
    "type_comments": [
      "(torch._inductor.codegen.common.DeferredLine) -> None",
      "(torch._inductor.utils.LineContext) -> None",
      "(str) -> None"
    ],
    "samples": 32069
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 859,
    "func_name": "IndentedBuffer.writelines",
    "type_comments": [
      "(List[str]) -> None"
    ],
    "samples": 1050
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 863,
    "func_name": "IndentedBuffer.indent",
    "type_comments": [
      "(int) -> contextlib._GeneratorContextManager"
    ],
    "samples": 1265
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 864,
    "func_name": "ctx",
    "type_comments": [
      "() -> Iterator"
    ],
    "samples": 1924
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 874,
    "func_name": "IndentedBuffer.do_indent",
    "type_comments": [
      "(int) -> None"
    ],
    "samples": 159
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 877,
    "func_name": "IndentedBuffer.do_unindent",
    "type_comments": [
      "(int) -> None"
    ],
    "samples": 159
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 880,
    "func_name": "IndentedBuffer.splice",
    "type_comments": [
      "(str, bool) -> None",
      "(torch._inductor.utils.IndentedBuffer, bool) -> None"
    ],
    "samples": 4731
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 946,
    "func_name": "DeferredLineBase.__init__",
    "type_comments": [
      "(str) -> None"
    ],
    "samples": 8200
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 959,
    "func_name": "DeferredLineBase.with_prefix",
    "type_comments": [
      "(str) -> torch._inductor.codegen.common.DeferredLine"
    ],
    "samples": 3474
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 962,
    "func_name": "DeferredLineBase.lstrip",
    "type_comments": [
      "() -> torch._inductor.codegen.common.DeferredLine"
    ],
    "samples": 2479
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 965,
    "func_name": "DeferredLineBase.__getitem__",
    "type_comments": [
      "(slice) -> torch._inductor.codegen.common.DeferredLine"
    ],
    "samples": 2479
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 968,
    "func_name": "DeferredLineBase.__bool__",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 2479
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 971,
    "func_name": "DeferredLineBase.__len__",
    "type_comments": [
      "() -> int"
    ],
    "samples": 4433
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 988,
    "func_name": "use_max_autotune",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 859
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 994,
    "func_name": "_use_template_for_cuda",
    "type_comments": [
      "(torch._inductor.ir.FixedLayout, List[torch.dtype]) -> bool"
    ],
    "samples": 472
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1009,
    "func_name": "use_triton_template",
    "type_comments": [
      "(torch._inductor.ir.FixedLayout, bool) -> bool"
    ],
    "samples": 419
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1022,
    "func_name": "use_cutlass_template",
    "type_comments": [
      "(torch._inductor.ir.FixedLayout, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.mul.Mul) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.One) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.add.Add) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> bool"
    ],
    "samples": 217
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1083,
    "func_name": "use_ck_template",
    "type_comments": [
      "(torch._inductor.ir.FixedLayout, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.mul.Mul) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.symbol.Symbol, sympy.core.numbers.Integer, int) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.One) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> bool",
      "(torch._inductor.ir.FixedLayout, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> bool"
    ],
    "samples": 265
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1136,
    "func_name": "_use_template_for_cpu",
    "type_comments": [
      "(torch._inductor.ir.FixedLayout) -> bool"
    ],
    "samples": 265
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1140,
    "func_name": "use_cpp_packed_gemm_template",
    "type_comments": [
      "(torch._inductor.ir.FixedLayout, torch._inductor.ir.StorageBox, torch._inductor.ir.ReinterpretView) -> bool",
      "(torch._inductor.ir.FixedLayout, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox) -> bool",
      "(torch._inductor.ir.FixedLayout, torch._inductor.ir.TensorBox, torch._inductor.ir.StorageBox) -> bool",
      "(torch._inductor.ir.FixedLayout, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView) -> bool",
      "(torch._inductor.ir.FixedLayout, torch._inductor.ir.ReinterpretView, torch._inductor.ir.StorageBox) -> bool"
    ],
    "samples": 265
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1185,
    "func_name": "use_aten_gemm_kernels",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 327
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1324,
    "func_name": "get_benchmark_name",
    "type_comments": [
      "() -> str",
      "() -> None"
    ],
    "samples": 160
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1363,
    "func_name": "is_cpu_device",
    "type_comments": [
      "(List[Union[torch.Tensor, torch.nn.parameter.Parameter]]) -> bool",
      "(List[Union[torch.SymInt, torch.Tensor]]) -> bool",
      "(List[torch.Tensor]) -> bool",
      "(List[Union[torch.SymInt, torch.Tensor, torch.nn.parameter.Parameter]]) -> bool",
      "(List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]]) -> bool",
      "(List[torch.SymInt]) -> bool",
      "(List) -> bool",
      "(List[torch.nn.parameter.Parameter]) -> bool"
    ],
    "samples": 212
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1397,
    "func_name": "get_device_tflops",
    "type_comments": [
      "(torch.dtype) -> float",
      "(torch.dtype) -> pyannotate_runtime.collect_types.NoReturnType",
      "(None) -> pyannotate_runtime.collect_types.NoReturnType"
    ],
    "samples": 361
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1425,
    "func_name": "get_gpu_dram_gbps",
    "type_comments": [
      "() -> float"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1438,
    "func_name": "is_welford_reduction",
    "type_comments": [
      "(str) -> bool"
    ],
    "samples": 1121
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1442,
    "func_name": "reduction_num_outputs",
    "type_comments": [
      "(str) -> int"
    ],
    "samples": 1052
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1520,
    "func_name": "is_collective",
    "type_comments": [
      "(torch._inductor.ir.ConcatKernel) -> bool",
      "(torch._inductor.ir.DeviceCopy) -> bool",
      "(torch._inductor.ir.RandomSeeds) -> bool",
      "(torch._inductor.ir.MutationOutput) -> bool",
      "(torch._inductor.ir.ExternKernelAlloc) -> bool",
      "(torch._inductor.ir.FallbackKernel) -> bool",
      "(torch._inductor.ir.MultiOutput) -> bool",
      "(None) -> bool",
      "(torch._inductor.ir.ExternKernelOut) -> bool",
      "(torch._inductor.ir.ComputedBuffer) -> bool",
      "(torch._inductor.ir.ScatterFallback) -> bool"
    ],
    "samples": 1455
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1526,
    "func_name": "is_wait",
    "type_comments": [
      "(torch._inductor.ir.ConcatKernel) -> bool",
      "(torch._inductor.ir.DeviceCopy) -> bool",
      "(torch._inductor.ir.RandomSeeds) -> bool",
      "(torch._inductor.ir.MutationOutput) -> bool",
      "(torch._inductor.ir.ExternKernelAlloc) -> bool",
      "(torch._inductor.ir.FallbackKernel) -> bool",
      "(torch._inductor.ir.MultiOutput) -> bool",
      "(None) -> bool",
      "(torch._inductor.ir.ExternKernelOut) -> bool",
      "(torch._inductor.ir.ComputedBuffer) -> bool",
      "(torch._inductor.ir.ScatterFallback) -> bool"
    ],
    "samples": 1455
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1532,
    "func_name": "num_fw_fixed_arguments",
    "type_comments": [
      "(int, int) -> int"
    ],
    "samples": 174
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1577,
    "func_name": "BoxedBool.__bool__",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 684
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1607,
    "func_name": "is_gpu",
    "type_comments": [
      "(str) -> bool"
    ],
    "samples": 5034
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1612,
    "func_name": "device_need_guard",
    "type_comments": [
      "(str) -> bool"
    ],
    "samples": 324
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1692,
    "func_name": "tensor_is_aligned",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor) -> bool"
    ],
    "samples": 1970
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1704,
    "func_name": "should_assume_input_aligned",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor) -> bool"
    ],
    "samples": 1301
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1713,
    "func_name": "maybe_get_suppress_shape_guards_ctx",
    "type_comments": [
      "() -> contextlib._GeneratorContextManager"
    ],
    "samples": 1970
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 113,
    "func_name": "Virtualized._set_handler",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensorMode) -> contextlib._GeneratorContextManager",
      "(torch._inductor.dependencies.RecordLoadStore) -> contextlib._GeneratorContextManager",
      "(torch.fx.node.Node) -> contextlib._GeneratorContextManager",
      "(torch._inductor.sizevars.SimplifyIndexing) -> contextlib._GeneratorContextManager",
      "(torch._inductor.ops_handler.MockHandler) -> contextlib._GeneratorContextManager",
      "(torch._inductor.virtualized.NullHandler) -> contextlib._GeneratorContextManager",
      "(torch._inductor.index_propagation.IndexPropagation) -> contextlib._GeneratorContextManager",
      "(torch._inductor.ir.InterpreterShim) -> contextlib._GeneratorContextManager",
      "(torch._inductor.debug.DebugContext) -> contextlib._GeneratorContextManager",
      "(torch._inductor.dependencies.FreeUnbackedSymbolsOpsHandler) -> contextlib._GeneratorContextManager",
      "(torch._inductor.codegen.common:Kernel.__enter__.<locals>.CSEProxy) -> contextlib._GeneratorContextManager"
    ],
    "samples": 26809
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 117,
    "func_name": "ctx",
    "type_comments": [
      "() -> Iterator",
      "() -> pyannotate_runtime.collect_types.NoReturnType",
      "() -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 29163
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 126,
    "func_name": "Virtualized._get_handler",
    "type_comments": [
      "() -> torch.utils._sympy.value_ranges.ValueRangeAnalysis",
      "() -> torch._inductor.graph.GraphLowering",
      "() -> torch._inductor.codegen.triton.TritonKernel",
      "() -> torch._inductor.index_propagation.IndexPropagation",
      "() -> torch._inductor.dependencies.FreeUnbackedSymbolsOpsHandler",
      "() -> torch._inductor.ir.InterpreterShim",
      "() -> torch._inductor.dependencies.RecordLoadStore",
      "() -> torch._inductor.ops_handler.MockHandler",
      "() -> torch._inductor.debug.DebugContext",
      "() -> torch._inductor.ops_handler.OpCounterCSE",
      "() -> torch._subclasses.fake_tensor.FakeTensorMode",
      "() -> torch.fx.node.Node",
      "() -> torch._inductor.virtualized.NullHandler"
    ],
    "samples": 41490
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 135,
    "func_name": "Virtualized.__getattr__",
    "type_comments": [
      "(str) -> function",
      "(str) -> method"
    ],
    "samples": 29199
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 148,
    "func_name": "NullKernelHandler.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 187,
    "func_name": "OpsValue.__init__",
    "type_comments": [
      "(torch._inductor.index_propagation.IndexPropVar) -> None",
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> None",
      "(torch._inductor.ir.Constant) -> None",
      "(None) -> None",
      "(str) -> None"
    ],
    "samples": 29189
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 190,
    "func_name": "OpsValue.__str__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 635
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 262,
    "func_name": "OpsWrapper.__getattr__",
    "type_comments": [
      "(str) -> function"
    ],
    "samples": 29177
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 263,
    "func_name": "inner",
    "type_comments": [
      "(*sympy.core.add.Add) -> torch._inductor.virtualized.OpsValue",
      "(*Union[int, str]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[str, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[function, int, torch._inductor.virtualized.OpsValue]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[sympy.core.numbers.One, torch.dtype]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[sympy.core.numbers.Integer, torch.dtype]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[str, torch._inductor.virtualized.OpsValue, torch.dtype]) -> Tuple[torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue]",
      "(*Union[str, sympy.core.add.Add, torch._inductor.virtualized.OpsValue]) -> torch._inductor.virtualized.OpsValue",
      "(*sympy.core.symbol.Symbol) -> torch._inductor.virtualized.OpsValue",
      "(*Union[sympy.core.symbol.Symbol, torch.dtype]) -> torch._inductor.virtualized.OpsValue",
      "(*torch._inductor.index_propagation.IndexPropVar) -> torch._inductor.virtualized.OpsValue",
      "(*Union[torch._inductor.virtualized.OpsValue, torch.dtype]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[str, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[str, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[float, torch.dtype]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[str, torch._inductor.virtualized.OpsValue, torch.dtype]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[sympy.core.mul.Mul, torch.dtype]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[sympy.core.numbers.Zero, torch.dtype]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[List[torch._inductor.virtualized.OpsValue], Tuple[torch.dtype], function]) -> Tuple[torch._inductor.virtualized.OpsValue]",
      "(*torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue",
      "(*Union[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.virtualized.OpsValue]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[float, function, torch._inductor.virtualized.OpsValue]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[str, sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(*Optional[Union[sympy.core.numbers.Zero, torch._inductor.virtualized.OpsValue]]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[Tuple[torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue], str, torch.dtype]) -> Tuple[torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue]",
      "(*Union[int, torch.dtype]) -> torch._inductor.virtualized.OpsValue",
      "(*Optional[Union[sympy.core.symbol.Symbol, torch._inductor.virtualized.OpsValue]]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[torch.dtype, torch.utils._sympy.functions.FloatTrueDiv]) -> torch._inductor.virtualized.OpsValue",
      "(*Optional[Union[sympy.core.add.Add, torch._inductor.virtualized.OpsValue]]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[sympy.core.add.Add, torch.dtype]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[str, sympy.core.symbol.Symbol, torch._inductor.virtualized.OpsValue]) -> torch._inductor.virtualized.OpsValue",
      "(*Union[str, sympy.core.numbers.Zero, torch._inductor.virtualized.OpsValue]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 29159
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 270,
    "func_name": "_unwrap",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing) -> torch.utils._sympy.functions.ModularIndexing",
      "(torch.utils._sympy.functions.FloatTrueDiv) -> torch.utils._sympy.functions.FloatTrueDiv",
      "(None) -> None",
      "(torch._inductor.virtualized.OpsValue) -> None",
      "(function) -> function",
      "(torch._inductor.index_propagation.IndexPropVar) -> torch._inductor.index_propagation.IndexPropVar",
      "(float) -> float",
      "(torch._inductor.virtualized.OpsValue) -> torch._inductor.index_propagation.IndexPropVar",
      "(sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(torch.dtype) -> torch.dtype",
      "(sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(torch._inductor.virtualized.OpsValue) -> str",
      "(str) -> str",
      "(sympy.core.add.Add) -> sympy.core.add.Add",
      "(List[torch._inductor.virtualized.OpsValue]) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.mul.Mul) -> sympy.core.mul.Mul",
      "(Tuple[torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue]) -> pyannotate_runtime.collect_types.UnknownType",
      "(int) -> int",
      "(sympy.core.numbers.Zero) -> sympy.core.numbers.Zero"
    ],
    "samples": 32515
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 278,
    "func_name": "_wrap",
    "type_comments": [
      "(Tuple[str]) -> Tuple[torch._inductor.virtualized.OpsValue]",
      "(Tuple[str, str, str]) -> Tuple[torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue]",
      "(torch._inductor.index_propagation.IndexPropVar) -> torch._inductor.virtualized.OpsValue",
      "(None) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar, torch._inductor.index_propagation.IndexPropVar]) -> Tuple[torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue]",
      "(torch._inductor.ir.Constant) -> torch._inductor.virtualized.OpsValue",
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> torch._inductor.virtualized.OpsValue",
      "(str) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 29159
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 316,
    "func_name": "ops",
    "type_comments": [
      "() -> torch._inductor.dependencies.RecordLoadStore",
      "() -> torch._inductor.index_propagation.IndexPropagation",
      "() -> torch._inductor.sizevars.SimplifyIndexing"
    ],
    "samples": 626
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 321,
    "func_name": "graph",
    "type_comments": [
      "() -> torch._inductor.graph.GraphLowering"
    ],
    "samples": 36598
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 331,
    "func_name": "fake_mode",
    "type_comments": [
      "() -> torch._subclasses.fake_tensor.FakeTensorMode"
    ],
    "samples": 1151
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 336,
    "func_name": "kernel",
    "type_comments": [
      "() -> torch._inductor.codegen.triton.TritonKernel",
      "() -> torch._inductor.virtualized.NullKernelHandler",
      "() -> torch._inductor.codegen.common.Kernel",
      "() -> torch._inductor.codegen.cpp.CppVecKernelChecker",
      "() -> torch._inductor.codegen.cpp.CppKernel"
    ],
    "samples": 25125
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 341,
    "func_name": "debug",
    "type_comments": [
      "() -> torch._inductor.debug.DebugContext"
    ],
    "samples": 640
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 345,
    "func_name": "interpreter",
    "type_comments": [
      "() -> torch._inductor.ir.InterpreterShim"
    ],
    "samples": 5858
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 349,
    "func_name": "aot_compilation",
    "type_comments": [
      "() -> torch._inductor.virtualized.NullHandler"
    ],
    "samples": 401
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 353,
    "func_name": "current_node",
    "type_comments": [
      "() -> torch.fx.node.Node"
    ],
    "samples": 220
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/wrapper_benchmark.py",
    "line": 24,
    "func_name": "get_kernel_category_by_source_code",
    "type_comments": [
      "(str) -> str"
    ],
    "samples": 561
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 513,
    "func_name": "_reduce_symint",
    "type_comments": [
      "(torch.SymInt) -> Tuple[function, Tuple[str]]"
    ],
    "samples": 656
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 1487,
    "func_name": "bw_compiler",
    "type_comments": [
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]]) -> pyannotate_runtime.collect_types.NoReturnType",
      "(torch.fx.GraphModule, List[torch.SymInt]) -> torch._inductor.codecache.CompiledFxGraph",
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]]) -> torch._inductor.codecache.CompiledFxGraph"
    ],
    "samples": 34
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 205,
    "func_name": "bmm",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor) -> NotImplementedType"
    ],
    "samples": 129
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 406,
    "func_name": "amax",
    "type_comments": [
      "(List[int], bool) -> NotImplementedType"
    ],
    "samples": 92
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 440,
    "func_name": "get_like_layout",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, None) -> torch.memory_format",
      "(torch._subclasses.fake_tensor.FakeTensor, torch.memory_format) -> torch.memory_format"
    ],
    "samples": 141
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 450,
    "func_name": "rand_like",
    "type_comments": [
      "(None, None, None) -> torch._subclasses.fake_tensor.FakeTensor",
      "(torch.dtype, None, None) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 134
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 688,
    "func_name": "_softmax_backward_data",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, int, torch.dtype) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 66
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/dedupe_symint_uses.py",
    "line": 17,
    "func_name": "_SymExprHash.__hash__",
    "type_comments": [
      "() -> int"
    ],
    "samples": 432
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/dedupe_symint_uses.py",
    "line": 20,
    "func_name": "_SymExprHash.__eq__",
    "type_comments": [
      "(torch._inductor.fx_passes.dedupe_symint_uses._SymExprHash) -> bool"
    ],
    "samples": 270
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/dedupe_symint_uses.py",
    "line": 38,
    "func_name": "_SymHashingDict.__setitem__",
    "type_comments": [
      "(torch.SymFloat, torch.fx.node.Node) -> None",
      "(torch.SymInt, torch.fx.node.Node) -> None"
    ],
    "samples": 232
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/dedupe_symint_uses.py",
    "line": 47,
    "func_name": "_SymHashingDict.get",
    "type_comments": [
      "(torch.SymInt, None) -> None",
      "(torch.SymFloat, None) -> None",
      "(torch.SymFloat, None) -> torch.fx.node.Node",
      "(torch.SymInt, None) -> torch.fx.node.Node"
    ],
    "samples": 306
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/dedupe_symint_uses.py",
    "line": 50,
    "func_name": "_SymHashingDict._wrap_to_sym_expr_hash",
    "type_comments": [
      "(torch.SymInt) -> torch._inductor.fx_passes.dedupe_symint_uses._SymExprHash",
      "(torch.SymFloat) -> torch._inductor.fx_passes.dedupe_symint_uses._SymExprHash"
    ],
    "samples": 432
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 471,
    "func_name": "pointless_convert",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, torch.fx.node.Node, torch.dtype, torch.dtype) -> None"
    ],
    "samples": 190
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 45,
    "func_name": "fetch_fake_tensors",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, Tuple[str, str]) -> List[torch._subclasses.fake_tensor.FakeTensor]",
      "(torch._inductor.pattern_matcher.Match, Tuple[str]) -> List[torch._subclasses.fake_tensor.FakeTensor]",
      "(torch._inductor.pattern_matcher.Match, Tuple[str, str, str]) -> List[torch._subclasses.fake_tensor.FakeTensor]"
    ],
    "samples": 385
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 61,
    "func_name": "get_alignment_size",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor) -> int"
    ],
    "samples": 801
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 729,
    "func_name": "should_pad_bmm",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 126
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/replace_random.py",
    "line": 81,
    "func_name": "default_kwargs",
    "type_comments": [
      "(torch.device) -> Dict"
    ],
    "samples": 137
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/replace_random.py",
    "line": 85,
    "func_name": "get_device",
    "type_comments": [
      "(torch.device) -> torch.device"
    ],
    "samples": 140
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/replace_random.py",
    "line": 91,
    "func_name": "replace_random",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, torch.fx.immutable_collections.immutable_list, None, None, torch.device, None, bool) -> None",
      "(torch._inductor.pattern_matcher.Match, torch.fx.immutable_collections.immutable_list, None, torch.dtype, torch.device, None, bool) -> None"
    ],
    "samples": 137
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/replace_random.py",
    "line": 108,
    "func_name": "replacement",
    "type_comments": [
      "(torch.fx.immutable_collections.immutable_list) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 137
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/inductor_prims.py",
    "line": 27,
    "func_name": "meta",
    "type_comments": [
      "(*Union[List[int], int, torch._subclasses.fake_tensor.FakeTensor]) -> torch._subclasses.fake_tensor.FakeTensor",
      "(*Union[int, torch.device]) -> torch._subclasses.fake_tensor.FakeTensor",
      "(*Union[List[Union[int, torch.SymInt]], int, torch._subclasses.fake_tensor.FakeTensor]) -> torch._subclasses.fake_tensor.FakeTensor",
      "(*Union[List[int], torch._subclasses.fake_tensor.FakeTensor]) -> torch._subclasses.fake_tensor.FakeTensor",
      "(*Union[int, torch._subclasses.fake_tensor.FakeTensor]) -> torch._subclasses.fake_tensor.FakeTensor",
      "(*Union[List[int], str, torch._subclasses.fake_tensor.FakeTensor]) -> torch._subclasses.fake_tensor.FakeTensor",
      "(*torch._subclasses.fake_tensor.FakeTensor) -> torch._subclasses.fake_tensor.FakeTensor",
      "(*torch.device) -> torch._subclasses.fake_tensor.FakeTensor",
      "(*Union[List[Union[int, torch.SymInt]], str, torch._subclasses.fake_tensor.FakeTensor]) -> torch._subclasses.fake_tensor.FakeTensor",
      "(*Union[List, torch._subclasses.fake_tensor.FakeTensor]) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 222
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/metrics.py",
    "line": 119,
    "func_name": "apply_deltas",
    "type_comments": [
      "(torch._inductor.metrics.CachedMetricsDeltas) -> None"
    ],
    "samples": 22
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 1488,
    "func_name": "_reduction_configs",
    "type_comments": [
      "(List[int], Dict[str, Union[List[str], Set, bool, int, str]]) -> List[triton.runtime.autotuner.Config]",
      "(List[int], Dict[str, Union[List, Set, bool, int, str]]) -> List[triton.runtime.autotuner.Config]"
    ],
    "samples": 192
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 1545,
    "func_name": "reduction",
    "type_comments": [
      "(List[int], torch._inductor.runtime.hints.ReductionHint, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], str, Dict[str, Union[List[str], Set, bool, int, str]]) -> function",
      "(List[int], torch._inductor.runtime.hints.ReductionHint, Dict[str, Union[Dict[int, Union[int, str]], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], str, Dict[str, Union[List, Set, bool, int, str]]) -> function",
      "(List[int], torch._inductor.runtime.hints.ReductionHint, Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], str, Dict[str, Union[List, Set, bool, int, str]]) -> function"
    ],
    "samples": 192
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 647,
    "func_name": "is_symbolic",
    "type_comments": [
      "(torch.SymInt) -> bool"
    ],
    "samples": 279
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1549,
    "func_name": "count_tangents",
    "type_comments": [
      "(torch.fx.GraphModule) -> int"
    ],
    "samples": 35
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1554,
    "func_name": "is_saved_tensor",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 365
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/bounds.py",
    "line": 125,
    "func_name": "BoundVars.set_indirect",
    "type_comments": [
      "(sympy.core.symbol.Symbol, torch.utils._sympy.value_ranges.ValueRanges) -> torch.utils._sympy.value_ranges.ValueRanges"
    ],
    "samples": 180
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1475,
    "func_name": "CSE.invalidate",
    "type_comments": [
      "(Set[torch._inductor.codegen.triton.TritonCSEVariable]) -> None",
      "(Set) -> None"
    ],
    "samples": 250
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1663,
    "func_name": "Kernel.indirect_load",
    "type_comments": [
      "(str, sympy.core.symbol.Symbol) -> torch._inductor.codegen.triton.TritonCSEVariable",
      "(str, sympy.core.add.Add) -> torch._inductor.codegen.triton.TritonCSEVariable"
    ],
    "samples": 145
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1834,
    "func_name": "indirect_indexing",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, sympy.core.numbers.Integer, bool) -> sympy.core.symbol.Symbol",
      "(torch._inductor.codegen.triton.TritonCSEVariable, sympy.core.numbers.One, bool) -> sympy.core.symbol.Symbol"
    ],
    "samples": 180
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 158,
    "func_name": "IterationRangesRoot.cache_clear",
    "type_comments": [
      "() -> None"
    ],
    "samples": 250
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 263,
    "func_name": "IterationRangesEntry.cache_clear",
    "type_comments": [
      "() -> None"
    ],
    "samples": 267
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 467,
    "func_name": "TritonPrinter._print_Abs",
    "type_comments": [
      "(sympy.functions.elementary.complexes.Abs) -> str",
      "(sympy.functions.elementary.complexes.Abs) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 33
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 889,
    "func_name": "rsqrt",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 214
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 901,
    "func_name": "tanh",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 35
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 253,
    "func_name": "MemoryPlanningState.pop",
    "type_comments": [
      "(Tuple[torch.device, torch.dtype, str]) -> torch._inductor.codegen.wrapper.FreeIfNotReusedLine"
    ],
    "samples": 453
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 353,
    "func_name": "MemoryPlanningLine.codegen",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> None"
    ],
    "samples": 543
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1698,
    "func_name": "Shim",
    "type_comments": [
      "() -> None"
    ],
    "samples": 300
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1702,
    "func_name": "Shim.__repr__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 446
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 135,
    "func_name": "clamp",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, float, float) -> torch._subclasses.fake_tensor.FakeTensor",
      "(torch._subclasses.fake_tensor.FakeTensor, None, int) -> torch._subclasses.fake_tensor.FakeTensor",
      "(torch._subclasses.fake_tensor.FakeTensor, float, None) -> torch._subclasses.fake_tensor.FakeTensor",
      "(torch._subclasses.fake_tensor.FakeTensor, int, None) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 44
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 166,
    "func_name": "convolution_backward",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, List[int], List[int], List[int], List[int], bool, List[int], int, List[bool]) -> NotImplementedType",
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, List[int], List[int], List[int], List[int], bool, List[int], int, List[bool]) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 104
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 379,
    "func_name": "conj_physical",
    "type_comments": [
      "() -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 31
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 247,
    "func_name": "WeakDep.rename",
    "type_comments": [
      "(Dict[str, str]) -> torch._inductor.dependencies.WeakDep",
      "(Dict) -> torch._inductor.dependencies.WeakDep"
    ],
    "samples": 282
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 290,
    "func_name": "ReadWrites.with_read",
    "type_comments": [
      "(torch._inductor.dependencies.StarDep) -> torch._inductor.dependencies.ReadWrites",
      "(torch._inductor.dependencies.WeakDep) -> torch._inductor.dependencies.ReadWrites"
    ],
    "samples": 657
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 600,
    "func_name": "FreeUnbackedSymbolsOpsHandler.indirect_indexing",
    "type_comments": [
      "(None, sympy.core.numbers.One, bool) -> sympy.core.symbol.Symbol",
      "(None, sympy.core.numbers.Integer, bool) -> sympy.core.symbol.Symbol"
    ],
    "samples": 185
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 722,
    "func_name": "view_noop",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch.fx.immutable_collections.immutable_list) -> bool"
    ],
    "samples": 46
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 465,
    "func_name": "is_grouped",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 71
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 468,
    "func_name": "is_in_out_channel",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 70
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 702,
    "func_name": "GraphLowering.get_numel",
    "type_comments": [
      "(str) -> int",
      "(str) -> sympy.core.numbers.Integer",
      "(str) -> sympy.core.mul.Mul"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 761,
    "func_name": "GraphLowering.mark_buffer_mutated",
    "type_comments": [
      "(str) -> None"
    ],
    "samples": 864
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 87,
    "func_name": "to_dtype",
    "type_comments": [
      "(torch._inductor.index_propagation.TypedExpr, torch.dtype, torch.dtype) -> torch._inductor.index_propagation.TypedExpr",
      "(torch._inductor.index_propagation.TypedExpr, torch.dtype, None) -> torch._inductor.index_propagation.TypedExpr"
    ],
    "samples": 131
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 93,
    "func_name": "abs",
    "type_comments": [
      "(torch._inductor.index_propagation.TypedExpr) -> torch._inductor.index_propagation.TypedExpr"
    ],
    "samples": 36
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 106,
    "func_name": "sub",
    "type_comments": [
      "(torch._inductor.index_propagation.TypedExpr, torch._inductor.index_propagation.TypedExpr) -> torch._inductor.index_propagation.TypedExpr"
    ],
    "samples": 238
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 111,
    "func_name": "mul",
    "type_comments": [
      "(torch._inductor.index_propagation.TypedExpr, torch._inductor.index_propagation.TypedExpr) -> torch._inductor.index_propagation.TypedExpr"
    ],
    "samples": 48
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 160,
    "func_name": "maximum",
    "type_comments": [
      "(torch._inductor.index_propagation.TypedExpr, torch._inductor.index_propagation.TypedExpr) -> torch._inductor.index_propagation.TypedExpr"
    ],
    "samples": 211
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 296,
    "func_name": "IndexPropagation.statically_true",
    "type_comments": [
      "(sympy.core.relational.StrictLessThan) -> bool",
      "(sympy.core.relational.GreaterThan) -> bool",
      "(sympy.logic.boolalg.BooleanTrue) -> bool",
      "(sympy.logic.boolalg.BooleanFalse) -> bool"
    ],
    "samples": 87
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 316,
    "func_name": "IndexPropagation.indirect_indexing",
    "type_comments": [
      "(torch._inductor.index_propagation.IndexPropVar, sympy.core.numbers.Integer, bool) -> sympy.core.symbol.Symbol",
      "(torch._inductor.index_propagation.IndexPropVar, sympy.core.symbol.Symbol, bool) -> sympy.core.symbol.Symbol",
      "(torch._inductor.index_propagation.IndexPropVar, sympy.core.numbers.One, bool) -> sympy.functions.elementary.miscellaneous.Min",
      "(torch._inductor.index_propagation.IndexPropVar, sympy.core.numbers.One, bool) -> sympy.core.numbers.Zero",
      "(torch._inductor.index_propagation.IndexPropVar, sympy.core.numbers.Integer, bool) -> sympy.functions.elementary.miscellaneous.Min",
      "(torch._inductor.index_propagation.IndexPropVar, sympy.core.numbers.Integer, bool) -> sympy.core.add.Add"
    ],
    "samples": 269
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 328,
    "func_name": "wrap_expr",
    "type_comments": [
      "(sympy.core.numbers.Zero) -> sympy.core.numbers.Zero",
      "(sympy.core.numbers.NegativeOne) -> sympy.core.numbers.Integer",
      "(sympy.core.add.Add) -> sympy.core.add.Add",
      "(sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.functions.elementary.miscellaneous.Min) -> sympy.functions.elementary.miscellaneous.Min"
    ],
    "samples": 66
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 845,
    "func_name": "get_read_indices",
    "type_comments": [
      "(torch._inductor.ir.Reduction) -> Tuple[List[sympy.core.add.Add], bool]",
      "(torch._inductor.ir.Reduction) -> Tuple[List, bool]"
    ],
    "samples": 297
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1122,
    "func_name": "_multilayer_second_step_hint",
    "type_comments": [
      "(int, int, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.runtime.hints.ReductionHint",
      "(sympy.core.numbers.Integer, int, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.runtime.hints.ReductionHint"
    ],
    "samples": 159
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1139,
    "func_name": "_multilayer_wrap_loader",
    "type_comments": [
      "(functools.partial, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, int) -> function",
      "(function, List[sympy.core.mul.Mul], sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.mul.Mul, int) -> function",
      "(function, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], sympy.core.mul.Mul, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv, int) -> function",
      "(function, List[sympy.core.symbol.Symbol], sympy.core.symbol.Symbol, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv, int) -> function",
      "(functools.partial, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], sympy.core.mul.Mul, sympy.core.numbers.Integer, torch.utils._sympy.functions.FloorDiv, int) -> function",
      "(function, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.mul.Mul, int) -> function",
      "(functools.partial, List[sympy.core.numbers.Integer], sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, int) -> function",
      "(function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, int) -> function",
      "(function, List[sympy.core.numbers.Integer], sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, int) -> function"
    ],
    "samples": 162
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1154,
    "func_name": "wrapper_fn",
    "type_comments": [
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol], Tuple[sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 371
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1159,
    "func_name": "body",
    "type_comments": [
      "() -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 356
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1350,
    "func_name": "WelfordReduction.__init__",
    "type_comments": [
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, torch._inductor.runtime.hints.ReductionHint, int) -> None",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, int) -> None",
      "(torch.device, torch.dtype, Tuple[function, function, function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, int) -> None",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul], str, torch._inductor.runtime.hints.ReductionHint, int) -> None",
      "(torch.device, torch.dtype, Tuple[function], List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int], str, torch._inductor.runtime.hints.ReductionHint, int) -> None",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], str, torch._inductor.runtime.hints.ReductionHint, int) -> None",
      "(torch.device, torch.dtype, Tuple[functools.partial, functools.partial, functools.partial], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, int) -> None",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], str, torch._inductor.runtime.hints.ReductionHint, int) -> None",
      "(torch.device, torch.dtype, Tuple[function], List[sympy.core.numbers.One], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, int) -> None",
      "(torch.device, torch.dtype, Tuple[functools.partial, functools.partial, functools.partial], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[int], str, torch._inductor.runtime.hints.ReductionHint, int) -> None",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], str, torch._inductor.runtime.hints.ReductionHint, int) -> None",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint, int) -> None",
      "(torch.device, torch.dtype, Tuple[function], List[Union[int, sympy.core.numbers.One]], List[int], str, torch._inductor.runtime.hints.ReductionHint, int) -> None",
      "(torch.device, torch.dtype, Tuple[function, function, function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[torch.utils._sympy.functions.FloorDiv], str, torch._inductor.runtime.hints.ReductionHint, int) -> None"
    ],
    "samples": 260
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1365,
    "func_name": "loader",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol]) -> Tuple[torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> Tuple[torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> Tuple[torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue]"
    ],
    "samples": 135
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1380,
    "func_name": "WelfordReduction.store_reduction",
    "type_comments": [
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 464
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1390,
    "func_name": "create",
    "type_comments": [
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], str, torch._inductor.runtime.hints.ReductionHint) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, torch._inductor.runtime.hints.ReductionHint) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.device, torch.dtype, Tuple[function], List[sympy.core.numbers.One], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[function], List[Union[int, sympy.core.numbers.One]], List[int], str, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul], str, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[function], List[Union[int, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[int], str, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[functools.partial, functools.partial, functools.partial], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[int], str, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[function, function, function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[torch.utils._sympy.functions.FloorDiv], str, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[function, function, function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[functools.partial, functools.partial, functools.partial], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], str, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], str, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]"
    ],
    "samples": 180
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1512,
    "func_name": "create_multilayer",
    "type_comments": [
      "(torch.device, torch.dtype, Tuple[function, functools.partial, functools.partial], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, sympy.core.numbers.Integer, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[function, functools.partial, functools.partial], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], str, int, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[function, functools.partial, functools.partial], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], str, int, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], str, int, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, sympy.core.numbers.Integer, torch._inductor.runtime.hints.ReductionHint) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, sympy.core.numbers.Integer, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], str, int, torch._inductor.runtime.hints.ReductionHint) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], str, int, torch._inductor.runtime.hints.ReductionHint) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.device, torch.dtype, Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.numbers.Integer], str, int, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1537,
    "func_name": "constant",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Tuple[sympy.core.numbers.Zero, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing], int) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing], int) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 62
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1580,
    "func_name": "intermediate_loader_fn",
    "type_comments": [
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol], function) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol], function) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 244
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2988,
    "func_name": "same_ordered",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], Tuple[sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]], Tuple[sympy.core.mul.Mul, int, sympy.core.mul.Mul, sympy.core.mul.Mul]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], Tuple[sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[sympy.core.numbers.Integer], Tuple[sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], Tuple[sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]"
    ],
    "samples": 96
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3026,
    "func_name": "FlexibleLayout.as_same_order",
    "type_comments": [
      "(Tuple[sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> torch._inductor.ir.FixedLayout",
      "(Tuple[sympy.core.mul.Mul, int, sympy.core.mul.Mul, sympy.core.mul.Mul]) -> torch._inductor.ir.FixedLayout",
      "(Tuple[sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> torch._inductor.ir.FixedLayout"
    ],
    "samples": 96
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3059,
    "func_name": "NonOwningLayout.make_indexer",
    "type_comments": [
      "() -> function"
    ],
    "samples": 18
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3093,
    "func_name": "MutationLayoutSHOULDREMOVE.__init__",
    "type_comments": [
      "(torch._inductor.ir.StorageBox) -> None",
      "(torch._inductor.ir.TensorBox) -> None"
    ],
    "samples": 553
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3104,
    "func_name": "stride",
    "type_comments": [
      "() -> List",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[sympy.core.numbers.One]"
    ],
    "samples": 553
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3108,
    "func_name": "MutationLayoutSHOULDREMOVE.storage_size",
    "type_comments": [
      "() -> sympy.core.numbers.One",
      "() -> sympy.core.numbers.Integer",
      "() -> sympy.core.mul.Mul"
    ],
    "samples": 636
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3111,
    "func_name": "MutationLayoutSHOULDREMOVE.get_buffer",
    "type_comments": [
      "() -> torch._inductor.ir.ComputedBuffer",
      "() -> torch._inductor.ir.InputBuffer"
    ],
    "samples": 1289
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3112,
    "func_name": "unwrap_views",
    "type_comments": [
      "(torch._inductor.ir.InputBuffer) -> torch._inductor.ir.InputBuffer",
      "(torch._inductor.ir.TensorBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.StorageBox) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.ComputedBuffer) -> torch._inductor.ir.ComputedBuffer"
    ],
    "samples": 2247
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3127,
    "func_name": "MutationLayoutSHOULDREMOVE.real_layout",
    "type_comments": [
      "() -> torch._inductor.ir.FixedLayout"
    ],
    "samples": 970
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3130,
    "func_name": "realize_into",
    "type_comments": [
      "(torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, bool) -> torch._inductor.ir.ComputedBuffer"
    ],
    "samples": 489
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3165,
    "func_name": "MutationLayoutSHOULDREMOVE.as_fixed",
    "type_comments": [
      "() -> torch._inductor.ir.MutationLayoutSHOULDREMOVE"
    ],
    "samples": 893
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3168,
    "func_name": "MutationLayoutSHOULDREMOVE.make_indexer",
    "type_comments": [
      "() -> function"
    ],
    "samples": 893
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3233,
    "func_name": "Buffer.freeze_layout_with_same_order",
    "type_comments": [
      "(Tuple[sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, sympy.core.numbers.One]) -> None",
      "(Tuple[sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, sympy.core.numbers.Integer]) -> None",
      "(Tuple[sympy.core.mul.Mul, int, sympy.core.mul.Mul, sympy.core.mul.Mul]) -> None"
    ],
    "samples": 96
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4618,
    "func_name": "ExternKernel.codegen_size_asserts",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.WrapperCodeGen) -> None"
    ],
    "samples": 149
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4759,
    "func_name": "ExternKernelAlloc.codegen",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.WrapperCodeGen) -> None"
    ],
    "samples": 149
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6097,
    "func_name": "is_pointwise_non_scalar_tensor_num_reads_larger_than_one",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 215
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6527,
    "func_name": "LoopBody.add_indirect",
    "type_comments": [
      "(sympy.core.numbers.One) -> sympy.core.symbol.Symbol",
      "(sympy.core.numbers.Integer) -> sympy.core.symbol.Symbol",
      "(int) -> sympy.core.symbol.Symbol"
    ],
    "samples": 227
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6532,
    "func_name": "LoopBody.replace_indirect",
    "type_comments": [
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol) -> None"
    ],
    "samples": 293
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6673,
    "func_name": "indirect_indexing",
    "type_comments": [
      "(torch.fx.proxy.Proxy, sympy.core.numbers.One, bool) -> sympy.core.symbol.Symbol",
      "(torch.fx.proxy.Proxy, sympy.core.numbers.Integer, bool) -> sympy.core.symbol.Symbol",
      "(torch.fx.proxy.Proxy, int, bool) -> sympy.core.symbol.Symbol"
    ],
    "samples": 227
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6682,
    "func_name": "set_indirect",
    "type_comments": [
      "(torch._inductor.index_propagation.IndexPropVar) -> None",
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> None",
      "(str) -> None"
    ],
    "samples": 293
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/kernel/conv.py",
    "line": 379,
    "func_name": "conv_layout",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, Tuple[int], Tuple[int], Tuple[int], bool, Tuple[int], int) -> torch._inductor.ir.FixedLayout",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, Tuple[int, int], Tuple[int, int], Tuple[int, int], bool, Tuple[int, int], int) -> torch._inductor.ir.FixedLayout"
    ],
    "samples": 149
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/kernel/conv.py",
    "line": 443,
    "func_name": "convolution",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, Tuple[int], Tuple[int], Tuple[int], bool, Tuple[int], int) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, Tuple[int, int], Tuple[int, int], Tuple[int, int], bool, Tuple[int, int], int) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 146
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/kernel/conv.py",
    "line": 656,
    "func_name": "constrain_conv_to_fx_strides",
    "type_comments": [
      "(torch.fx.node.Node, *Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]) -> Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], Dict]",
      "(torch.fx.node.Node, *Optional[Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]]) -> Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], Dict]"
    ],
    "samples": 149
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 619,
    "func_name": "to_device",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.device, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 296
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2036,
    "func_name": "constrain_to_fx_strides",
    "type_comments": [
      "(torch.fx.node.Node, *Union[sympy.core.symbol.Symbol, torch._inductor.ir.TensorBox]) -> Tuple[Tuple[torch._inductor.ir.TensorBox, sympy.core.symbol.Symbol], Dict]",
      "(torch.fx.node.Node, *Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]) -> Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], Dict]",
      "(torch.fx.node.Node, *Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]) -> Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], Dict]",
      "(torch.fx.node.Node, *Optional[Union[torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list]]) -> Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch.fx.immutable_collections.immutable_list, int], Dict]"
    ],
    "samples": 117
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2037,
    "func_name": "apply_constraint",
    "type_comments": [
      "(None, None) -> None",
      "(sympy.core.symbol.Symbol, torch.fx.node.Node) -> sympy.core.symbol.Symbol",
      "(torch._inductor.ir.TensorBox, torch.fx.node.Node) -> torch._inductor.ir.TensorBox",
      "(torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list) -> torch.fx.immutable_collections.immutable_list",
      "(bool, bool) -> bool",
      "(int, int) -> int"
    ],
    "samples": 348
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2368,
    "func_name": "iota",
    "type_comments": [
      "(int, int, int, torch.dtype, torch.device, bool) -> torch._inductor.ir.TensorBox",
      "(sympy.core.numbers.Integer, int, int, torch.dtype, torch.device, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 47
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2378,
    "func_name": "fn",
    "type_comments": [
      "(Tuple[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 442
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2884,
    "func_name": "check_and_broadcast_indices",
    "type_comments": [
      "(torch.fx.immutable_collections.immutable_list, torch.device) -> Tuple[List[torch._inductor.ir.TensorBox], List[int]]",
      "(torch.fx.immutable_collections.immutable_list, torch.device) -> Tuple[List[Optional[torch._inductor.ir.TensorBox]], List[int]]"
    ],
    "samples": 107
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2908,
    "func_name": "index_output_size_and_inner_fn",
    "type_comments": [
      "(List[int], List[torch._inductor.ir.TensorBox], List[int], List[sympy.core.numbers.Integer], List[function], List[int], None, bool) -> Tuple[List[sympy.core.numbers.Integer], function]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[torch._inductor.ir.TensorBox], List[int], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[function], List[sympy.core.numbers.One], None, bool) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[torch._inductor.ir.TensorBox], List[int], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[function], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], None, bool) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Optional[torch._inductor.ir.TensorBox]], List[int], List[sympy.core.numbers.Integer], List[Optional[function]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], None, bool) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function]",
      "(List[sympy.core.numbers.Integer], List[Optional[torch._inductor.ir.TensorBox]], List[int], List[sympy.core.numbers.Integer], List[Optional[function]], List[sympy.core.numbers.Integer], None, bool) -> Tuple[List[sympy.core.numbers.Integer], function]",
      "(List[sympy.core.numbers.Integer], List[torch._inductor.ir.TensorBox], List[int], List[sympy.core.numbers.Integer], List[function], List[sympy.core.numbers.Integer], None, bool) -> Tuple[List[sympy.core.numbers.Integer], function]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Optional[torch._inductor.ir.TensorBox]], List[int], List[sympy.core.numbers.One], List[Optional[function]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], None, bool) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], function]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Optional[torch._inductor.ir.TensorBox]], List[int], List[sympy.core.numbers.Integer], List[Optional[function]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], None, bool) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], function]",
      "(List[sympy.core.numbers.Integer], List[torch._inductor.ir.TensorBox], List[int], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[function], List[sympy.core.numbers.Integer], None, bool) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function]",
      "(List[sympy.core.numbers.Integer], List[torch._inductor.ir.TensorBox], List[int], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[function], List[sympy.core.numbers.Integer], None, bool) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], function]"
    ],
    "samples": 107
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2943,
    "func_name": "fn",
    "type_comments": [
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.add.Add, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]"
    ],
    "samples": 278
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2979,
    "func_name": "index_impl",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 71
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2990,
    "func_name": "index_impl_helper",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], function, function]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool) -> Tuple[List[sympy.core.numbers.Integer], function, function]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], function, function]"
    ],
    "samples": 71
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3020,
    "func_name": "inner_fn",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.add.Add, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 218
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3038,
    "func_name": "_unsafe_index",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 32
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5100,
    "func_name": "use_two_step_variance",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, bool) -> bool"
    ],
    "samples": 173
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5116,
    "func_name": "var_mean_welford_",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, float, bool, bool) -> Tuple[torch._inductor.ir.TensorBox]",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, int, bool, bool) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]"
    ],
    "samples": 173
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5140,
    "func_name": "get_constant_or_index_expr",
    "type_comments": [
      "(int, torch.dtype) -> torch._inductor.virtualized.OpsValue",
      "(float, torch.dtype) -> torch._inductor.virtualized.OpsValue",
      "(sympy.core.mul.Mul, torch.dtype) -> torch._inductor.virtualized.OpsValue",
      "(sympy.core.numbers.Integer, torch.dtype) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 1723
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5145,
    "func_name": "scale_fn",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 960
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5159,
    "func_name": "var_mean_helper_",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, float, bool, bool) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, int, bool, bool) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]"
    ],
    "samples": 173
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5186,
    "func_name": "var_mean",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, int, bool) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]"
    ],
    "samples": 168
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5270,
    "func_name": "mutate_to",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 489
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5310,
    "func_name": "copy_",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 295
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5435,
    "func_name": "rsqrt",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 187
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5441,
    "func_name": "_rsqrt",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 646
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 808,
    "func_name": "indirect_indexing",
    "type_comments": [
      "(str, sympy.core.numbers.One, bool) -> sympy.core.symbol.Symbol",
      "(torch._inductor.codegen.triton.TritonCSEVariable, sympy.core.numbers.Integer, bool) -> sympy.core.symbol.Symbol",
      "(str, sympy.core.symbol.Symbol, bool) -> sympy.core.symbol.Symbol",
      "(str, sympy.core.numbers.Integer, bool) -> sympy.core.symbol.Symbol",
      "(str, int, bool) -> sympy.core.symbol.Symbol"
    ],
    "samples": 533
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/optimize_indexing.py",
    "line": 12,
    "func_name": "val_expressable_in_32_bits",
    "type_comments": [
      "(sympy.core.numbers.One) -> bool",
      "(sympy.core.numbers.Integer) -> bool",
      "(sympy.core.numbers.NegativeInfinity) -> bool",
      "(sympy.core.numbers.Zero) -> bool"
    ],
    "samples": 72
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/optimize_indexing.py",
    "line": 34,
    "func_name": "range_expressable_in_32_bits",
    "type_comments": [
      "(torch.utils._sympy.value_ranges.ValueRanges) -> bool"
    ],
    "samples": 54
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/optimize_indexing.py",
    "line": 40,
    "func_name": "try_to_reduce_precision",
    "type_comments": [
      "(torch.fx.node.Node, Dict[torch.fx.node.Node, Union[torch.utils._sympy.value_ranges.ValueRangeAnalysis, torch.utils._sympy.value_ranges.ValueRanges]], List, Dict[str, sympy.core.symbol.Symbol], Dict[Union[str, sympy.core.symbol.Symbol], torch.utils._sympy.value_ranges.ValueRanges]) -> None",
      "(torch.fx.node.Node, Dict[torch.fx.node.Node, Union[torch.utils._sympy.value_ranges.ValueRangeAnalysis, torch.utils._sympy.value_ranges.ValueRanges]], List, Dict[str, Union[sympy.core.add.Add, sympy.functions.elementary.complexes.Abs]], Dict[Union[str, sympy.core.symbol.Symbol], torch.utils._sympy.value_ranges.ValueRanges]) -> None",
      "(torch.fx.node.Node, Dict[torch.fx.node.Node, torch.utils._sympy.value_ranges.ValueRanges], List[sympy.core.symbol.Symbol], Dict[str, Union[sympy.core.add.Add, sympy.functions.elementary.complexes.Abs]], Dict[Union[str, sympy.core.symbol.Symbol], torch.utils._sympy.value_ranges.ValueRanges]) -> None",
      "(torch.fx.node.Node, Dict[torch.fx.node.Node, torch.utils._sympy.value_ranges.ValueRanges], List[sympy.core.symbol.Symbol], Dict[str, Union[sympy.core.add.Add, sympy.core.symbol.Symbol]], Dict[Union[str, sympy.core.symbol.Symbol], torch.utils._sympy.value_ranges.ValueRanges]) -> None",
      "(torch.fx.node.Node, Dict[torch.fx.node.Node, Union[torch.utils._sympy.value_ranges.ValueRangeAnalysis, torch.utils._sympy.value_ranges.ValueRanges]], List, Dict[str, Union[sympy.core.add.Add, sympy.core.mul.Mul]], Dict[Union[str, sympy.core.symbol.Symbol], torch.utils._sympy.value_ranges.ValueRanges]) -> None"
    ],
    "samples": 44
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/optimize_indexing.py",
    "line": 44,
    "func_name": "skip_filter",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 142,
    "func_name": "BaseSchedulerNode.add_fake_dep",
    "type_comments": [
      "(torch._inductor.dependencies.WeakDep) -> None",
      "(torch._inductor.dependencies.StarDep) -> None"
    ],
    "samples": 657
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1653,
    "func_name": "dep_closure",
    "type_comments": [
      "(str) -> Set[str]",
      "(str) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 1169
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2682,
    "func_name": "Scheduler.remove_buffer",
    "type_comments": [
      "(str) -> None"
    ],
    "samples": 539
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 2690,
    "func_name": "Scheduler.remove_inplace_buffer",
    "type_comments": [
      "(str) -> None"
    ],
    "samples": 20
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 121,
    "func_name": "remove_zero_terms",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing, sympy.core.numbers.One) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.One) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add, sympy.core.numbers.Integer) -> sympy.core.mul.Mul",
      "(torch.utils._sympy.functions.Identity, sympy.core.numbers.One) -> torch.utils._sympy.functions.Identity",
      "(sympy.core.add.Add, sympy.core.numbers.One) -> sympy.core.add.Add",
      "(sympy.core.add.Add, sympy.core.numbers.Integer) -> sympy.core.add.Add",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Integer) -> sympy.core.symbol.Symbol",
      "(torch.utils._sympy.functions.Identity, sympy.core.numbers.Integer) -> torch.utils._sympy.functions.Identity"
    ],
    "samples": 350
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 136,
    "func_name": "visit_indexing_div",
    "type_comments": [
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Integer) -> sympy.core.numbers.Zero",
      "(sympy.core.add.Add, sympy.core.numbers.Integer) -> torch.utils._sympy.functions.FloorDiv",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Integer) -> torch.utils._sympy.functions.FloorDiv"
    ],
    "samples": 217
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 139,
    "func_name": "visit_modular_indexing",
    "type_comments": [
      "(sympy.core.add.Add, sympy.core.numbers.One, sympy.core.numbers.Integer) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.One, sympy.core.mul.Mul) -> sympy.core.symbol.Symbol",
      "(torch.utils._sympy.functions.Identity, sympy.core.numbers.One, sympy.core.numbers.Integer) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> torch.utils._sympy.functions.FloorDiv",
      "(sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> torch.utils._sympy.functions.FloorDiv",
      "(sympy.core.add.Add, sympy.core.numbers.One, sympy.core.mul.Mul) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> torch.utils._sympy.functions.FloorDiv",
      "(sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.One, sympy.core.numbers.Integer) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.One, sympy.core.numbers.Integer) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.add.Add, sympy.core.numbers.One, sympy.core.mul.Mul) -> sympy.core.add.Add",
      "(sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> torch.utils._sympy.functions.ModularIndexing",
      "(torch.utils._sympy.functions.Identity, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> torch.utils._sympy.functions.ModularIndexing",
      "(sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> sympy.core.add.Add",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> torch.utils._sympy.functions.FloorDiv",
      "(sympy.core.add.Add, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add, sympy.core.numbers.One, sympy.core.numbers.Integer) -> sympy.core.add.Add"
    ],
    "samples": 269
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 334,
    "func_name": "SizeVarAllocator.statically_known_lt",
    "type_comments": [
      "(sympy.core.add.Add, sympy.core.numbers.Integer) -> bool",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Integer) -> bool",
      "(torch.utils._sympy.functions.Identity, sympy.core.numbers.Integer) -> bool",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> bool",
      "(int, sympy.core.numbers.Integer) -> bool",
      "(sympy.core.add.Add, sympy.core.mul.Mul) -> bool"
    ],
    "samples": 269
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 342,
    "func_name": "SizeVarAllocator.statically_known_gt",
    "type_comments": [
      "(sympy.core.mul.Mul, sympy.core.mul.Mul) -> bool",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> bool",
      "(sympy.core.mul.Mul, sympy.core.symbol.Symbol) -> bool",
      "(sympy.core.symbol.Symbol, sympy.core.mul.Mul) -> bool"
    ],
    "samples": 734
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 456,
    "func_name": "SizeVarAllocator.evaluate_static_shapes",
    "type_comments": [
      "(List[sympy.core.numbers.Integer]) -> List[int]",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> List[int]"
    ],
    "samples": 158
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 769,
    "func_name": "_join_dimensions_cached",
    "type_comments": [
      "(sympy.core.add.Add) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.core.add.Add) -> sympy.core.add.Add",
      "(sympy.core.add.Add) -> torch.utils._sympy.functions.ModularIndexing"
    ],
    "samples": 191
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 396,
    "func_name": "pad_listlike",
    "type_comments": [
      "(Tuple[int], int) -> Tuple[int]",
      "(torch.fx.immutable_collections.immutable_list, int) -> torch.fx.immutable_collections.immutable_list",
      "(Tuple[int, int], int) -> Tuple[int, int]",
      "(List[int], int) -> List[int]"
    ],
    "samples": 258
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 608,
    "func_name": "generate_assert",
    "type_comments": [
      "(bool) -> bool"
    ],
    "samples": 227
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 202,
    "func_name": "OpsValue.__sub__",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 975
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 208,
    "func_name": "OpsValue.__truediv__",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 960
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 284,
    "func_name": "indirect_indexing",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue, sympy.core.numbers.Integer, bool) -> sympy.core.add.Add",
      "(torch._inductor.virtualized.OpsValue, sympy.core.numbers.Integer, bool) -> sympy.functions.elementary.miscellaneous.Min",
      "(torch._inductor.virtualized.OpsValue, sympy.core.numbers.One, bool) -> sympy.core.symbol.Symbol",
      "(torch._inductor.virtualized.OpsValue, int, bool) -> sympy.core.symbol.Symbol",
      "(torch._inductor.virtualized.OpsValue, sympy.core.numbers.Integer, bool) -> sympy.core.symbol.Symbol",
      "(torch._inductor.virtualized.OpsValue, sympy.core.symbol.Symbol, bool) -> sympy.core.symbol.Symbol"
    ],
    "samples": 501
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 228,
    "func_name": "CacheBase.update_local_cache",
    "type_comments": [
      "(Dict[str, Union[bool, float]]) -> None"
    ],
    "samples": 86
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 250,
    "func_name": "LocalCache.set_value",
    "type_comments": [
      "(float, *str) -> None",
      "(bool, *str) -> None"
    ],
    "samples": 86
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 479,
    "func_name": "ExprPrinter._print_FloatTrueDiv",
    "type_comments": [
      "(torch.utils._sympy.functions.FloatTrueDiv) -> str"
    ],
    "samples": 92
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 605,
    "func_name": "PythonPrinter._print_FloorDiv",
    "type_comments": [
      "(torch.utils._sympy.functions.FloorDiv) -> str"
    ],
    "samples": 47
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1265,
    "func_name": "KernelArgs.size",
    "type_comments": [
      "(sympy.core.symbol.Symbol) -> str"
    ],
    "samples": 327
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 406,
    "func_name": "TritonPrinter._print_IntTrueDiv",
    "type_comments": [
      "(torch.utils._sympy.functions.IntTrueDiv) -> str"
    ],
    "samples": 101
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 230,
    "func_name": "SymbolicCallArg.__str__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 404
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1029,
    "func_name": "WrapperCodeGen.ensure_size_computed",
    "type_comments": [
      "(sympy.core.symbol.Symbol) -> None",
      "(int) -> None"
    ],
    "samples": 352
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1117,
    "func_name": "add_expr_input",
    "type_comments": [
      "(str, int) -> None"
    ],
    "samples": 106
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1425,
    "func_name": "WrapperCodeGen.generate_numel_expr",
    "type_comments": [
      "(str, torch._inductor.codegen.simd.IterationRangesRoot) -> torch._inductor.codegen.wrapper.SymbolicCallArg"
    ],
    "samples": 298
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 129,
    "func_name": "pad_dim",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, int, int) -> torch._subclasses.fake_tensor.FakeTensor",
      "(torch.Tensor, int, int) -> torch.Tensor"
    ],
    "samples": 101
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 149,
    "func_name": "pad_addmm",
    "type_comments": [
      "(torch.Tensor, torch.Tensor, torch.Tensor, int, int, int, float, float, bool, bool) -> torch.Tensor",
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, int, int, int, int, int, bool, bool) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 129
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 251,
    "func_name": "set_cached_should_pad",
    "type_comments": [
      "(str, bool) -> None"
    ],
    "samples": 62
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 255,
    "func_name": "get_cached_base_mm_benchmark_time",
    "type_comments": [
      "(str) -> float",
      "(str) -> None"
    ],
    "samples": 62
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 259,
    "func_name": "set_cached_base_mm_benchmark_time",
    "type_comments": [
      "(str, float) -> None"
    ],
    "samples": 58
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 326,
    "func_name": "should_pad",
    "type_comments": [
      "(str, float, float) -> bool"
    ],
    "samples": 59
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 401,
    "func_name": "realize_tensor",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor) -> torch.Tensor"
    ],
    "samples": 89
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 440,
    "func_name": "write_pad",
    "type_comments": [
      "() -> None"
    ],
    "samples": 687
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 457,
    "func_name": "write_pad",
    "type_comments": [
      "() -> None"
    ],
    "samples": 796
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 506,
    "func_name": "orig_bench_fn",
    "type_comments": [
      "() -> None"
    ],
    "samples": 1622
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 512,
    "func_name": "pad_bench_fn",
    "type_comments": [
      "() -> None"
    ],
    "samples": 1418
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 666,
    "func_name": "pad_mat1",
    "type_comments": [
      "(torch.Tensor, int, int, bool) -> torch.Tensor",
      "(torch._subclasses.fake_tensor.FakeTensor, int, int, bool) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 257
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 676,
    "func_name": "pad_mat2",
    "type_comments": [
      "(torch.Tensor, int, int, bool) -> torch.Tensor",
      "(torch._subclasses.fake_tensor.FakeTensor, int, int, bool) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 736
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 687,
    "func_name": "pad_mm",
    "type_comments": [
      "(torch.Tensor, torch.Tensor, int, int, int, bool, bool) -> torch.Tensor"
    ],
    "samples": 275
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 235,
    "func_name": "GraphLowering.symbolic_sizes_strides",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[sympy.core.symbol.Symbol], List[sympy.core.numbers.One]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.One, sympy.core.numbers.Zero]]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[sympy.core.mul.Mul], List[sympy.core.numbers.One]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[Union[sympy.core.mul.Mul, sympy.core.numbers.Integer]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(torch._subclasses.fake_tensor.FakeTensor) -> Tuple[List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], List[sympy.core.numbers.One]]"
    ],
    "samples": 270
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 101,
    "func_name": "add",
    "type_comments": [
      "(torch._inductor.index_propagation.TypedExpr, torch._inductor.index_propagation.TypedExpr) -> torch._inductor.index_propagation.TypedExpr"
    ],
    "samples": 56
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 155,
    "func_name": "minimum",
    "type_comments": [
      "(torch._inductor.index_propagation.TypedExpr, torch._inductor.index_propagation.TypedExpr) -> torch._inductor.index_propagation.TypedExpr"
    ],
    "samples": 51
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 564,
    "func_name": "get_reduction_combine_fn",
    "type_comments": [
      "(str, torch.dtype, bool) -> function"
    ],
    "samples": 214
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 764,
    "func_name": "outer_reduction_splits",
    "type_comments": [
      "(int, int) -> int",
      "(sympy.core.numbers.Integer, int) -> sympy.core.numbers.One",
      "(sympy.core.numbers.Integer, int) -> sympy.core.numbers.Integer"
    ],
    "samples": 105
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1200,
    "func_name": "create_multilayer_helper",
    "type_comments": [
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer], List[Union[int, sympy.core.numbers.Integer]], List[sympy.core.numbers.Integer], str, int, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer], List[torch.utils._sympy.functions.FloorDiv], str, sympy.core.numbers.Integer, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.symbol.Symbol], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[torch.utils._sympy.functions.FloorDiv], str, sympy.core.numbers.Integer, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[sympy.core.numbers.Integer], List[int], List[sympy.core.numbers.Integer], str, int, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul], str, sympy.core.numbers.Integer, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul], str, sympy.core.numbers.Integer, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer], List[torch.utils._sympy.functions.FloorDiv], str, sympy.core.numbers.Integer, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], List[sympy.core.numbers.Integer], List[sympy.core.mul.Mul], str, sympy.core.numbers.Integer, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 137
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1240,
    "func_name": "intermediate_fn",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]], List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol], List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 261
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1262,
    "func_name": "create_multilayer",
    "type_comments": [
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[sympy.core.numbers.Integer], str, int, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.symbol.Symbol], str, sympy.core.numbers.Integer, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[sympy.core.numbers.Integer], str, int, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, sympy.core.numbers.Integer, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], List[sympy.core.mul.Mul], str, sympy.core.numbers.Integer, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List, List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, sympy.core.numbers.Integer, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox",
      "(torch.device, torch.dtype, torch.dtype, function, List[sympy.core.numbers.Integer], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], str, sympy.core.numbers.Integer, torch._inductor.runtime.hints.ReductionHint) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 137
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3339,
    "func_name": "NoneAsConstantBuffer.get_unbacked_symbol_uses",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 144
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3342,
    "func_name": "NoneAsConstantBuffer.codegen_reference",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> str"
    ],
    "samples": 144
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3347,
    "func_name": "ShapeAsConstantBuffer.__init__",
    "type_comments": [
      "(sympy.core.symbol.Symbol) -> None",
      "(sympy.core.numbers.Integer) -> None",
      "(sympy.core.mul.Mul) -> None"
    ],
    "samples": 61
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3351,
    "func_name": "shape",
    "type_comments": [
      "() -> sympy.core.numbers.Integer",
      "() -> sympy.core.mul.Mul",
      "() -> sympy.core.symbol.Symbol"
    ],
    "samples": 107
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3355,
    "func_name": "ShapeAsConstantBuffer.get_unbacked_symbol_uses",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 61
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3358,
    "func_name": "ShapeAsConstantBuffer.codegen_reference",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer) -> str"
    ],
    "samples": 61
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 719,
    "func_name": "where",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 181
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 721,
    "func_name": "fn",
    "type_comments": [
      "(*torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 910
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3645,
    "func_name": "pooling_size",
    "type_comments": [
      "(sympy.core.numbers.Integer, int, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool) -> Tuple[sympy.core.numbers.One, bool]",
      "(sympy.core.numbers.Integer, int, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, List[int], bool) -> Tuple[sympy.core.numbers.One, bool]",
      "(sympy.core.numbers.Integer, int, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool) -> Tuple[sympy.core.numbers.Integer, bool]",
      "(sympy.core.numbers.Integer, int, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, List[int], bool) -> Tuple[sympy.core.numbers.Integer, bool]"
    ],
    "samples": 63
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 4427,
    "func_name": "avg_pool2d",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, int, bool, bool, None) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, Tuple[], int, bool, bool, None) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 21
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 4471,
    "func_name": "_avg_poolnd",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, Tuple[], int, bool, bool, None, int) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, int, bool, bool, None, int) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 21
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 4536,
    "func_name": "fn_sum",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], function) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol], function) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]], function) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], function) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 42
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 4555,
    "func_name": "fn",
    "type_comments": [
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 42
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 4591,
    "func_name": "avg_pool2d_backward",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, bool, None) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 12
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 4681,
    "func_name": "fn",
    "type_comments": [
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 26
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5984,
    "func_name": "sym_numel",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> sympy.core.mul.Mul"
    ],
    "samples": 70
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/runtime_utils.py",
    "line": 90,
    "func_name": "do_bench_gpu",
    "type_comments": [
      "(*function) -> float"
    ],
    "samples": 86
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/runtime_utils.py",
    "line": 91,
    "func_name": "load_triton",
    "type_comments": [
      "() -> Tuple[function, str]"
    ],
    "samples": 86
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 459,
    "func_name": "SizeVarAllocator.remove_precomputed_replacements",
    "type_comments": [
      "(sympy.core.mul.Mul) -> sympy.core.mul.Mul",
      "(sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add) -> sympy.core.add.Add",
      "(torch.utils._sympy.functions.FloorDiv) -> torch.utils._sympy.functions.FloorDiv"
    ],
    "samples": 4513
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 732,
    "func_name": "reciprocal",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 186
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1729,
    "func_name": "Kernel.indirect_assert",
    "type_comments": [
      "(str, str, str, str) -> str",
      "(str, str, str, None) -> str"
    ],
    "samples": 138
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1879,
    "func_name": "check_bounds",
    "type_comments": [
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Integer, bool, bool) -> None",
      "(sympy.core.add.Add, sympy.core.numbers.Integer, bool, bool) -> None",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer, bool, bool) -> None",
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, bool, bool) -> None",
      "(sympy.core.numbers.Zero, sympy.core.numbers.One, bool, bool) -> None"
    ],
    "samples": 13
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda/device_op_overrides.py",
    "line": 9,
    "func_name": "CUDADeviceOpOverrides.set_device",
    "type_comments": [
      "(int) -> str"
    ],
    "samples": 112
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda_combined_scheduling.py",
    "line": 27,
    "func_name": "CUDACombinedScheduling.__init__",
    "type_comments": [
      "(None) -> None",
      "(torch._inductor.scheduler.Scheduler) -> None"
    ],
    "samples": 146
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cuda_combined_scheduling.py",
    "line": 89,
    "func_name": "CUDACombinedScheduling.codegen_foreach",
    "type_comments": [
      "(*torch._inductor.scheduler.ForeachKernelSchedulerNode) -> None"
    ],
    "samples": 52
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1515,
    "func_name": "SIMDScheduling.codegen_foreach",
    "type_comments": [
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode) -> None"
    ],
    "samples": 52
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 381,
    "func_name": "TritonPrinter._print_ToFloat",
    "type_comments": [
      "(torch.utils._sympy.functions.ToFloat) -> str"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 441,
    "func_name": "TritonPrinter._print_min_max_helper",
    "type_comments": [
      "(sympy.functions.elementary.miscellaneous.Min, str) -> str",
      "(sympy.functions.elementary.miscellaneous.Min, str) -> pyannotate_runtime.collect_types.UnknownType",
      "(sympy.functions.elementary.miscellaneous.Max, str) -> str"
    ],
    "samples": 65
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 461,
    "func_name": "TritonPrinter._print_Min",
    "type_comments": [
      "(sympy.functions.elementary.miscellaneous.Min) -> str",
      "(sympy.functions.elementary.miscellaneous.Min) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 54
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 464,
    "func_name": "TritonPrinter._print_Max",
    "type_comments": [
      "(sympy.functions.elementary.miscellaneous.Max) -> str"
    ],
    "samples": 37
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 686,
    "func_name": "sqrt",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 255
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 830,
    "func_name": "logical_and",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 46
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 918,
    "func_name": "pow",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 258
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 942,
    "func_name": "floor",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 21
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 946,
    "func_name": "floordiv",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 23
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 955,
    "func_name": "sign",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1239,
    "func_name": "assert_function",
    "type_comments": [
      "() -> str"
    ],
    "samples": 138
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1624,
    "func_name": "TritonKernel.check_bounds",
    "type_comments": [
      "(sympy.core.add.Add, sympy.core.numbers.Integer, bool, bool) -> None",
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, bool, bool) -> None",
      "(sympy.core.numbers.Zero, sympy.core.numbers.One, bool, bool) -> None",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Integer, bool, bool) -> None"
    ],
    "samples": 142
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_foreach.py",
    "line": 19,
    "func_name": "PartitionState",
    "type_comments": [
      "() -> None"
    ],
    "samples": 26
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_foreach.py",
    "line": 29,
    "func_name": "PartitionState.finalize",
    "type_comments": [
      "() -> None"
    ],
    "samples": 52
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_foreach.py",
    "line": 34,
    "func_name": "ForeachKernel",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 26
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_foreach.py",
    "line": 37,
    "func_name": "_update_partition",
    "type_comments": [
      "(torch._inductor.codegen.triton_foreach.PartitionState, int, Tuple[List[torch._inductor.scheduler.SchedulerNode], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One], sympy.core.numbers.Integer, sympy.core.numbers.One]) -> None",
      "(torch._inductor.codegen.triton_foreach.PartitionState, int, Tuple[List[torch._inductor.scheduler.SchedulerNode], Tuple[sympy.core.numbers.One, sympy.core.numbers.One], sympy.core.numbers.One, sympy.core.numbers.One]) -> None"
    ],
    "samples": 250
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_foreach.py",
    "line": 47,
    "func_name": "horizontal_partition",
    "type_comments": [
      "(List[torch._inductor.scheduler.FusedSchedulerNode], torch._inductor.codegen.triton.TritonScheduling) -> List[List[Tuple[List[torch._inductor.scheduler.SchedulerNode], Tuple[sympy.core.numbers.Integer, sympy.core.numbers.One], sympy.core.numbers.Integer, sympy.core.numbers.One]]]",
      "(List[torch._inductor.scheduler.SchedulerNode], torch._inductor.codegen.triton.TritonScheduling) -> List[List[Tuple[List[torch._inductor.scheduler.SchedulerNode], Tuple[sympy.core.numbers.One, sympy.core.numbers.One], sympy.core.numbers.One, sympy.core.numbers.One]]]"
    ],
    "samples": 52
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_foreach.py",
    "line": 89,
    "func_name": "ForeachKernel.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 103
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_foreach.py",
    "line": 100,
    "func_name": "ForeachKernel.get_block_size",
    "type_comments": [
      "() -> int"
    ],
    "samples": 250
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_foreach.py",
    "line": 106,
    "func_name": "codegen_pid_offsets",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer, int, int, str) -> None"
    ],
    "samples": 250
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_foreach.py",
    "line": 113,
    "func_name": "ForeachKernel.codegen_pid_range",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer, int) -> None"
    ],
    "samples": 250
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_foreach.py",
    "line": 134,
    "func_name": "ForeachKernel.create_sub_kernel",
    "type_comments": [
      "(str, Set[str], torch._inductor.runtime.hints.ReductionHint, *Union[sympy.core.numbers.Integer, sympy.core.numbers.One]) -> torch._inductor.codegen.triton.TritonKernel",
      "(str, Set[str], torch._inductor.runtime.hints.ReductionHint, *sympy.core.numbers.One) -> torch._inductor.codegen.triton.TritonKernel"
    ],
    "samples": 250
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_foreach.py",
    "line": 156,
    "func_name": "ForeachKernel.jit_lines",
    "type_comments": [
      "() -> str"
    ],
    "samples": 103
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_foreach.py",
    "line": 181,
    "func_name": "ForeachKernel.grid",
    "type_comments": [
      "() -> Tuple[int, int, int]"
    ],
    "samples": 103
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_foreach.py",
    "line": 190,
    "func_name": "ForeachKernel.codegen_kernel",
    "type_comments": [
      "(None) -> str"
    ],
    "samples": 103
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton_foreach.py",
    "line": 230,
    "func_name": "ForeachKernel.call_kernel",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.WrapperCodeGen, str) -> None"
    ],
    "samples": 103
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 547,
    "func_name": "grid_sampler_2d",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, int, int, bool) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 578,
    "func_name": "_foreach_addcmul_scalar",
    "type_comments": [
      "(List[torch._subclasses.fake_tensor.FakeTensor], List[torch._subclasses.fake_tensor.FakeTensor], float) -> List[torch._subclasses.fake_tensor.FakeTensor]"
    ],
    "samples": 26
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 585,
    "func_name": "_foreach_addcdiv_scalar",
    "type_comments": [
      "(List[torch._subclasses.fake_tensor.FakeTensor], List[torch._subclasses.fake_tensor.FakeTensor], int) -> List[torch._subclasses.fake_tensor.FakeTensor]"
    ],
    "samples": 26
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 592,
    "func_name": "_foreach_lerp_scalar",
    "type_comments": [
      "(List[torch._subclasses.fake_tensor.FakeTensor], List[torch._subclasses.fake_tensor.FakeTensor], float) -> List[torch._subclasses.fake_tensor.FakeTensor]"
    ],
    "samples": 26
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 752,
    "func_name": "max_pool2d_with_indices",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, List[int], List[int], List[int], int, bool) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]",
      "(torch._subclasses.fake_tensor.FakeTensor, List[int], List[int], int, int, bool) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]"
    ],
    "samples": 32
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 517,
    "func_name": "extract_input_node_reduction_ranges",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> Tuple[None, None]"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/dedupe_symint_uses.py",
    "line": 41,
    "func_name": "_SymHashingDict.__getitem__",
    "type_comments": [
      "(torch.SymInt) -> torch.fx.node.Node"
    ],
    "samples": 30
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/dedupe_symint_uses.py",
    "line": 44,
    "func_name": "_SymHashingDict.__contains__",
    "type_comments": [
      "(torch.SymInt) -> bool"
    ],
    "samples": 30
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 161,
    "func_name": "reorder_for_locality",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 69
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 162,
    "func_name": "visit",
    "type_comments": [
      "(torch.fx.node.Node) -> None"
    ],
    "samples": 3905
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 676,
    "func_name": "slice_scatter_noop",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, int, int, int, int) -> bool"
    ],
    "samples": 33
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 697,
    "func_name": "convert_element_type_noop",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch.dtype) -> bool"
    ],
    "samples": 77
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 707,
    "func_name": "int_noop",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor) -> bool"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 712,
    "func_name": "pow_noop",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, float) -> bool",
      "(torch._subclasses.fake_tensor.FakeTensor, int) -> bool"
    ],
    "samples": 81
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 39,
    "func_name": "graph_call_function",
    "type_comments": [
      "(torch.fx.graph.Graph, function, *Union[List[torch._inductor.fx_passes.reinplace.ViewOp], torch.fx.node.Node]) -> torch.fx.node.Node",
      "(torch.fx.graph.Graph, torch._ops.OpOverload, *Union[int, torch.fx.node.Node]) -> torch.fx.node.Node"
    ],
    "samples": 20
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 59,
    "func_name": "_inplace_generalized_scatter",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, List[torch._inductor.fx_passes.reinplace.ViewOp]) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 14
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 78,
    "func_name": "_generalized_scatter",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, List[torch._inductor.fx_passes.reinplace.ViewOp]) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 14
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 85,
    "func_name": "_decompose_scatter_functional_helper",
    "type_comments": [
      "(torch.fx.graph.Graph, torch.fx.node.Node, torch.fx.node.Node, torch.fx.immutable_collections.immutable_list) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.fx.graph.Graph, torch.fx.node.Node, torch.fx.node.Node, List[torch._inductor.fx_passes.reinplace.ViewOp]) -> torch.fx.node.Node",
      "(torch.fx.graph.Graph, torch.fx.node.Node, torch.fx.node.Node, torch.fx.immutable_collections.immutable_list) -> torch.fx.node.Node"
    ],
    "samples": 13
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 109,
    "func_name": "_decompose_scatter_functional",
    "type_comments": [
      "(torch.fx.graph.Graph, torch.fx.node.Node) -> torch.fx.node.Node"
    ],
    "samples": 12
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 165,
    "func_name": "scatter_always_uses_mutation",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 14
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 170,
    "func_name": "should_reinplace_scatter",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 11
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 254,
    "func_name": "handle_view_scatter",
    "type_comments": [
      "(torch.fx.node.Node) -> None"
    ],
    "samples": 14
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 264,
    "func_name": "can_fuse",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 14
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 413,
    "func_name": "any_use_of_views_after_node",
    "type_comments": [
      "(torch.fx.node.Node, List[torch.fx.node.Node], None) -> bool",
      "(torch.fx.node.Node, List[torch.fx.node.Node], torch.fx.node.Node) -> bool"
    ],
    "samples": 363
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 417,
    "func_name": "is_meta_only_user",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 17
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/reinplace.py",
    "line": 438,
    "func_name": "can_inplace",
    "type_comments": [
      "(torch.fx.node.Node, torch.fx.immutable_collections.immutable_list) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch.fx.node.Node, torch.fx.node.Node) -> bool"
    ],
    "samples": 363
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_utils.py",
    "line": 221,
    "func_name": "is_node_realized",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 11
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_utils.py",
    "line": 230,
    "func_name": "is_buffer",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 11
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_utils.py",
    "line": 243,
    "func_name": "realizes_inputs",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 14
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 735,
    "func_name": "GraphLowering.register_list",
    "type_comments": [
      "(List[str]) -> str"
    ],
    "samples": 104
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/inductor_prims.py",
    "line": 22,
    "func_name": "meta",
    "type_comments": [
      "(*Union[List[int], torch._subclasses.fake_tensor.FakeTensor]) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]"
    ],
    "samples": 53
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/inductor_prims.py",
    "line": 99,
    "func_name": "_low_memory_max_pool2d_with_offsets_aten",
    "type_comments": [
      "(List[int], List[int], List[int], List[int], bool) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]"
    ],
    "samples": 53
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 544,
    "func_name": "Scatter.store_output",
    "type_comments": [
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 98
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 907,
    "func_name": "_unroll_reduction_fn",
    "type_comments": [
      "(function, List[sympy.core.numbers.Integer], str, torch.dtype) -> function"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 916,
    "func_name": "fn",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 38
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2294,
    "func_name": "handle_negative_index",
    "type_comments": [
      "(int, sympy.core.symbol.Symbol) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.One, sympy.core.numbers.Integer) -> sympy.core.numbers.One",
      "(sympy.core.numbers.One, sympy.core.numbers.One) -> sympy.core.numbers.One",
      "(sympy.core.numbers.One, int) -> sympy.core.numbers.One",
      "(sympy.core.numbers.Zero, sympy.core.numbers.Integer) -> sympy.core.numbers.Zero",
      "(sympy.core.numbers.Zero, int) -> sympy.core.numbers.Zero",
      "(int, sympy.core.numbers.Integer) -> sympy.core.numbers.Zero",
      "(int, sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Zero, sympy.core.numbers.One) -> sympy.core.numbers.Zero",
      "(int, sympy.core.numbers.One) -> sympy.core.numbers.Zero",
      "(int, sympy.core.symbol.Symbol) -> sympy.core.add.Add",
      "(int, sympy.core.numbers.Integer) -> sympy.core.numbers.One",
      "(int, int) -> sympy.core.numbers.Zero",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> sympy.core.numbers.Integer"
    ],
    "samples": 298
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2517,
    "func_name": "normalize_start_end",
    "type_comments": [
      "(torch._inductor.ir.ReinterpretView, sympy.core.numbers.Integer, int, int) -> Tuple[int, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.One, sympy.core.numbers.One, sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.PermuteView, sympy.core.numbers.One, int, int) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.TensorBox, sympy.core.numbers.One, int, int) -> Tuple[int, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.One, int, int) -> Tuple[int, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.Zero, sympy.core.numbers.One, sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.One, int, int) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.ExpandView, sympy.core.numbers.Integer, sympy.core.numbers.Zero, sympy.core.numbers.One) -> Tuple[int, sympy.core.numbers.One]",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.Zero, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.PermuteView, sympy.core.numbers.Integer, int, int) -> Tuple[int, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.One, int, int) -> Tuple[sympy.core.add.Add, sympy.core.symbol.Symbol]",
      "(torch._inductor.ir.PermuteView, sympy.core.numbers.Integer, int, int) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.View, sympy.core.numbers.Integer, int, int) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.TensorBox, sympy.core.numbers.Integer, int, int) -> Tuple[int, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.View, sympy.core.numbers.One, sympy.core.numbers.Zero, sympy.core.numbers.One) -> Tuple[int, sympy.core.numbers.One]",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.Integer, int, int) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.ReinterpretView, sympy.core.numbers.One, int, int) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.SliceView, sympy.core.numbers.Integer, int, int) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.ReinterpretView, sympy.core.numbers.Integer, int, int) -> Tuple[sympy.core.numbers.Integer, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.numbers.One) -> Tuple[int, sympy.core.numbers.One]",
      "(torch._inductor.ir.View, sympy.core.numbers.Integer, int, int) -> Tuple[int, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.Integer, int, int) -> Tuple[int, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.SliceView, sympy.core.numbers.Integer, int, int) -> Tuple[int, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.ReinterpretView, sympy.core.numbers.One, int, int) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.ReinterpretView, sympy.core.numbers.Integer, sympy.core.numbers.Zero, sympy.core.numbers.One) -> Tuple[int, sympy.core.numbers.One]",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.One, int, int) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]",
      "(torch._inductor.ir.StorageBox, sympy.core.numbers.One, sympy.core.numbers.Zero, sympy.core.numbers.One) -> Tuple[int, sympy.core.numbers.One]",
      "(torch._inductor.ir.ReinterpretView, sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer) -> Tuple[sympy.core.numbers.One, sympy.core.numbers.Integer]"
    ],
    "samples": 180
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2533,
    "func_name": "clamp",
    "type_comments": [
      "(sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.One, int, sympy.core.numbers.Integer) -> sympy.core.numbers.One",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Zero, int, sympy.core.numbers.Integer) -> int",
      "(sympy.core.numbers.Zero, int, sympy.core.numbers.One) -> int",
      "(sympy.core.add.Add, int, sympy.core.symbol.Symbol) -> sympy.core.add.Add",
      "(sympy.core.numbers.One, int, int) -> sympy.core.numbers.One",
      "(sympy.core.numbers.One, int, sympy.core.numbers.One) -> sympy.core.numbers.One",
      "(sympy.core.numbers.Integer, sympy.core.add.Add, sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.numbers.Integer, int, sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Zero, int, int) -> int"
    ],
    "samples": 275
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2536,
    "func_name": "clamp_wrap",
    "type_comments": [
      "(int, int, sympy.core.numbers.Integer, int) -> sympy.core.numbers.Integer",
      "(int, int, sympy.core.numbers.Integer, int) -> sympy.core.numbers.One",
      "(int, int, sympy.core.numbers.Integer, int) -> int",
      "(int, int, sympy.core.symbol.Symbol, int) -> sympy.core.add.Add",
      "(sympy.core.numbers.Zero, int, int, int) -> int",
      "(int, int, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(int, sympy.core.add.Add, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.numbers.One, int, sympy.core.numbers.Integer, int) -> sympy.core.numbers.One",
      "(sympy.core.numbers.One, int, sympy.core.numbers.One, sympy.core.numbers.One) -> sympy.core.numbers.One",
      "(sympy.core.numbers.Integer, int, sympy.core.numbers.Integer, int) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.One, int, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> sympy.core.numbers.One",
      "(sympy.core.numbers.Integer, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Zero, int, sympy.core.numbers.One, int) -> int",
      "(sympy.core.numbers.One, int, int, int) -> sympy.core.numbers.One",
      "(int, sympy.core.numbers.One, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(int, sympy.core.numbers.Integer, sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Zero, int, sympy.core.numbers.Integer, int) -> int"
    ],
    "samples": 275
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2581,
    "func_name": "reindex",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, torch.utils._sympy.functions.Identity, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, torch.utils._sympy.functions.Identity, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]",
      "(List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.add.Add, sympy.core.add.Add]) -> List[sympy.core.add.Add]",
      "(List[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.add.Add, sympy.core.symbol.Symbol]) -> List[sympy.core.add.Add]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.add.Add, sympy.core.add.Add]) -> List[Union[sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(List[sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(List[Union[torch.utils._sympy.functions.Identity, torch.utils._sympy.functions.ModularIndexing]]) -> List[Union[sympy.core.add.Add, torch.utils._sympy.functions.Identity, torch.utils._sympy.functions.ModularIndexing]]"
    ],
    "samples": 352
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3640,
    "func_name": "ComputedBuffer.get_reduction_size",
    "type_comments": [
      "() -> List"
    ],
    "samples": 13
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6606,
    "func_name": "CaptureIndexing.check_bounds",
    "type_comments": [
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, bool, bool) -> torch.fx.proxy.Proxy",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Integer, bool, bool) -> torch.fx.proxy.Proxy",
      "(sympy.core.numbers.Zero, sympy.core.numbers.One, bool, bool) -> torch.fx.proxy.Proxy",
      "(sympy.core.add.Add, sympy.core.numbers.Integer, bool, bool) -> torch.fx.proxy.Proxy",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer, bool, bool) -> torch.fx.proxy.Proxy"
    ],
    "samples": 18
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 267,
    "func_name": "wrapped",
    "type_comments": [
      "(*torch.fx.immutable_collections.immutable_list) -> List[torch._inductor.ir.TensorBox]",
      "(*Union[int, torch.fx.immutable_collections.immutable_list]) -> List[torch._inductor.ir.TensorBox]",
      "(*Union[int, torch.fx.immutable_collections.immutable_list]) -> pyannotate_runtime.collect_types.UnknownType",
      "(*Union[float, torch.fx.immutable_collections.immutable_list]) -> List[torch._inductor.ir.TensorBox]"
    ],
    "samples": 104
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 479,
    "func_name": "inner",
    "type_comments": [
      "(int, *Union[int, torch.fx.immutable_collections.immutable_list]) -> List[torch._inductor.ir.TensorBox]",
      "(int, *torch.fx.immutable_collections.immutable_list) -> List[torch._inductor.ir.TensorBox]",
      "(int, *Union[float, torch.fx.immutable_collections.immutable_list]) -> List[torch._inductor.ir.TensorBox]"
    ],
    "samples": 130
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 482,
    "func_name": "group_args",
    "type_comments": [
      "(zip) -> collections.defaultdict"
    ],
    "samples": 130
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 832,
    "func_name": "floor",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 968,
    "func_name": "slice_",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, sympy.core.numbers.One, int, int, int, bool) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, int, sympy.core.numbers.Integer, sympy.core.numbers.Integer, int, bool) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, int, sympy.core.numbers.One, sympy.core.numbers.Integer, int, bool) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, int, int, int, int, bool) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, int, sympy.core.numbers.Zero, sympy.core.numbers.One, int, bool) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, sympy.core.numbers.Integer, int, int, int, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 176
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1522,
    "func_name": "select",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int, int) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 64
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2015,
    "func_name": "require_dense",
    "type_comments": [
      "(torch.fx.node.Node, *Union[int, torch._inductor.ir.TensorBox]) -> Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, int, int, bool, torch.fx.immutable_collections.immutable_list], Dict]",
      "(torch.fx.node.Node, *torch._inductor.ir.TensorBox) -> Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox], Dict]"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2333,
    "func_name": "clone",
    "type_comments": [
      "(torch._inductor.ir.Constant, None) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, None) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch.memory_format) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 168
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2389,
    "func_name": "select_scatter",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, int, int) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2401,
    "func_name": "inner_fn",
    "type_comments": [
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 19
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2419,
    "func_name": "slice_scatter",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, int, int, int, int) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 13
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2433,
    "func_name": "inner_fn",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> pyannotate_runtime.collect_types.UnknownType",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.NegativeOne, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 108
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3026,
    "func_name": "index",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 47
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3056,
    "func_name": "_unsafe_index_put",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch._inductor.ir.TensorBox, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 11
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3090,
    "func_name": "_unsafe_index_put_",
    "type_comments": [
      "(torch.fx.immutable_collections.immutable_list, torch._inductor.ir.TensorBox, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 34
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3095,
    "func_name": "index_put_impl_",
    "type_comments": [
      "(torch.fx.immutable_collections.immutable_list, torch._inductor.ir.TensorBox, bool, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 40
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3667,
    "func_name": "should_fallback_max_pool2d_with_indices",
    "type_comments": [
      "(torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list) -> bool",
      "(List[int], List[int]) -> bool"
    ],
    "samples": 46
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3673,
    "func_name": "max_pool2d_checks",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool) -> Tuple[torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool]"
    ],
    "samples": 31
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3702,
    "func_name": "_low_memory_max_pool2d_with_offsets",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]"
    ],
    "samples": 31
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3735,
    "func_name": "fn",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], bool) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], bool) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol], bool) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 61
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3775,
    "func_name": "_low_memory_max_pool2d_offsets_to_indices",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int, int, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 12
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3785,
    "func_name": "increments_to_index",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol) -> torch._inductor.virtualized.OpsValue",
      "(torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue, sympy.core.numbers.Zero, sympy.core.numbers.Zero) -> torch._inductor.virtualized.OpsValue",
      "(torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue, sympy.functions.elementary.miscellaneous.Min, sympy.functions.elementary.miscellaneous.Min) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 32
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3793,
    "func_name": "offsets_to_indices",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.symbol.Symbol, sympy.functions.elementary.miscellaneous.Min]]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 32
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3820,
    "func_name": "max_pool2d_with_indices_backward",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, bool, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 12
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3900,
    "func_name": "fn",
    "type_comments": [
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 30
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5193,
    "func_name": "pow_recursive",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue, int, torch.dtype) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.virtualized.OpsValue, int, torch.dtype) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 724
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5208,
    "func_name": "pow_native",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 3555
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5222,
    "func_name": "pow",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, float) -> torch._inductor.ir.TensorBox",
      "(float, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, float) -> pyannotate_runtime.collect_types.UnknownType",
      "(torch._inductor.ir.TensorBox, int) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 311
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5242,
    "func_name": "fn",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 391
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5328,
    "func_name": "div_mode",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int, str) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, sympy.core.mul.Mul, None) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, float, None) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, int, None) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 38
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5881,
    "func_name": "fn",
    "type_comments": [
      "(*torch.fx.immutable_collections.immutable_list) -> List[torch._inductor.ir.TensorBox]",
      "(*Union[int, torch.fx.immutable_collections.immutable_list]) -> List[torch._inductor.ir.TensorBox]"
    ],
    "samples": 78
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 739,
    "func_name": "NoopHandler.__getattr__",
    "type_comments": [
      "(str) -> function"
    ],
    "samples": 1805
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 743,
    "func_name": "inner",
    "type_comments": [
      "(*Union[torch._inductor.ir.Constant, torch.dtype]) -> None",
      "(*Union[str, sympy.core.add.Add]) -> None",
      "(*Optional[torch.dtype]) -> None",
      "(*torch._inductor.ir.Constant) -> None",
      "(*Union[str, sympy.core.symbol.Symbol]) -> None",
      "(*Union[str, sympy.core.numbers.Zero]) -> None",
      "(*Optional[torch._inductor.ir.Constant]) -> None",
      "(*None) -> None"
    ],
    "samples": 1805
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 986,
    "func_name": "ExtractConstantsHandler.__init__",
    "type_comments": [
      "(torch.device) -> None"
    ],
    "samples": 346
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 989,
    "func_name": "ExtractConstantsHandler.constant",
    "type_comments": [
      "(int, torch.dtype) -> torch._inductor.ir.Constant",
      "(sympy.core.numbers.Integer, torch.dtype) -> torch._inductor.ir.Constant",
      "(float, torch.dtype) -> torch._inductor.ir.Constant"
    ],
    "samples": 885
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/runtime_utils.py",
    "line": 20,
    "func_name": "ceildiv",
    "type_comments": [
      "(int, int) -> int"
    ],
    "samples": 267
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/runtime/triton_heuristics.py",
    "line": 1708,
    "func_name": "foreach",
    "type_comments": [
      "(Dict[str, Union[Dict, Dict[int, str], List[triton.compiler.compiler.AttrsDescriptor], torch._inductor.runtime.hints.DeviceProperties]], int, None, Dict[str, Union[bool, str]]) -> function"
    ],
    "samples": 103
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1101,
    "func_name": "ForeachKernelSchedulerNode.get_producer_subnode_for",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> None",
      "(torch._inductor.scheduler.SchedulerNode) -> torch._inductor.scheduler.FusedSchedulerNode",
      "(torch._inductor.scheduler.SchedulerNode) -> torch._inductor.scheduler.SchedulerNode"
    ],
    "samples": 319
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1116,
    "func_name": "can_fuse",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> bool",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> bool"
    ],
    "samples": 261
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1163,
    "func_name": "fuse",
    "type_comments": [
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.ForeachKernelSchedulerNode) -> torch._inductor.scheduler.ForeachKernelSchedulerNode",
      "(torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.SchedulerNode) -> torch._inductor.scheduler.ForeachKernelSchedulerNode"
    ],
    "samples": 186
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1209,
    "func_name": "ForeachKernelSchedulerNode.__init__",
    "type_comments": [
      "(torch._inductor.scheduler.Scheduler, List[torch._inductor.scheduler.SchedulerNode], None, None) -> None",
      "(torch._inductor.scheduler.Scheduler, List[torch._inductor.scheduler.FusedSchedulerNode], None, None) -> None",
      "(torch._inductor.scheduler.Scheduler, List[torch._inductor.scheduler.FusedSchedulerNode], torch._inductor.scheduler.ForeachKernelSchedulerNode, torch._inductor.scheduler.FusedSchedulerNode) -> None"
    ],
    "samples": 189
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1279,
    "func_name": "ForeachKernelSchedulerNode.is_foreach",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 1076
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1282,
    "func_name": "ForeachKernelSchedulerNode.get_subkernel_nodes",
    "type_comments": [
      "() -> List[torch._inductor.scheduler.FusedSchedulerNode]",
      "() -> List[torch._inductor.scheduler.SchedulerNode]"
    ],
    "samples": 52
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1287,
    "func_name": "ForeachKernelSchedulerNode.get_nodes",
    "type_comments": [
      "() -> List[torch._inductor.scheduler.SchedulerNode]"
    ],
    "samples": 189
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1292,
    "func_name": "ForeachKernelSchedulerNode.get_first_name",
    "type_comments": [
      "() -> str"
    ],
    "samples": 189
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1295,
    "func_name": "ForeachKernelSchedulerNode.prune_redundant_deps",
    "type_comments": [
      "(Dict[str, torch._inductor.scheduler.ForeachKernelSchedulerNode]) -> None"
    ],
    "samples": 105
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 413,
    "func_name": "SizeVarAllocator.evaluate_min",
    "type_comments": [
      "(sympy.core.numbers.One, sympy.core.numbers.Integer) -> sympy.core.numbers.One",
      "(sympy.core.numbers.One, int) -> sympy.core.numbers.One",
      "(sympy.core.numbers.One, sympy.core.numbers.One) -> sympy.core.numbers.One",
      "(sympy.core.numbers.Zero, int) -> sympy.core.numbers.Zero",
      "(sympy.core.numbers.Integer, sympy.core.add.Add) -> sympy.core.add.Add",
      "(sympy.core.numbers.Integer, sympy.core.numbers.One) -> sympy.core.numbers.One",
      "(int, sympy.core.numbers.Integer) -> int",
      "(sympy.core.numbers.One, int) -> int",
      "(sympy.core.numbers.Integer, int) -> int",
      "(int, int) -> int",
      "(int, sympy.core.numbers.One) -> int",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Integer, sympy.core.symbol.Symbol) -> sympy.core.symbol.Symbol",
      "(sympy.core.add.Add, int) -> int",
      "(sympy.core.add.Add, sympy.core.symbol.Symbol) -> sympy.core.add.Add"
    ],
    "samples": 387
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 442,
    "func_name": "SizeVarAllocator.evaluate_max",
    "type_comments": [
      "(sympy.core.numbers.One, int) -> sympy.core.numbers.One",
      "(sympy.core.numbers.Integer, int) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Integer, sympy.core.add.Add) -> sympy.core.numbers.Integer",
      "(sympy.core.add.Add, int) -> sympy.core.add.Add",
      "(sympy.core.numbers.Zero, int) -> int",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer) -> sympy.core.numbers.Integer",
      "(sympy.core.numbers.Integer, sympy.core.numbers.One) -> sympy.core.numbers.Integer"
    ],
    "samples": 275
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 849,
    "func_name": "SimplifyIndexing.check_bounds",
    "type_comments": [
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Integer, bool, bool) -> None",
      "(sympy.core.add.Add, sympy.core.numbers.Integer, bool, bool) -> None",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer, bool, bool) -> None",
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, bool, bool) -> torch.fx.proxy.Proxy",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Integer, bool, bool) -> torch.fx.proxy.Proxy",
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, bool, bool) -> None",
      "(sympy.core.numbers.Zero, sympy.core.numbers.One, bool, bool) -> torch.fx.proxy.Proxy",
      "(sympy.core.add.Add, sympy.core.numbers.Integer, bool, bool) -> torch.fx.proxy.Proxy",
      "(sympy.core.numbers.Zero, sympy.core.numbers.One, bool, bool) -> None",
      "(sympy.core.numbers.Integer, sympy.core.numbers.Integer, bool, bool) -> torch.fx.proxy.Proxy"
    ],
    "samples": 23
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 223,
    "func_name": "ceildiv",
    "type_comments": [
      "(int, int) -> int",
      "(sympy.core.numbers.Integer, int) -> sympy.core.numbers.Integer"
    ],
    "samples": 355
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1450,
    "func_name": "has_free_symbols",
    "type_comments": [
      "(List[sympy.core.numbers.Integer]) -> bool",
      "(List) -> bool",
      "(List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]) -> bool",
      "(List[sympy.core.numbers.One]) -> bool"
    ],
    "samples": 2846
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1454,
    "func_name": "is_dynamic",
    "type_comments": [
      "(*Union[float, torch._inductor.ir.TensorBox]) -> bool",
      "(*torch._inductor.ir.TensorBox) -> bool",
      "(*Union[int, torch._inductor.ir.TensorBox]) -> bool"
    ],
    "samples": 1517
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1617,
    "func_name": "needs_fallback_due_to_atomic_add_limitations",
    "type_comments": [
      "(torch.dtype) -> bool"
    ],
    "samples": 65
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 196,
    "func_name": "OpsValue.__add__",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 47
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 199,
    "func_name": "OpsValue.__mul__",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 40
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 211,
    "func_name": "OpsValue.__floordiv__",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 32
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1255,
    "func_name": "KernelArgs.seed_offset",
    "type_comments": [
      "(str, int) -> str"
    ],
    "samples": 94
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 870,
    "func_name": "rand",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 89
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1054,
    "func_name": "load_seed",
    "type_comments": [
      "(str, int) -> str"
    ],
    "samples": 94
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 407,
    "func_name": "_RecordLoadStoreInner.load_seed",
    "type_comments": [
      "(str, int) -> str"
    ],
    "samples": 246
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4737,
    "func_name": "RandomSeeds.__init__",
    "type_comments": [
      "(int, torch.device) -> None"
    ],
    "samples": 29
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1842,
    "func_name": "_warn_triton_random",
    "type_comments": [
      "(float) -> None"
    ],
    "samples": 29
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1847,
    "func_name": "warn_triton_random",
    "type_comments": [
      "() -> None"
    ],
    "samples": 29
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1890,
    "func_name": "inductor_seeds",
    "type_comments": [
      "(int, torch.device) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 29
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1896,
    "func_name": "inductor_lookup_seed",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 93
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1898,
    "func_name": "inner_fn",
    "type_comments": [
      "(Tuple[]) -> torch._inductor.virtualized.OpsValue",
      "(List) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 274
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1909,
    "func_name": "inductor_random",
    "type_comments": [
      "(torch.fx.immutable_collections.immutable_list, torch._inductor.ir.TensorBox, str, int) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 90
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1921,
    "func_name": "inner_fn",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 228
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 4109,
    "func_name": "_adaptive_avg_pool2d",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 793,
    "func_name": "WrapperCodeGen.generate_scatter_fallback",
    "type_comments": [
      "(str, List[Union[int, str]], str, str, bool, None, List[str]) -> None",
      "(str, List[Union[int, str]], str, str, bool, str, List[str]) -> None"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3080,
    "func_name": "NoneLayout.__init__",
    "type_comments": [
      "(torch.device) -> None"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4897,
    "func_name": "mark_node_as_mutating",
    "type_comments": [
      "(torch._inductor.ir.ScatterFallback, *torch._inductor.ir.TensorBox) -> None"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4913,
    "func_name": "MutationOutput.get_mutation_names",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 11
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4916,
    "func_name": "MutationOutput.__init__",
    "type_comments": [
      "(torch._inductor.ir.FlexibleLayout, torch._inductor.ir.TensorBox, torch._inductor.ir.ScatterFallback) -> None"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4922,
    "func_name": "MutationOutput.should_allocate",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4925,
    "func_name": "MutationOutput.is_no_op",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4931,
    "func_name": "MutationOutput.get_inputs_that_alias_output",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 13
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5105,
    "func_name": "ScatterFallback.codegen",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.WrapperCodeGen) -> None"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5128,
    "func_name": "ScatterFallback.should_allocate",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 9
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5131,
    "func_name": "ScatterFallback.get_mutation_names",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 11
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5134,
    "func_name": "ScatterFallback.get_unbacked_symbol_defs",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 9
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5137,
    "func_name": "ScatterFallback.__init__",
    "type_comments": [
      "(torch._ops.OpOverload, torch._inductor.ir.TensorBox, int, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, bool) -> None",
      "(torch._ops.OpOverload, torch._inductor.ir.TensorBox, int, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, str, bool) -> None"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2817,
    "func_name": "gather",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int, torch._inductor.ir.TensorBox, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2838,
    "func_name": "fn",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.add.Add, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, sympy.core.add.Add, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 16
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3246,
    "func_name": "scatter_fallback",
    "type_comments": [
      "(torch._ops.OpOverload, torch._inductor.ir.TensorBox, int, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, str, bool) -> None",
      "(torch._ops.OpOverload, torch._inductor.ir.TensorBox, int, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, str, bool) -> torch._inductor.ir.TensorBox",
      "(torch._ops.OpOverload, torch._inductor.ir.TensorBox, int, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 29
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3297,
    "func_name": "scatter_add",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 24
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3302,
    "func_name": "scatter_add_",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 24
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3307,
    "func_name": "scatter_reduce",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, str) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3312,
    "func_name": "scatter_reduce_",
    "type_comments": [
      "(int, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, str, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 28
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3358,
    "func_name": "output_indexer",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]"
    ],
    "samples": 36
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3368,
    "func_name": "fn",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 44
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3375,
    "func_name": "backend_reduce_str",
    "type_comments": [
      "(str) -> str"
    ],
    "samples": 24
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1093,
    "func_name": "ForeachKernelSchedulerNode.get_consumer_subnode_for",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> None"
    ],
    "samples": 53
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1622,
    "func_name": "use_scatter_fallback",
    "type_comments": [
      "(torch._ops.OpOverload, str, torch.dtype, torch.dtype, str, bool) -> bool",
      "(torch._ops.OpOverload, None, torch.dtype, torch.dtype, str, bool) -> bool"
    ],
    "samples": 29
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 59,
    "func_name": "fake_tensors_eq",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, Tuple[str, str, str]) -> bool",
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, Tuple[str, str]) -> bool"
    ],
    "samples": 35
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/joint_graph.py",
    "line": 67,
    "func_name": "replace_no_op",
    "type_comments": [
      "(torch.fx.node.Node, int) -> None"
    ],
    "samples": 33
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 902,
    "func_name": "repeat",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 14
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 938,
    "func_name": "is_valid_addmm_fusion",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 9
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 956,
    "func_name": "addmm",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node) -> None"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 975,
    "func_name": "repl",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1950,
    "func_name": "sort",
    "type_comments": [
      "(Tuple[torch.dtype, torch.dtype], Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable], bool, bool) -> Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable]"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 880,
    "func_name": "randint64",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2250,
    "func_name": "TritonKernel.sort",
    "type_comments": [
      "(Tuple[torch.dtype, torch.dtype], Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable], bool, bool) -> Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable]"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2275,
    "func_name": "csv",
    "type_comments": [
      "(List[torch._inductor.codegen.triton.TritonCSEVariable]) -> str"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2278,
    "func_name": "cse_multiple",
    "type_comments": [
      "(str, int, List[str]) -> Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable]"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 518,
    "func_name": "randint",
    "type_comments": [
      "(int, List[Union[int, torch.SymInt]]) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 3
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/replace_random.py",
    "line": 126,
    "func_name": "replace_randint",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, int, int, torch.fx.immutable_collections.immutable_list, torch.dtype, torch.device, None, bool) -> None"
    ],
    "samples": 3
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/replace_random.py",
    "line": 138,
    "func_name": "replacement",
    "type_comments": [
      "(int, int, torch.fx.immutable_collections.immutable_list) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 3
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1806,
    "func_name": "Sort.get_unbacked_symbol_uses",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1813,
    "func_name": "Sort.__post_init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1817,
    "func_name": "Sort.store_reduction",
    "type_comments": [
      "(str, function, Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1823,
    "func_name": "Sort.get_reduction_type",
    "type_comments": [
      "() -> str"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1826,
    "func_name": "Sort.get_reduction_size",
    "type_comments": [
      "() -> List[int]"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1829,
    "func_name": "Sort.get_size",
    "type_comments": [
      "() -> List[Union[int, torch.utils._sympy.functions.FloorDiv]]"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1832,
    "func_name": "Sort.get_pointwise_size",
    "type_comments": [
      "() -> List[Union[int, torch.utils._sympy.functions.FloorDiv]]"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1844,
    "func_name": "Sort.inner_fn_free_unbacked_symbols",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1850,
    "func_name": "create",
    "type_comments": [
      "(torch.device, Tuple[torch.dtype, torch.dtype], Tuple[function, function], List[sympy.core.numbers.Integer], int, bool, bool, torch._inductor.runtime.hints.ReductionHint) -> List",
      "(torch.device, Tuple[torch.dtype, torch.dtype], Tuple[function, function], List[Union[int, torch.utils._sympy.functions.FloorDiv]], int, bool, bool, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1897,
    "func_name": "reindex",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6663,
    "func_name": "CaptureIndexing.sort",
    "type_comments": [
      "(Tuple[torch.dtype, torch.dtype], Tuple[torch.fx.proxy.Proxy, torch.fx.proxy.Proxy], bool, bool) -> Tuple[torch.fx.proxy.Proxy, torch.fx.proxy.Proxy]"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1937,
    "func_name": "inductor_randint",
    "type_comments": [
      "(int, int, torch.fx.immutable_collections.immutable_list, torch._inductor.ir.TensorBox, int) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 3
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1950,
    "func_name": "inner_fn",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5651,
    "func_name": "sort_stable",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, bool, int, bool) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5687,
    "func_name": "sort",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int, bool) -> Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox]"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 801,
    "func_name": "sort",
    "type_comments": [
      "(Tuple[torch.dtype, torch.dtype], Tuple[str, str], bool, bool) -> Tuple[str, str]"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1598,
    "func_name": "is_start_of_fx_graph",
    "type_comments": [
      "(torch.fx.graph.Graph, torch.fx.node.Node) -> bool"
    ],
    "samples": 86
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3594,
    "func_name": "range_mask_low",
    "type_comments": [
      "(sympy.core.mul.Mul, int) -> torch._inductor.virtualized.OpsValue",
      "(sympy.core.add.Add, int) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 48
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3601,
    "func_name": "range_mask_high",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing, sympy.core.numbers.Integer) -> torch._inductor.virtualized.OpsValue",
      "(sympy.core.mul.Mul, sympy.core.numbers.Integer) -> torch._inductor.virtualized.OpsValue",
      "(sympy.core.symbol.Symbol, sympy.core.numbers.Integer) -> torch._inductor.virtualized.OpsValue",
      "(sympy.core.add.Add, sympy.core.numbers.Integer) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 123
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3608,
    "func_name": "range_mask",
    "type_comments": [
      "(sympy.core.mul.Mul, sympy.core.numbers.Integer, int) -> torch._inductor.virtualized.OpsValue",
      "(sympy.core.add.Add, sympy.core.numbers.Integer, int) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 43
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3615,
    "func_name": "constant_boundary_condition",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, float, None, float, int) -> function"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3622,
    "func_name": "load",
    "type_comments": [
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.mul.Mul, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.mul.Mul, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 34
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 482,
    "func_name": "_reduce_tensor",
    "type_comments": [
      "(Dict[torch.device, torch.device], torch.Tensor) -> Tuple[function, Tuple[torch._inductor.codecache.TensorMetadataAndValues]]",
      "(Dict, torch.Tensor) -> Tuple[function, Tuple[torch._inductor.codecache.TensorMetadataAndValues]]"
    ],
    "samples": 21
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/halide.py",
    "line": 80,
    "func_name": "Unsupported",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 529,
    "func_name": "WrapperCodeGen.write_constant",
    "type_comments": [
      "(str, str) -> None"
    ],
    "samples": 119
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 736,
    "func_name": "pad_bmm",
    "type_comments": [
      "(torch.Tensor, torch.Tensor, int, int, int, bool, bool) -> torch.Tensor"
    ],
    "samples": 1078
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 165,
    "func_name": "getattr_recursive",
    "type_comments": [
      "(torch.fx.GraphModule, str) -> torch.Tensor",
      "(torch.fx.GraphModule, str) -> torch.nn.parameter.Parameter"
    ],
    "samples": 125
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 791,
    "func_name": "GraphLowering.allocate_non_dup_const_name",
    "type_comments": [
      "(str, torch.nn.parameter.Parameter) -> str",
      "(str, torch.Tensor) -> str"
    ],
    "samples": 119
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 829,
    "func_name": "GraphLowering.add_tensor_constant",
    "type_comments": [
      "(torch.nn.parameter.Parameter, str) -> torch._inductor.ir.TensorBox",
      "(torch.Tensor, str) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 119
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 838,
    "func_name": "GraphLowering.constant_name",
    "type_comments": [
      "(str, torch.device) -> str",
      "(str, None) -> str"
    ],
    "samples": 181
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 972,
    "func_name": "can_inline_constant",
    "type_comments": [
      "(torch.Tensor) -> bool",
      "(torch.nn.parameter.Parameter) -> bool"
    ],
    "samples": 119
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 979,
    "func_name": "GraphLowering.get_attr",
    "type_comments": [
      "(str, Tuple[], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.Constant",
      "(str, Tuple[], torch.fx.immutable_collections.immutable_dict) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 125
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3322,
    "func_name": "ConstantBuffer.make_loader",
    "type_comments": [
      "() -> function"
    ],
    "samples": 125
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3323,
    "func_name": "loader",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 181
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/kernel/bmm.py",
    "line": 107,
    "func_name": "tuned_bmm",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 92
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 542,
    "func_name": "make_combined",
    "type_comments": [
      "(sympy.core.numbers.Integer, int, int) -> function"
    ],
    "samples": 259
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 543,
    "func_name": "getter",
    "type_comments": [
      "(List[sympy.core.symbol.Symbol]) -> sympy.core.add.Add"
    ],
    "samples": 198
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 911,
    "func_name": "SIMDKernel.welford_reduce_fallback",
    "type_comments": [
      "(torch.dtype, torch._inductor.codegen.triton.TritonCSEVariable) -> Tuple[torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable]"
    ],
    "samples": 69
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/simd.py",
    "line": 1760,
    "func_name": "is_good_size",
    "type_comments": [
      "(sympy.core.mul.Mul) -> bool",
      "(sympy.core.numbers.Integer) -> bool"
    ],
    "samples": 97
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 762,
    "func_name": "erf",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 34
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 846,
    "func_name": "bitwise_and",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 390,
    "func_name": "bernoulli",
    "type_comments": [
      "(None) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 470,
    "func_name": "full_like",
    "type_comments": [
      "(float, None, None, None, bool, bool, torch.memory_format) -> torch._subclasses.fake_tensor.FakeTensor",
      "(float, torch.dtype, None, torch.device, bool, bool, torch.memory_format) -> torch._subclasses.fake_tensor.FakeTensor",
      "(int, None, None, None, bool, bool, torch.memory_format) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 21
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/dependencies.py",
    "line": 154,
    "func_name": "MemoryDep.stride1_for_last_dim",
    "type_comments": [
      "(bool) -> bool"
    ],
    "samples": 92
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/fuse_attention.py",
    "line": 584,
    "func_name": "fn",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2487,
    "func_name": "ReinterpretView.make_indexer",
    "type_comments": [
      "() -> function"
    ],
    "samples": 22
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2855,
    "func_name": "embedding",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, int, bool, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 48
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2868,
    "func_name": "fn",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 117
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5612,
    "func_name": "reduce_max",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, None, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1006,
    "func_name": "fn",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 14
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3585,
    "func_name": "CppScheduling.__init__",
    "type_comments": [
      "(None) -> None",
      "(torch._inductor.scheduler.Scheduler) -> None"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3592,
    "func_name": "CppScheduling._set_flush_status",
    "type_comments": [
      "(bool) -> None"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3598,
    "func_name": "CppScheduling.reset_kernel_group",
    "type_comments": [
      "() -> None"
    ],
    "samples": 12
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4081,
    "func_name": "CppScheduling.ready_to_flush",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4113,
    "func_name": "CppScheduling.flush",
    "type_comments": [
      "() -> None"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4125,
    "func_name": "KernelGroup.__init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 12
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4151,
    "func_name": "KernelGroup.codegen_group",
    "type_comments": [
      "(None) -> str"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4204,
    "func_name": "WorkSharing.__init__",
    "type_comments": [
      "(torch._inductor.codegen.common.BracesBuffer) -> None"
    ],
    "samples": 12
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4235,
    "func_name": "WorkSharing.__enter__",
    "type_comments": [
      "() -> torch._inductor.codegen.cpp.WorkSharing"
    ],
    "samples": 12
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4239,
    "func_name": "WorkSharing.__exit__",
    "type_comments": [
      "(None, None, None) -> None"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1087,
    "func_name": "WrapperCodeGen.codegen_dynamic_scalar",
    "type_comments": [
      "(torch._inductor.ir.DynamicScalar) -> None"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 977,
    "func_name": "align_inputs_from_check_idxs",
    "type_comments": [
      "(function, List) -> function",
      "(function, List[int]) -> function"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/exc.py",
    "line": 23,
    "func_name": "operator_str",
    "type_comments": [
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, sympy.core.symbol.Symbol], Dict) -> str"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 916,
    "func_name": "get_custom_op_layout_constraints",
    "type_comments": [
      "(torch._ops.OpOverload, Tuple[torch._inductor.ir.TensorBox, sympy.core.symbol.Symbol], torch.fx.immutable_collections.immutable_dict) -> Tuple[function, Tuple[torch._inductor.ir.TensorBox, sympy.core.symbol.Symbol], Dict]"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2694,
    "func_name": "Layout.__str__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5264,
    "func_name": "DynamicScalar.should_allocate",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5267,
    "func_name": "DynamicScalar.__init__",
    "type_comments": [
      "(sympy.core.symbol.Symbol, Tuple[], torch._inductor.ir.TensorBox) -> None"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5273,
    "func_name": "DynamicScalar.get_unbacked_symbol_defs",
    "type_comments": [
      "() -> Set[sympy.core.symbol.Symbol]"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5276,
    "func_name": "DynamicScalar.codegen",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.WrapperCodeGen) -> None"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5965,
    "func_name": "MutableBox.__str__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 94,
    "func_name": "add_needs_realized_inputs",
    "type_comments": [
      "(torch._ops.OpOverload) -> None"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 104,
    "func_name": "add_layout_constraint",
    "type_comments": [
      "(torch._ops.OpOverload, function) -> None"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 194,
    "func_name": "get_overloads",
    "type_comments": [
      "(torch._ops.OpOverload) -> List[torch._ops.OpOverload]"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 280,
    "func_name": "_register_lowering",
    "type_comments": [
      "(torch._ops.OpOverload, function, bool, None, bool) -> function"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 331,
    "func_name": "register_lowering",
    "type_comments": [
      "(torch._ops.OpOverload, bool, None, bool) -> functools.partial"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1625,
    "func_name": "fallback_handler",
    "type_comments": [
      "(torch._ops.OpOverload, bool) -> function"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1704,
    "func_name": "make_fallback",
    "type_comments": [
      "(torch._ops.OpOverload, function, bool) -> None"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1733,
    "func_name": "register_fallback",
    "type_comments": [
      "(torch._ops.OpOverload) -> function"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2566,
    "func_name": "_local_scalar_dense",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> sympy.core.symbol.Symbol"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 474,
    "func_name": "is_small_channel",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 56
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/fuse_attention.py",
    "line": 204,
    "func_name": "_sfdp_replacement_8",
    "type_comments": [
      "(torch._subclasses.functional_tensor.FunctionalTensor, torch._subclasses.functional_tensor.FunctionalTensor, torch._subclasses.functional_tensor.FunctionalTensor) -> torch._subclasses.functional_tensor.FunctionalTensor"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/fuse_attention.py",
    "line": 551,
    "func_name": "_sfdp_params_check",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2057,
    "func_name": "sdpa_constraint",
    "type_comments": [
      "(torch.fx.node.Node, *Union[float, torch._inductor.ir.TensorBox]) -> Tuple[Tuple[torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, float, bool], Dict[str, float]]",
      "(torch.fx.node.Node, *Union[float, torch._inductor.ir.TensorBox]) -> Tuple[Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, float], Dict[str, float]]",
      "(torch.fx.node.Node, *Union[float, torch._inductor.ir.TensorBox]) -> Tuple[Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, float, bool], Dict[str, float]]",
      "(torch.fx.node.Node, *Union[float, torch._inductor.ir.TensorBox]) -> Tuple[Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView, float], Dict[str, float]]",
      "(torch.fx.node.Node, *torch._inductor.ir.TensorBox) -> Tuple[Tuple[torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView, torch._inductor.ir.ReinterpretView], Dict[str, float]]",
      "(torch.fx.node.Node, *torch._inductor.ir.TensorBox) -> Tuple[Tuple[torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox, torch._inductor.ir.StorageBox], Dict[str, float]]"
    ],
    "samples": 24
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2060,
    "func_name": "apply_constraint",
    "type_comments": [
      "(float, float) -> float",
      "(None, None) -> None",
      "(torch._inductor.ir.TensorBox, torch.fx.node.Node) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch.fx.node.Node) -> torch._inductor.ir.StorageBox",
      "(bool, bool) -> bool",
      "(torch._inductor.ir.TensorBox, torch.fx.node.Node) -> torch._inductor.ir.ReinterpretView"
    ],
    "samples": 52
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2083,
    "func_name": "is_aligned_realized_tensor",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> bool"
    ],
    "samples": 31
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1172,
    "func_name": "ReplacementPatternEntry.apply",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, torch.fx.graph.Graph, torch.fx.node.Node) -> None"
    ],
    "samples": 46
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1326,
    "func_name": "normalize_args",
    "type_comments": [
      "() -> List[torch.fx.node.Node]",
      "() -> List[Union[int, torch.fx.node.Node]]",
      "() -> List[Union[float, torch.fx.node.Node]]"
    ],
    "samples": 46
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1822,
    "func_name": "joint_fwd_bwd",
    "type_comments": [
      "(function, List[Union[float, torch._subclasses.fake_tensor.FakeTensor]]) -> torch.fx.GraphModule",
      "(function, List[torch._subclasses.fake_tensor.FakeTensor]) -> torch.fx.GraphModule"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1827,
    "func_name": "record_joint_graph",
    "type_comments": [
      "(torch.fx.GraphModule, Tuple[List[Union[float, torch._subclasses.fake_tensor.FakeTensor]], List[torch._subclasses.fake_tensor.FakeTensor]]) -> Tuple[torch.fx.GraphModule, torch.fx.GraphModule]",
      "(torch.fx.GraphModule, Tuple[List[torch._subclasses.fake_tensor.FakeTensor], List[torch._subclasses.fake_tensor.FakeTensor]]) -> Tuple[torch.fx.GraphModule, torch.fx.GraphModule]"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1941,
    "func_name": "clone_graph",
    "type_comments": [
      "(torch.fx.GraphModule) -> torch.fx.GraphModule"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1942,
    "func_name": "CopyGraph",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 1943,
    "func_name": "CopyGraph.run_node",
    "type_comments": [
      "(torch.fx.node.Node) -> torch.fx.proxy.Proxy"
    ],
    "samples": 36
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 958,
    "func_name": "FusedSchedulerNode.get_first_name",
    "type_comments": [
      "() -> str"
    ],
    "samples": 46
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 712,
    "func_name": "mm_replace",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 11
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3544,
    "func_name": "constant_pad_nd",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, int) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, float) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 25
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3568,
    "func_name": "mask",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing]]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.add.Add, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(List[torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 80
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3578,
    "func_name": "offset_fn",
    "type_comments": [
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, torch.utils._sympy.functions.ModularIndexing, torch.utils._sympy.functions.ModularIndexing]) -> torch._inductor.virtualized.OpsValue",
      "(List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, torch.utils._sympy.functions.Identity]]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 80
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 612,
    "func_name": "SizeVarAllocator.lookup_precomputed_size",
    "type_comments": [
      "(sympy.core.add.Add) -> sympy.core.symbol.Symbol",
      "(int) -> int"
    ],
    "samples": 43
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/fuse_attention.py",
    "line": 172,
    "func_name": "_sfdp_replacement_7",
    "type_comments": [
      "(torch._subclasses.functional_tensor.FunctionalTensor, torch._subclasses.functional_tensor.FunctionalTensor, torch._subclasses.functional_tensor.FunctionalTensor, float) -> torch._subclasses.functional_tensor.FunctionalTensor"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pad_mm.py",
    "line": 191,
    "func_name": "addmm_replace",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, int, int) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 3
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/async_compile.py",
    "line": 125,
    "func_name": "pool",
    "type_comments": [
      "() -> concurrent.futures.thread.ThreadPoolExecutor"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/async_compile.py",
    "line": 164,
    "func_name": "submit",
    "type_comments": [
      "(functools.partial) -> concurrent.futures._base.Future"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/async_compile.py",
    "line": 207,
    "func_name": "AsyncCompile.cpp_pybinding",
    "type_comments": [
      "(List[str], str) -> torch._inductor.codecache.LambdaFuture"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 353,
    "func_name": "get_lock_dir",
    "type_comments": [
      "() -> str"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 1994,
    "func_name": "cpp_prefix_path",
    "type_comments": [
      "() -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 2007,
    "func_name": "cpp_prefix",
    "type_comments": [
      "() -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 2117,
    "func_name": "_load_library",
    "type_comments": [
      "(str, str) -> module"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 2140,
    "func_name": "load_async",
    "type_comments": [
      "(str, bool, method, Tuple[]) -> function"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 2197,
    "func_name": "load_fn",
    "type_comments": [
      "() -> module"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 2222,
    "func_name": "_worker_compile_cpp",
    "type_comments": [
      "(str, torch._inductor.cpp_builder.CppBuilder, str, str) -> None"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 2340,
    "func_name": "_load_library_inner",
    "type_comments": [
      "(str, str) -> module"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 2357,
    "func_name": "load_pybinding_async",
    "type_comments": [
      "(List[str], str, bool, int, method, Tuple[]) -> function"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 2398,
    "func_name": "future",
    "type_comments": [
      "() -> builtin_function_or_method"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 3473,
    "func_name": "LambdaFuture.__init__",
    "type_comments": [
      "(function) -> None"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codecache.py",
    "line": 3476,
    "func_name": "LambdaFuture.result",
    "type_comments": [
      "() -> builtin_function_or_method"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 270,
    "func_name": "boolean_ops",
    "type_comments": [
      "() -> Tuple[str, str, str, str, str, str, str, str, str, str]"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 309,
    "func_name": "DataTypePropagation.__init__",
    "type_comments": [
      "(torch._inductor.ir.LoopBody) -> None"
    ],
    "samples": 9
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 317,
    "func_name": "DataTypePropagation.deduce_node_dtype_by_inputs",
    "type_comments": [
      "(torch.fx.node.Node) -> torch.dtype"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 344,
    "func_name": "DataTypePropagation.deduce_node_dtype",
    "type_comments": [
      "(torch.fx.node.Node) -> None",
      "(torch.fx.node.Node) -> torch.dtype"
    ],
    "samples": 12
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 399,
    "func_name": "DataTypePropagation.propagate_graph",
    "type_comments": [
      "(torch.fx.graph.Graph) -> torch.dtype"
    ],
    "samples": 9
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 417,
    "func_name": "DataTypePropagation.propagate",
    "type_comments": [
      "() -> None"
    ],
    "samples": 9
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 420,
    "func_name": "propagate_loopbody",
    "type_comments": [
      "(torch._inductor.ir.LoopBody) -> None"
    ],
    "samples": 9
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 424,
    "func_name": "propagate_scheduler_node",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> None"
    ],
    "samples": 9
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1153,
    "func_name": "BracesBuffer.indent",
    "type_comments": [
      "(int) -> contextlib._GeneratorContextManager"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1154,
    "func_name": "ctx",
    "type_comments": [
      "() -> Iterator"
    ],
    "samples": 11
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1276,
    "func_name": "KernelArgs.wrap_ptr_arg",
    "type_comments": [
      "(str, torch.dtype) -> str"
    ],
    "samples": 14
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1282,
    "func_name": "KernelArgs.cpp_argdefs",
    "type_comments": [
      "() -> Tuple[List[str], List[str], List[str]]"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 221,
    "func_name": "stride_at",
    "type_comments": [
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol) -> sympy.core.numbers.One"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 228,
    "func_name": "simplify_index_in_vec_range",
    "type_comments": [
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, int) -> sympy.core.symbol.Symbol"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 291,
    "func_name": "stride_at_vec_range",
    "type_comments": [
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, int) -> sympy.core.numbers.One"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 467,
    "func_name": "RecordOptimizationContext.__init__",
    "type_comments": [
      "(str) -> None"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 472,
    "func_name": "RecordOptimizationContext.__enter__",
    "type_comments": [
      "() -> torch._inductor.codegen.cpp.RecordOptimizationContext"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 486,
    "func_name": "RecordOptimizationContext.__exit__",
    "type_comments": [
      "(None, None, None) -> None"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 491,
    "func_name": "RecordOptimizationContext.get_opt_ctx",
    "type_comments": [
      "() -> torch._inductor.codegen.common.OptimizationContext"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 499,
    "func_name": "get_opt_ctx",
    "type_comments": [
      "(torch.fx.node.Node) -> torch._inductor.codegen.common.OptimizationContext"
    ],
    "samples": 12
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 503,
    "func_name": "get_current_node_opt_ctx",
    "type_comments": [
      "() -> torch._inductor.codegen.common.OptimizationContext"
    ],
    "samples": 12
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 509,
    "func_name": "CppCSEVariable.__init__",
    "type_comments": [
      "(str, torch.utils._sympy.value_ranges.ValueRanges) -> None"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 521,
    "func_name": "CppCSEVariable.update_on_args",
    "type_comments": [
      "(str, Tuple[int, torch.dtype], Dict) -> None",
      "(str, Tuple[torch._inductor.codegen.cpp.CppCSEVariable, torch._inductor.codegen.cpp.CppCSEVariable], Dict) -> None",
      "(str, Tuple[str, sympy.core.symbol.Symbol], Dict) -> None"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 555,
    "func_name": "CppCSEVariable._set_dependent_itervars",
    "type_comments": [
      "(sympy.core.symbol.Symbol) -> None"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 993,
    "func_name": "__new__",
    "type_comments": [
      "(*torch._inductor.ops_handler.MockHandler) -> torch._inductor.codegen.cpp.CppVecOverrides"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 996,
    "func_name": "wrap",
    "type_comments": [
      "(function) -> function"
    ],
    "samples": 22
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 1575,
    "func_name": "CppKernel.__init__",
    "type_comments": [
      "(torch._inductor.codegen.common.KernelArgs, int) -> None",
      "(torch._inductor.codegen.common.KernelArgs, None) -> None"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 1695,
    "func_name": "CppKernel.index_indirect_depends_on",
    "type_comments": [
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol) -> bool"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 1746,
    "func_name": "CppKernel.load",
    "type_comments": [
      "(str, sympy.core.symbol.Symbol) -> torch._inductor.codegen.cpp.CppCSEVariable"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 1756,
    "func_name": "CppKernel.store",
    "type_comments": [
      "(str, sympy.core.symbol.Symbol, torch._inductor.codegen.cpp.CppCSEVariable, None) -> None",
      "(str, sympy.core.numbers.Zero, torch._inductor.codegen.cpp.CppCSEVariable, None) -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 1846,
    "func_name": "CppKernel.set_ranges",
    "type_comments": [
      "(Tuple[sympy.core.numbers.Integer], Tuple[]) -> Tuple[List[sympy.core.symbol.Symbol], List]",
      "(Tuple[], Tuple[]) -> Tuple[List, List]"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 1865,
    "func_name": "CppKernel.size_hint",
    "type_comments": [
      "() -> int"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 1870,
    "func_name": "CppKernel.codegen_loops_impl",
    "type_comments": [
      "(torch._inductor.codegen.cpp.LoopNestWithSplit, torch._inductor.codegen.common.BracesBuffer, torch._inductor.codegen.cpp.WorkSharing) -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 1900,
    "func_name": "gen_loop_kernel",
    "type_comments": [
      "(torch._inductor.codegen.cpp.LoopLevel) -> None"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 1901,
    "func_name": "is_parallel_reduction",
    "type_comments": [
      "(torch._inductor.codegen.cpp.LoopLevel) -> bool"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 1913,
    "func_name": "gen_kernel",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppKernel) -> None",
      "(torch._inductor.codegen.cpp.CppVecKernel) -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 1960,
    "func_name": "gen_loops",
    "type_comments": [
      "(Tuple[torch._inductor.codegen.cpp.LoopLevel, torch._inductor.codegen.cpp.LoopLevel], bool) -> None"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 1992,
    "func_name": "gen_loop",
    "type_comments": [
      "(torch._inductor.codegen.cpp.LoopLevel) -> None"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2048,
    "func_name": "CppKernel.decide_parallel_depth",
    "type_comments": [
      "(int, int) -> int"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2084,
    "func_name": "CppKernel.create_cse_var",
    "type_comments": [
      "(*Union[str, torch.utils._sympy.value_ranges.ValueRanges]) -> torch._inductor.codegen.cpp.CppCSEVariable"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2098,
    "func_name": "CppVecKernel.__init__",
    "type_comments": [
      "(torch._inductor.codegen.common.KernelArgs, int, int, int, torch.dtype) -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2114,
    "func_name": "CppVecKernel._try_get_const_stride",
    "type_comments": [
      "(sympy.core.symbol.Symbol, sympy.core.symbol.Symbol) -> sympy.core.numbers.One"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2128,
    "func_name": "CppVecKernel._get_num_vectors",
    "type_comments": [
      "(torch.dtype) -> int"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2135,
    "func_name": "CppVecKernel._get_vec_type",
    "type_comments": [
      "(torch.dtype) -> str"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2156,
    "func_name": "CppVecKernel._get_vec_load_line",
    "type_comments": [
      "(str, sympy.core.symbol.Symbol, torch.dtype, None) -> str"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2323,
    "func_name": "CppVecKernel.load",
    "type_comments": [
      "(str, sympy.core.symbol.Symbol) -> torch._inductor.codegen.cpp.CppCSEVariable"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2344,
    "func_name": "CppVecKernel._get_store_line",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppCSEVariable, str, sympy.core.symbol.Symbol, torch.dtype) -> torch._inductor.utils.IndentedBuffer"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2378,
    "func_name": "CppVecKernel.store",
    "type_comments": [
      "(str, sympy.core.symbol.Symbol, torch._inductor.codegen.cpp.CppCSEVariable, None) -> None"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2815,
    "func_name": "CppVecKernelChecker.__init__",
    "type_comments": [
      "(torch._inductor.codegen.common.KernelArgs, int, int, int) -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2851,
    "func_name": "CppVecKernelChecker.load",
    "type_comments": [
      "(str, sympy.core.symbol.Symbol) -> torch._inductor.codegen.cpp.CppCSEVariable"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2873,
    "func_name": "CppVecKernelChecker.store",
    "type_comments": [
      "(str, sympy.core.numbers.Zero, bool, None) -> bool",
      "(str, sympy.core.symbol.Symbol, torch._inductor.codegen.cpp.CppCSEVariable, None) -> bool"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2919,
    "func_name": "CppVecKernelChecker.__exit__",
    "type_comments": [
      "(None, None, None) -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2924,
    "func_name": "CppVecKernelChecker.__enter__",
    "type_comments": [
      "() -> torch._inductor.codegen.cpp.CppVecKernelChecker"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2936,
    "func_name": "VecCheckerProxy",
    "type_comments": [
      "() -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2948,
    "func_name": "load",
    "type_comments": [
      "(str, sympy.core.symbol.Symbol) -> torch._inductor.codegen.cpp.CppCSEVariable"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2952,
    "func_name": "store",
    "type_comments": [
      "(str, sympy.core.numbers.Zero, bool, None) -> bool",
      "(str, sympy.core.symbol.Symbol, torch._inductor.codegen.cpp.CppCSEVariable, None) -> bool"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3082,
    "func_name": "CppKernelProxy.__init__",
    "type_comments": [
      "(torch._inductor.codegen.cpp.KernelGroup) -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3089,
    "func_name": "CppKernelProxy.data_type_propagation",
    "type_comments": [
      "(List[torch._inductor.scheduler.SchedulerNode]) -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3095,
    "func_name": "CppKernelProxy.is_lowp_fp_scheduler",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> bool"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3286,
    "func_name": "CppKernelProxy.legalize_lowp_fp_dtype",
    "type_comments": [
      "(List[torch._inductor.scheduler.SchedulerNode]) -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3314,
    "func_name": "is_memory_copy_scheduler_node",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> bool"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3325,
    "func_name": "CppKernelProxy.codegen_functions",
    "type_comments": [
      "(List[functools.partial], List[Tuple[Tuple[sympy.core.numbers.Integer], Tuple[]]], torch.dtype) -> None",
      "(List[functools.partial], List[Tuple[Tuple[], Tuple[]]], torch.dtype) -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3333,
    "func_name": "codegen_kernel",
    "type_comments": [
      "(*Union[int, torch.dtype]) -> torch._inductor.codegen.cpp.CppVecKernel",
      "() -> torch._inductor.codegen.cpp.CppKernel"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3342,
    "func_name": "run",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppKernel) -> None",
      "(torch._inductor.codegen.cpp.CppVecKernelChecker) -> None",
      "(torch._inductor.codegen.cpp.CppVecKernel) -> None"
    ],
    "samples": 9
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3370,
    "func_name": "select_tiling_indices",
    "type_comments": [
      "(int) -> List[int]"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3413,
    "func_name": "select_tiling",
    "type_comments": [
      "(torch.dtype) -> Tuple[List, List]",
      "(torch.dtype) -> Tuple[List[int], List[int]]"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3493,
    "func_name": "CppKernelProxy.codegen_nodes",
    "type_comments": [
      "(List[torch._inductor.scheduler.SchedulerNode]) -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3510,
    "func_name": "fn",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode, *Tuple[]) -> str",
      "(torch._inductor.scheduler.SchedulerNode, *List) -> None",
      "(torch._inductor.scheduler.SchedulerNode, *Union[List, List[sympy.core.symbol.Symbol]]) -> None",
      "(torch._inductor.scheduler.SchedulerNode, *Union[Tuple[], Tuple[sympy.core.symbol.Symbol]]) -> str"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3534,
    "func_name": "CppKernelProxy.codegen_loops",
    "type_comments": [
      "(torch._inductor.codegen.common.BracesBuffer, torch._inductor.codegen.cpp.WorkSharing) -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3581,
    "func_name": "get_backend_features",
    "type_comments": [
      "(torch.device) -> Dict[torch._inductor.codegen.common.BackendFeature, None]"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3595,
    "func_name": "CppScheduling.group_fn",
    "type_comments": [
      "(Tuple[List, List]) -> Tuple[Tuple[], Tuple[]]",
      "(Tuple[List[sympy.core.numbers.Integer], List]) -> Tuple[Tuple[sympy.core.numbers.Integer], Tuple[]]"
    ],
    "samples": 9
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4019,
    "func_name": "CppScheduling.codegen_node",
    "type_comments": [
      "(torch._inductor.scheduler.SchedulerNode) -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4078,
    "func_name": "CppScheduling._get_scheduled_num_args",
    "type_comments": [
      "() -> int"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4087,
    "func_name": "CppScheduling.define_kernel",
    "type_comments": [
      "(str, List[torch._inductor.scheduler.SchedulerNode], None) -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4134,
    "func_name": "KernelGroup.new_kernel",
    "type_comments": [
      "(type) -> torch._inductor.codegen.cpp.CppKernel",
      "(type, *Union[int, torch.dtype]) -> torch._inductor.codegen.cpp.CppVecKernel"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4137,
    "func_name": "KernelGroup.finalize_kernel",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppKernelProxy, List[torch._inductor.scheduler.SchedulerNode]) -> None"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4143,
    "func_name": "KernelGroup.get_num_args",
    "type_comments": [
      "() -> int"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4148,
    "func_name": "KernelGroup.get_export_declaration",
    "type_comments": [
      "() -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4190,
    "func_name": "KernelGroup.call_kernel",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.WrapperCodeGen, str) -> None"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4226,
    "func_name": "WorkSharing.single",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4261,
    "func_name": "LoopLevel.__post_init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4273,
    "func_name": "LoopLevel.get_kernels",
    "type_comments": [
      "() -> List[torch._inductor.codegen.cpp.CppVecKernel]",
      "() -> List[torch._inductor.codegen.cpp.CppKernel]"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4282,
    "func_name": "LoopLevel.get_root",
    "type_comments": [
      "() -> torch._inductor.codegen.cpp.LoopLevel"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4289,
    "func_name": "LoopLevel.set_kernel",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppKernel) -> None",
      "(torch._inductor.codegen.cpp.CppVecKernel) -> None"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4302,
    "func_name": "LoopLevel.get_loops_at",
    "type_comments": [
      "(int) -> List[torch._inductor.codegen.cpp.LoopLevel]"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4311,
    "func_name": "LoopLevel.split_with_tiling",
    "type_comments": [
      "(int, int) -> Tuple[torch._inductor.codegen.cpp.LoopLevel, torch._inductor.codegen.cpp.LoopLevel]"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4312,
    "func_name": "clone_inner",
    "type_comments": [
      "() -> List"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4319,
    "func_name": "do_split_with_tiling",
    "type_comments": [
      "() -> Tuple[torch._inductor.codegen.cpp.LoopLevel, torch._inductor.codegen.cpp.LoopLevel]"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4368,
    "func_name": "LoopLevel.lines",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4418,
    "func_name": "build",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppKernel) -> torch._inductor.codegen.cpp.LoopNestWithSplit"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4445,
    "func_name": "LoopNestWithSplit.get_loops_at",
    "type_comments": [
      "(int) -> List[torch._inductor.codegen.cpp.LoopLevel]"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4453,
    "func_name": "max_parallel_depth",
    "type_comments": [
      "() -> int"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4472,
    "func_name": "LoopNestWithSplit.is_reduction_only",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4493,
    "func_name": "LoopNestWithSplit.split_with_tiling",
    "type_comments": [
      "(int, int) -> Tuple[torch._inductor.codegen.cpp.LoopLevel, torch._inductor.codegen.cpp.LoopLevel]"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 4507,
    "func_name": "LoopNestWithSplit.get_kernels",
    "type_comments": [
      "() -> List[torch._inductor.codegen.cpp.CppKernel]",
      "() -> List[Union[torch._inductor.codegen.cpp.CppKernel, torch._inductor.codegen.cpp.CppVecKernel]]"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp_utils.py",
    "line": 80,
    "func_name": "CppPrinter._print_Integer",
    "type_comments": [
      "(sympy.core.numbers.Integer) -> str",
      "(sympy.core.numbers.Zero) -> str"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp_utils.py",
    "line": 289,
    "func_name": "cexpr_index",
    "type_comments": [
      "(sympy.core.numbers.Zero) -> str",
      "(sympy.core.symbol.Symbol) -> str"
    ],
    "samples": 9
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1081,
    "func_name": "WrapperCodeGen.codegen_device_copy",
    "type_comments": [
      "(str, str) -> None"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1452,
    "func_name": "WrapperCodeGen.wrap_kernel_call",
    "type_comments": [
      "(str, List[str]) -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/wrapper.py",
    "line": 1979,
    "func_name": "static_shape_for_buffer_or_none",
    "type_comments": [
      "(torch._inductor.ir.StorageBox) -> List[int]",
      "(torch._inductor.ir.ComputedBuffer) -> List"
    ],
    "samples": 3
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 64,
    "func_name": "cpp_compiler_search",
    "type_comments": [
      "(Tuple[None, str]) -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 119,
    "func_name": "get_cpp_compiler",
    "type_comments": [
      "() -> str"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 139,
    "func_name": "_is_clang",
    "type_comments": [
      "(str) -> bool"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 167,
    "func_name": "get_compiler_version_info",
    "type_comments": [
      "(str) -> str"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 189,
    "func_name": "_append_list",
    "type_comments": [
      "(List, List) -> None",
      "(List, List[str]) -> None"
    ],
    "samples": 12
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 194,
    "func_name": "_remove_duplication_in_list",
    "type_comments": [
      "(List[str]) -> List[str]",
      "(List) -> List"
    ],
    "samples": 12
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 202,
    "func_name": "_create_if_dir_not_exist",
    "type_comments": [
      "(str) -> None"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 213,
    "func_name": "_remove_dir",
    "type_comments": [
      "(str) -> None"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 225,
    "func_name": "run_command_line",
    "type_comments": [
      "(str, str) -> bytes"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 254,
    "func_name": "BuildOptionsBase.__init__",
    "type_comments": [
      "(str, None, None, None, None, None, None, None, bool, bool, bool) -> None"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 282,
    "func_name": "BuildOptionsBase._remove_duplicate_options",
    "type_comments": [
      "() -> None"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 291,
    "func_name": "BuildOptionsBase.get_compiler",
    "type_comments": [
      "() -> str"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 294,
    "func_name": "BuildOptionsBase.get_definations",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 297,
    "func_name": "BuildOptionsBase.get_include_dirs",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 300,
    "func_name": "BuildOptionsBase.get_cflags",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 303,
    "func_name": "BuildOptionsBase.get_ldflags",
    "type_comments": [
      "() -> List"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 306,
    "func_name": "BuildOptionsBase.get_libraries_dirs",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 309,
    "func_name": "BuildOptionsBase.get_libraries",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 312,
    "func_name": "BuildOptionsBase.get_passthough_args",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 315,
    "func_name": "BuildOptionsBase.get_aot_mode",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 318,
    "func_name": "BuildOptionsBase.get_use_absolute_path",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 321,
    "func_name": "BuildOptionsBase.get_compile_only",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 343,
    "func_name": "_get_warning_all_cflag",
    "type_comments": [
      "(bool) -> List",
      "(bool) -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 350,
    "func_name": "_get_cpp_std_cflag",
    "type_comments": [
      "(str) -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 357,
    "func_name": "_get_linux_cpp_cflags",
    "type_comments": [
      "(str) -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 367,
    "func_name": "_get_optimization_cflags",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 392,
    "func_name": "_get_shared_cflag",
    "type_comments": [
      "(bool) -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 411,
    "func_name": "get_cpp_options",
    "type_comments": [
      "(str, bool, bool, Tuple[]) -> Tuple[List, List, List[str], List, List, List, List[str]]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 457,
    "func_name": "CppOptions.__init__",
    "type_comments": [
      "(bool, bool, Tuple[], bool) -> None"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 494,
    "func_name": "_get_glibcxx_abi_build_flags",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 501,
    "func_name": "_get_torch_cpp_wrapper_defination",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 505,
    "func_name": "_use_custom_generated_macros",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 509,
    "func_name": "_use_fb_internal_macros",
    "type_comments": [
      "() -> List"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 535,
    "func_name": "_setup_standard_sys_libs",
    "type_comments": [
      "(str, bool, bool) -> Tuple[List, List, List]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 574,
    "func_name": "_get_build_args_of_chosen_isa",
    "type_comments": [
      "(torch._inductor.cpu_vec_isa.VecAVX2) -> Tuple[List[str], List[str]]",
      "(torch._inductor.cpu_vec_isa.VecAVX512) -> Tuple[List[str], List[str]]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 595,
    "func_name": "_get_torch_related_args",
    "type_comments": [
      "(bool, bool) -> Tuple[List[str], List[str], List[str]]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 624,
    "func_name": "_get_python_include_dirs",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 637,
    "func_name": "_get_python_related_args",
    "type_comments": [
      "() -> Tuple[List[str], List[str]]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 687,
    "func_name": "_get_openmp_args",
    "type_comments": [
      "(str) -> Tuple[List[str], List, List, List, List[str], List]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 767,
    "func_name": "get_mmap_self_macro",
    "type_comments": [
      "(bool) -> List"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 774,
    "func_name": "get_cpp_torch_options",
    "type_comments": [
      "(str, torch._inductor.cpu_vec_isa.VecAVX2, bool, bool, bool, bool, bool) -> Tuple[List[str], List[str], List[str], List, List[str], List[str], List[str]]",
      "(str, torch._inductor.cpu_vec_isa.VecAVX512, bool, bool, bool, bool, bool) -> Tuple[List[str], List[str], List[str], List, List[str], List[str], List[str]]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 871,
    "func_name": "CppTorchOptions.__init__",
    "type_comments": [
      "(torch._inductor.cpu_vec_isa.VecAVX2, bool, bool, bool, bool, bool, bool, bool, Tuple[]) -> None",
      "(torch._inductor.cpu_vec_isa.VecAVX512, bool, bool, bool, bool, bool, bool, bool, Tuple[]) -> None"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 924,
    "func_name": "_set_gpu_runtime_env",
    "type_comments": [
      "() -> None"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 951,
    "func_name": "get_cpp_torch_cuda_options",
    "type_comments": [
      "(bool, bool) -> Tuple[List, List[str], List, List, List[str], List, List]"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 1029,
    "func_name": "CppTorchCudaOptions.__init__",
    "type_comments": [
      "(torch._inductor.cpu_vec_isa.VecAVX512, bool, bool, bool, bool, bool, bool, bool, Tuple[]) -> None"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 1083,
    "func_name": "get_name_and_dir_from_output_file_path",
    "type_comments": [
      "(str) -> Tuple[str, str]"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 1124,
    "func_name": "__get_python_module_ext",
    "type_comments": [
      "() -> str"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 1132,
    "func_name": "CppBuilder.__init__",
    "type_comments": [
      "(str, List[str], torch._inductor.cpp_builder.CppTorchOptions, str) -> None",
      "(str, str, torch._inductor.cpp_builder.CppTorchCudaOptions, str) -> None"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 1233,
    "func_name": "CppBuilder.get_command_line",
    "type_comments": [
      "() -> str"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 1234,
    "func_name": "format_build_command",
    "type_comments": [
      "(str, str, str, str, str, str, str, str, str, str) -> str"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 1280,
    "func_name": "CppBuilder.get_target_file_path",
    "type_comments": [
      "() -> str"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpp_builder.py",
    "line": 1283,
    "func_name": "CppBuilder.build",
    "type_comments": [
      "() -> Tuple[bytes, str]"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 18,
    "func_name": "_get_isa_dry_compile_fingerprint",
    "type_comments": [
      "(str) -> str"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 75,
    "func_name": "VecISA.bit_width",
    "type_comments": [
      "() -> int"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 78,
    "func_name": "VecISA.nelements",
    "type_comments": [
      "(torch.dtype) -> int"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 81,
    "func_name": "VecISA.build_macro",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 84,
    "func_name": "VecISA.build_arch_flags",
    "type_comments": [
      "() -> str"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 87,
    "func_name": "VecAVX2.__hash__",
    "type_comments": [
      "() -> int"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 87,
    "func_name": "VecAVX512.__hash__",
    "type_comments": [
      "() -> int"
    ],
    "samples": 9
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 90,
    "func_name": "VecISA.check_build",
    "type_comments": [
      "(str) -> bool"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 133,
    "func_name": "__bool__",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 153,
    "func_name": "VecNEON.__str__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 170,
    "func_name": "VecAVX512.__str__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 11
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 180,
    "func_name": "VecAMX.__str__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 225,
    "func_name": "VecAVX2.__str__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 263,
    "func_name": "x86_isa_checker",
    "type_comments": [
      "() -> List[str]"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 266,
    "func_name": "_check_and_append_supported_isa",
    "type_comments": [
      "(List, bool, str) -> None",
      "(List[str], bool, str) -> None"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 297,
    "func_name": "valid_vec_isa_list",
    "type_comments": [
      "() -> List[Union[torch._inductor.cpu_vec_isa.VecAVX2, torch._inductor.cpu_vec_isa.VecAVX512]]"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cpu_vec_isa.py",
    "line": 334,
    "func_name": "pick_vec_isa",
    "type_comments": [
      "() -> torch._inductor.cpu_vec_isa.VecAVX512"
    ],
    "samples": 11
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 120,
    "func_name": "floordiv",
    "type_comments": [
      "(torch._inductor.index_propagation.TypedExpr, torch._inductor.index_propagation.TypedExpr) -> torch._inductor.index_propagation.TypedExpr"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 2065,
    "func_name": "BaseView.is_extern",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 3921,
    "func_name": "InputsKernel.is_extern",
    "type_comments": [
      "() -> bool"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5222,
    "func_name": "create",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.device) -> torch._inductor.ir.DeviceCopy"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 5247,
    "func_name": "DeviceCopy.codegen",
    "type_comments": [
      "(torch._inductor.codegen.wrapper.WrapperCodeGen) -> None"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 626,
    "func_name": "_device_put",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.device) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5318,
    "func_name": "floordiv",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 903,
    "func_name": "IndentedBuffer.map",
    "type_comments": [
      "(function) -> torch._inductor.utils.IndentedBuffer"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1312,
    "func_name": "developer_warning",
    "type_comments": [
      "(str) -> None"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1390,
    "func_name": "parallel_num_threads",
    "type_comments": [
      "() -> int"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/virtualized.py",
    "line": 357,
    "func_name": "local_buffer_context",
    "type_comments": [
      "() -> torch._inductor.virtualized.NullHandler"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 1021,
    "func_name": "is_index_put_and_requires_h2d_sync_for_cuda_value",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 13
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 1074,
    "func_name": "ConstructorMoverPass.allow_cpu_device",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 13
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 1088,
    "func_name": "ConstructorMoverPass.cannot_be_moved",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 13
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 1115,
    "func_name": "ConstructorMoverPass.get_cpu_indeg_count",
    "type_comments": [
      "(torch.fx.graph.Graph) -> collections.Counter"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 1124,
    "func_name": "add_cpu_inp",
    "type_comments": [
      "(torch.fx.node.Node) -> None"
    ],
    "samples": 85
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 1170,
    "func_name": "ConstructorMoverPass.find_movable_constructors",
    "type_comments": [
      "(torch.fx.graph.Graph, List[torch.fx.node.Node]) -> Set"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/post_grad.py",
    "line": 1192,
    "func_name": "make_dependencies_equivalent",
    "type_comments": [
      "(Set[torch.fx.node.Node], Set) -> Set[torch.fx.node.Node]"
    ],
    "samples": 13
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 452,
    "func_name": "Loops.inner_fn_str",
    "type_comments": [
      "() -> str"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6058,
    "func_name": "should_realize_on_cpu",
    "type_comments": [
      "(torch._inductor.ir.Pointwise) -> bool"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 859,
    "func_name": "ir_to_string",
    "type_comments": [
      "(function, List, None) -> str"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 915,
    "func_name": "KernelFormatterHandler.getvalue",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue) -> str"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1528,
    "func_name": "split",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int, int, bool) -> List[torch._inductor.ir.TensorBox]"
    ],
    "samples": 35
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 1939,
    "func_name": "scan",
    "type_comments": [
      "(Tuple[torch.dtype], function, Tuple[torch._inductor.codegen.triton.TritonCSEVariable]) -> Tuple[torch._inductor.codegen.triton.TritonCSEVariable]"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 838,
    "func_name": "logical_or",
    "type_comments": [
      "(str, torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1091,
    "func_name": "HelperFunctions.add",
    "type_comments": [
      "(str, str) -> str"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2100,
    "func_name": "TritonKernel._lift_helper",
    "type_comments": [
      "(function, int) -> str"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2118,
    "func_name": "CSEProxy",
    "type_comments": [
      "() -> None"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2119,
    "func_name": "CSEProxy.__getattr__",
    "type_comments": [
      "(str) -> function"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2120,
    "func_name": "inner",
    "type_comments": [
      "(*str) -> torch._inductor.codegen.triton.TritonCSEVariable"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2137,
    "func_name": "TritonKernel.scan",
    "type_comments": [
      "(Tuple[torch.dtype], function, Tuple[torch._inductor.codegen.triton.TritonCSEVariable]) -> Tuple[torch._inductor.codegen.triton.TritonCSEVariable]"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2189,
    "func_name": "csv",
    "type_comments": [
      "(List[torch._inductor.codegen.triton.TritonCSEVariable]) -> str"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2192,
    "func_name": "cse_multiple",
    "type_comments": [
      "(str, int, List[str]) -> Tuple[torch._inductor.codegen.triton.TritonCSEVariable]",
      "(str, int, List) -> Tuple[torch._inductor.codegen.triton.TritonCSEVariable]"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1616,
    "func_name": "Scan.get_unbacked_symbol_uses",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1626,
    "func_name": "Scan.__post_init__",
    "type_comments": [
      "() -> None"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1630,
    "func_name": "Scan.store_reduction",
    "type_comments": [
      "(str, function, Tuple[sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(str, function, Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 16
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1636,
    "func_name": "Scan.get_reduction_type",
    "type_comments": [
      "() -> str"
    ],
    "samples": 20
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1640,
    "func_name": "Scan.get_reduction_size",
    "type_comments": [
      "() -> List[sympy.core.numbers.Integer]",
      "() -> List[sympy.core.symbol.Symbol]"
    ],
    "samples": 20
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1643,
    "func_name": "Scan.get_size",
    "type_comments": [
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]]",
      "() -> List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]]",
      "() -> List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1646,
    "func_name": "Scan.get_pointwise_size",
    "type_comments": [
      "() -> List[sympy.core.numbers.One]",
      "() -> List[sympy.core.symbol.Symbol]"
    ],
    "samples": 20
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1658,
    "func_name": "Scan.inner_fn_free_unbacked_symbols",
    "type_comments": [
      "() -> Set"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1664,
    "func_name": "create",
    "type_comments": [
      "(torch.device, Tuple[torch.dtype], Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], sympy.core.numbers.One, function, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, Tuple[torch.dtype], Tuple[function], List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], sympy.core.numbers.One, function, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]",
      "(torch.device, Tuple[torch.dtype], Tuple[function], List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], sympy.core.numbers.One, function, torch._inductor.runtime.hints.ReductionHint) -> List[torch._inductor.ir.TensorBox]"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1724,
    "func_name": "reindex",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> List[sympy.core.symbol.Symbol]",
      "(Tuple[sympy.core.numbers.Zero], Tuple[sympy.core.symbol.Symbol]) -> List[Union[sympy.core.numbers.Zero, sympy.core.symbol.Symbol]]"
    ],
    "samples": 20
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1755,
    "func_name": "num_splits",
    "type_comments": [
      "(torch.device, torch.dtype, function, sympy.core.numbers.One, List[sympy.core.numbers.One], List[sympy.core.symbol.Symbol], function, sympy.core.symbol.Symbol) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, function, sympy.core.numbers.One, List[sympy.core.numbers.One], List[sympy.core.numbers.Integer], function, sympy.core.numbers.Integer) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]",
      "(torch.device, torch.dtype, function, sympy.core.numbers.One, List[sympy.core.symbol.Symbol], List[sympy.core.numbers.Integer], function, sympy.core.numbers.Integer) -> Tuple[torch._inductor.runtime.hints.ReductionHint, int]"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 1768,
    "func_name": "wrapper_fn",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol], Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6642,
    "func_name": "scan",
    "type_comments": [
      "(Tuple[torch.dtype], function, Tuple[torch.fx.proxy.Proxy]) -> Tuple[torch.fx.proxy.Proxy]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 6650,
    "func_name": "shim",
    "type_comments": [
      "(Tuple[torch.dtype], Tuple[torch._inductor.codegen.triton.TritonCSEVariable]) -> Tuple[torch._inductor.codegen.triton.TritonCSEVariable]",
      "(Tuple[torch.dtype], Tuple[str]) -> Tuple[str]",
      "(Tuple[torch.dtype], Tuple[torch._inductor.index_propagation.IndexPropVar]) -> Tuple[torch._inductor.index_propagation.IndexPropVar]"
    ],
    "samples": 12
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 975,
    "func_name": "as_strided",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, torch.fx.immutable_collections.immutable_list, None) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2319,
    "func_name": "copy",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3522,
    "func_name": "rev",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3528,
    "func_name": "loader",
    "type_comments": [
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Zero, sympy.core.symbol.Symbol, sympy.core.numbers.Zero, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5042,
    "func_name": "_make_scan_inner",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int, torch.dtype) -> Dict[str, Union[List[Union[sympy.core.numbers.Integer, sympy.core.symbol.Symbol]], Tuple[function], Tuple[torch.dtype], sympy.core.numbers.One, torch.device]]",
      "(torch._inductor.ir.TensorBox, int, torch.dtype) -> Dict[str, Union[List[Union[sympy.core.numbers.One, sympy.core.symbol.Symbol]], Tuple[function], Tuple[torch.dtype], sympy.core.numbers.One, torch.device]]",
      "(torch._inductor.ir.TensorBox, int, torch.dtype) -> Dict[str, Union[List[Union[sympy.core.numbers.Integer, sympy.core.numbers.One]], Tuple[function], Tuple[torch.dtype], sympy.core.numbers.One, torch.device]]"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5465,
    "func_name": "cumsum",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int, None) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 4
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5477,
    "func_name": "combine_fn",
    "type_comments": [
      "(Tuple[str], Tuple[str]) -> Tuple[torch._inductor.virtualized.OpsValue]",
      "(Tuple[torch._inductor.codegen.triton.TritonCSEVariable], Tuple[torch._inductor.codegen.triton.TritonCSEVariable]) -> Tuple[torch._inductor.virtualized.OpsValue]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5606,
    "func_name": "reduce_any",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, None, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 3
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5976,
    "func_name": "sym_stride",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int) -> sympy.core.numbers.Integer"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ops_handler.py",
    "line": 794,
    "func_name": "scan",
    "type_comments": [
      "(Tuple[torch.dtype], function, Tuple[str]) -> Tuple[str]"
    ],
    "samples": 16
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/common.py",
    "line": 834,
    "func_name": "remainder",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppCSEVariable, torch._inductor.codegen.cpp.CppCSEVariable) -> torch._inductor.virtualized.OpsValue",
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 576,
    "func_name": "add",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppCSEVariable, torch._inductor.codegen.cpp.CppCSEVariable) -> str"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 584,
    "func_name": "mul",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppCSEVariable, torch._inductor.codegen.cpp.CppCSEVariable) -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 647,
    "func_name": "abs",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppCSEVariable) -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 716,
    "func_name": "signbit",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppCSEVariable) -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 751,
    "func_name": "truncdiv",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppCSEVariable, torch._inductor.codegen.cpp.CppCSEVariable) -> str"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 869,
    "func_name": "where",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppCSEVariable, torch._inductor.codegen.cpp.CppCSEVariable, torch._inductor.codegen.cpp.CppCSEVariable) -> str"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 873,
    "func_name": "mod",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppCSEVariable, torch._inductor.codegen.cpp.CppCSEVariable) -> str"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 877,
    "func_name": "constant",
    "type_comments": [
      "(int, torch.dtype) -> str"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 921,
    "func_name": "logical_not",
    "type_comments": [
      "(torch._inductor.codegen.cpp.CppCSEVariable) -> str"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2846,
    "func_name": "CppVecKernelChecker.disable_vec",
    "type_comments": [
      "(str) -> None"
    ],
    "samples": 3
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2937,
    "func_name": "__getattr__",
    "type_comments": [
      "(str) -> function"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2939,
    "func_name": "inner",
    "type_comments": [
      "(*bool) -> bool",
      "(*Union[bool, int]) -> bool",
      "(*int) -> bool"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 2970,
    "func_name": "constant",
    "type_comments": [
      "(int, torch.dtype) -> int"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3144,
    "func_name": "CppKernelProxy.legalize_lowp_fp_dtype_loopbody",
    "type_comments": [
      "(torch._inductor.ir.LoopBody) -> None"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3145,
    "func_name": "add_to_dtype",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3146,
    "func_name": "is_lowp_fp_load",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3153,
    "func_name": "is_lowp_fp_store",
    "type_comments": [
      "(torch.fx.node.Node) -> bool"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3236,
    "func_name": "eliminate_to_dtype",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp.py",
    "line": 3237,
    "func_name": "_eliminate_duplicate_to_node",
    "type_comments": [
      "(torch.fx.graph.Graph) -> None"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/cpp_utils.py",
    "line": 293,
    "func_name": "value_to_cpp",
    "type_comments": [
      "(int, str) -> str"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 875,
    "func_name": "randn",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 909,
    "func_name": "signbit",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 922,
    "func_name": "log",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 18
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 1888,
    "func_name": "final_argreduce",
    "type_comments": [
      "(torch._inductor.utils.IndentedBuffer, torch._inductor.codegen.triton.TritonCSEVariable, str, str) -> None"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_utils.py",
    "line": 51,
    "func_name": "format_default_skip_message",
    "type_comments": [
      "(str) -> str"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/cudagraph_utils.py",
    "line": 100,
    "func_name": "get_use_stack_trace",
    "type_comments": [
      "(torch.fx.node.Node) -> str"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 137,
    "func_name": "remainder",
    "type_comments": [
      "(torch._inductor.index_propagation.TypedExpr, torch._inductor.index_propagation.TypedExpr) -> torch._inductor.index_propagation.TypedExpr"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 494,
    "func_name": "nop_loader_fn",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol, sympy.core.symbol.Symbol, sympy.core.symbol.Symbol], torch.dtype) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 155,
    "func_name": "decode_dtype",
    "type_comments": [
      "(torch.dtype) -> torch.dtype"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2487,
    "func_name": "_unwrap",
    "type_comments": [
      "(float) -> float",
      "(List[float]) -> pyannotate_runtime.collect_types.UnknownType",
      "(int) -> int"
    ],
    "samples": 17
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2493,
    "func_name": "tensor",
    "type_comments": [
      "(int, torch.dtype, torch.device, torch.layout, bool) -> torch._inductor.ir.TensorBox",
      "(List[float], torch.dtype, torch.device, None, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2511,
    "func_name": "inner_fn",
    "type_comments": [
      "(Tuple[]) -> torch._inductor.virtualized.OpsValue",
      "(List) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 3
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2683,
    "func_name": "empty",
    "type_comments": [
      "(None, torch.dtype, torch.layout, torch.device, bool, None, *torch.fx.immutable_collections.immutable_list) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2760,
    "func_name": "empty_strided",
    "type_comments": [
      "(Tuple[int, int, int], None, torch.dtype, torch.layout, torch.device, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3241,
    "func_name": "scatter",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 3279,
    "func_name": "scatter_",
    "type_comments": [
      "(int, torch._inductor.ir.TensorBox, torch._inductor.ir.TensorBox, None) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5323,
    "func_name": "truncdiv",
    "type_comments": [
      "(torch._inductor.virtualized.OpsValue, torch._inductor.virtualized.OpsValue) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/utils.py",
    "line": 1580,
    "func_name": "disable",
    "type_comments": [
      "(torch._inductor.utils.BoxedBool) -> torch._inductor.utils.BoxedBool"
    ],
    "samples": 1
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/index_propagation.py",
    "line": 116,
    "func_name": "neg",
    "type_comments": [
      "(torch._inductor.index_propagation.TypedExpr) -> torch._inductor.index_propagation.TypedExpr"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/ir.py",
    "line": 4526,
    "func_name": "require_channels_last",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 38
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/decomposition.py",
    "line": 158,
    "func_name": "empty_permuted",
    "type_comments": [
      "(List[Union[int, torch.SymInt]], List[int]) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 854,
    "func_name": "bitwise_or",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable, torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 7
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2101,
    "func_name": "is_aligned",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> bool"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 682,
    "func_name": "expm1",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/scheduler.py",
    "line": 1422,
    "func_name": "NodeUser.merge",
    "type_comments": [
      "(torch._inductor.scheduler.NodeUser) -> torch._inductor.scheduler.NodeUser"
    ],
    "samples": 3
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 925,
    "func_name": "inner_fn",
    "type_comments": [
      "(Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 30
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 631,
    "func_name": "SizeVarAllocator.combine_modular_indexing_pairs",
    "type_comments": [
      "(torch.utils._sympy.functions.ModularIndexing) -> torch.utils._sympy.functions.ModularIndexing"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/sizevars.py",
    "line": 642,
    "func_name": "_check_args",
    "type_comments": [
      "(sympy.core.symbol.Symbol, sympy.core.numbers.One, sympy.core.numbers.Integer, bool) -> bool",
      "(torch.utils._sympy.functions.ModularIndexing, sympy.core.numbers.One, sympy.core.numbers.Integer, bool) -> bool"
    ],
    "samples": 10
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/compile_fx.py",
    "line": 1205,
    "func_name": "fw_compiler_freezing",
    "type_comments": [
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]], torch.fx.GraphModule, int, function, torch._inductor.utils.BoxedBool, int, torch._inductor.cudagraph_utils.BoxedDeviceIndex) -> function",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch.fx.GraphModule, int, function, torch._inductor.utils.BoxedBool, int, torch._inductor.cudagraph_utils.BoxedDeviceIndex) -> function",
      "(torch.fx.GraphModule, List, torch.fx.GraphModule, int, function, torch._inductor.utils.BoxedBool, int, torch._inductor.cudagraph_utils.BoxedDeviceIndex) -> function",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor], torch.fx.GraphModule, int, function, torch._inductor.utils.BoxedBool, int, torch._inductor.cudagraph_utils.BoxedDeviceIndex) -> pyannotate_runtime.collect_types.NoReturnType"
    ],
    "samples": 37
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/constant_folding.py",
    "line": 18,
    "func_name": "replace_node_with_constant",
    "type_comments": [
      "(torch.fx.GraphModule, torch.fx.node.Node, torch.Tensor, None) -> None",
      "(torch.fx.GraphModule, torch.fx.node.Node, torch.nn.parameter.Parameter, None) -> None"
    ],
    "samples": 242
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/constant_folding.py",
    "line": 67,
    "func_name": "ConstantFolder._deduce_value",
    "type_comments": [
      "(torch.fx.node.Node) -> Tuple[torch.Tensor, torch.Tensor]",
      "(torch.fx.node.Node) -> torch.nn.parameter.Parameter",
      "(torch.fx.node.Node) -> torch.Tensor"
    ],
    "samples": 529
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/constant_folding.py",
    "line": 199,
    "func_name": "ConstantFolder.insertable_tensor_check",
    "type_comments": [
      "(torch.Tensor) -> bool"
    ],
    "samples": 271
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/constant_folding.py",
    "line": 202,
    "func_name": "ConstantFolder.add_node_replacement",
    "type_comments": [
      "(torch.fx.node.Node, torch.Tensor) -> None"
    ],
    "samples": 271
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/constant_folding.py",
    "line": 210,
    "func_name": "ConstantFolder.insert_placerholder_values",
    "type_comments": [
      "(Dict) -> None"
    ],
    "samples": 122
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/constant_folding.py",
    "line": 215,
    "func_name": "constant_fold",
    "type_comments": [
      "(torch.fx.GraphModule, None) -> None"
    ],
    "samples": 122
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/freezing.py",
    "line": 28,
    "func_name": "replace_params_with_constants",
    "type_comments": [
      "(torch.fx.GraphModule, List, torch._functorch._aot_autograd.schemas.ViewAndMutationMeta) -> List",
      "(torch.fx.GraphModule, List[torch.nn.parameter.Parameter], torch._functorch._aot_autograd.schemas.ViewAndMutationMeta) -> List[int]",
      "(torch.fx.GraphModule, List[torch.Tensor], torch._functorch._aot_autograd.schemas.ViewAndMutationMeta) -> List[int]",
      "(torch.fx.GraphModule, List, torch._functorch._aot_autograd.schemas.ViewAndMutationMeta) -> List[int]"
    ],
    "samples": 35
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/freezing.py",
    "line": 67,
    "func_name": "freeze",
    "type_comments": [
      "(torch.fx.GraphModule, torch.fx.GraphModule, List) -> Tuple[torch.fx.GraphModule, List]",
      "(torch.fx.GraphModule, torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor]) -> Tuple[torch.fx.GraphModule, List[int]]",
      "(torch.fx.GraphModule, torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]]) -> Tuple[torch.fx.GraphModule, List[int]]"
    ],
    "samples": 37
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/freezing.py",
    "line": 125,
    "func_name": "ErasedTensor",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/binary_folding.py",
    "line": 45,
    "func_name": "mark_mixed_dtype_allowed_convs",
    "type_comments": [
      "(torch.fx.GraphModule) -> None"
    ],
    "samples": 38
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/binary_folding.py",
    "line": 56,
    "func_name": "recover_original_precision_folded_convs",
    "type_comments": [
      "(torch.fx.GraphModule) -> None"
    ],
    "samples": 38
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/binary_folding.py",
    "line": 83,
    "func_name": "binary_folding_init",
    "type_comments": [
      "() -> None"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/freezing_patterns.py",
    "line": 35,
    "func_name": "freezing_passes",
    "type_comments": [
      "(torch.fx.GraphModule, List[Union[torch.SymInt, torch._subclasses.fake_tensor.FakeTensor]]) -> None",
      "(torch.fx.GraphModule, List[torch._subclasses.fake_tensor.FakeTensor]) -> None",
      "(torch.fx.GraphModule, List) -> None"
    ],
    "samples": 37
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/freezing_patterns.py",
    "line": 85,
    "func_name": "lazy_init",
    "type_comments": [
      "() -> None"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/freezing_patterns.py",
    "line": 98,
    "func_name": "register_freezing_graph_pattern",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, function, int) -> function"
    ],
    "samples": 75
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/freezing_patterns.py",
    "line": 106,
    "func_name": "register_binary_folding_pattern",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, function) -> function"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/freezing_patterns.py",
    "line": 114,
    "func_name": "addmm_patterns_init",
    "type_comments": [
      "() -> None"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/freezing_patterns.py",
    "line": 149,
    "func_name": "matmul_fuse_pattern",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/freezing_patterns.py",
    "line": 167,
    "func_name": "matmul_fuse_pattern_two",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/freezing_patterns.py",
    "line": 185,
    "func_name": "addmm_fuse_pattern_second",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]"
    ],
    "samples": 34
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/freezing_patterns.py",
    "line": 208,
    "func_name": "same_dtype",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 83
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 729,
    "func_name": "_recover_linear",
    "type_comments": [
      "() -> None"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 928,
    "func_name": "_is_packable_linear",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 52
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 1027,
    "func_name": "_register_weight_pack_pass",
    "type_comments": [
      "() -> None"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 1206,
    "func_name": "_eliminate_duplicate_packed_nodes",
    "type_comments": [
      "(torch.fx.GraphModule) -> None"
    ],
    "samples": 37
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 1260,
    "func_name": "_mkldnn_weight_pack_init",
    "type_comments": [
      "() -> None"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 81,
    "func_name": "_may_generate_pattern_with_reshape",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.KeywordArg, bool) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 75
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 92,
    "func_name": "_generate_linear_t_pattern",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch.dtype) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 75
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1573,
    "func_name": "_is_valid_dequant_promotion_pattern",
    "type_comments": [
      "(torch.dtype) -> function"
    ],
    "samples": 75
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1619,
    "func_name": "_register_dequant_promotion_pass",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, int, torch.dtype) -> None"
    ],
    "samples": 75
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1719,
    "func_name": "_is_valid_dequant_conv2d_pattern",
    "type_comments": [
      "(torch.dtype) -> function"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1756,
    "func_name": "_register_qconv_weight_prepack_pass",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, int, torch.dtype) -> None"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1899,
    "func_name": "_generate_dequant_convolution_node_pattern",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch.dtype) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 60
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 1922,
    "func_name": "_generate_qconv_weight_prepack_patterns",
    "type_comments": [
      "(torch.dtype) -> Tuple[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.CallFunction]"
    ],
    "samples": 30
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 2003,
    "func_name": "_is_valid_dequant_linear_pattern",
    "type_comments": [
      "(torch.dtype, bool, bool) -> function"
    ],
    "samples": 75
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 2075,
    "func_name": "_register_qlinear_weight_prepack_pass",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, int, torch.dtype, bool, bool) -> None"
    ],
    "samples": 75
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 2240,
    "func_name": "_generate_dequant_linear_node_pattern",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch.dtype, bool, bool) -> Tuple[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.CallFunction]"
    ],
    "samples": 75
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 2286,
    "func_name": "_generate_dequant_bmm_node_pattern",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, torch.dtype, bool, bool) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 75
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 2314,
    "func_name": "_generate_pattern_with_output_add",
    "type_comments": [
      "(torch._inductor.pattern_matcher.CallFunction, bool) -> torch._inductor.pattern_matcher.CallFunction"
    ],
    "samples": 75
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 2327,
    "func_name": "_generate_qlinear_weight_prepack_patterns",
    "type_comments": [
      "(torch.dtype, bool, bool, bool, bool) -> Tuple[torch._inductor.pattern_matcher.CallFunction, torch._inductor.pattern_matcher.CallFunction]"
    ],
    "samples": 75
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 2350,
    "func_name": "_register_dequant_promotion",
    "type_comments": [
      "() -> None"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 2392,
    "func_name": "_register_qconv_weight_prepack",
    "type_comments": [
      "() -> None"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 2402,
    "func_name": "_register_qlinear_weight_prepack",
    "type_comments": [
      "() -> None"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/quantization.py",
    "line": 2484,
    "func_name": "_register_quantization_weight_pack_pass",
    "type_comments": [
      "() -> None"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2518,
    "func_name": "inner_fn",
    "type_comments": [
      "(Tuple[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.add.Add]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.numbers.Zero]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.Integer]) -> torch._inductor.virtualized.OpsValue",
      "(List[sympy.core.symbol.Symbol]) -> torch._inductor.virtualized.OpsValue",
      "(Tuple[sympy.core.numbers.One]) -> torch._inductor.virtualized.OpsValue"
    ],
    "samples": 44
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 2519,
    "func_name": "binary_search",
    "type_comments": [
      "(int, int) -> torch._inductor.virtualized.OpsValue",
      "(int, int) -> pyannotate_runtime.collect_types.UnknownType"
    ],
    "samples": 173
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 418,
    "func_name": "ExclusiveKeywordArg.__init__",
    "type_comments": [
      "(str) -> None"
    ],
    "samples": 97
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 422,
    "func_name": "ExclusiveKeywordArg.__repr__",
    "type_comments": [
      "() -> str"
    ],
    "samples": 75
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/pattern_matcher.py",
    "line": 425,
    "func_name": "ExclusiveKeywordArg._match",
    "type_comments": [
      "(torch.fx.node.Node, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.Match",
      "(torch.fx.node.Node, torch._inductor.pattern_matcher.MatchContext) -> torch._inductor.pattern_matcher.FailedMatch"
    ],
    "samples": 105
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/freezing_patterns.py",
    "line": 123,
    "func_name": "check_concat_weights",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 20
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/freezing_patterns.py",
    "line": 192,
    "func_name": "addmm_fuse_replacement_second",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor) -> Tuple[torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor]"
    ],
    "samples": 20
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 5179,
    "func_name": "var_",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, torch.fx.immutable_collections.immutable_list, float, bool) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 5
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/freezing.py",
    "line": 185,
    "func_name": "enforce_output_layout",
    "type_comments": [
      "(torch.fx.GraphModule) -> None"
    ],
    "samples": 9
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/freezing.py",
    "line": 216,
    "func_name": "enforce_as_strided_input_layout",
    "type_comments": [
      "(torch.fx.GraphModule) -> None"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/freezing.py",
    "line": 241,
    "func_name": "convert_conv_weights_to_channels_last",
    "type_comments": [
      "(torch.fx.GraphModule) -> None"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/binary_folding.py",
    "line": 15,
    "func_name": "mark_mixed_dtype_conv",
    "type_comments": [
      "(torch.fx.node.Node) -> None"
    ],
    "samples": 41
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/binary_folding.py",
    "line": 107,
    "func_name": "_op_not_broadcasting_with_conv",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, torch._subclasses.fake_tensor.FakeTensor) -> bool"
    ],
    "samples": 35
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/binary_folding.py",
    "line": 129,
    "func_name": "_check_conv_and_broadcast_op",
    "type_comments": [
      "(torch.fx.node.Node, torch.fx.node.Node) -> bool"
    ],
    "samples": 38
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/binary_folding.py",
    "line": 179,
    "func_name": "_is_foldable_pattern",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 38
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/binary_folding.py",
    "line": 191,
    "func_name": "resize_scalar_or_tensor_to_shape",
    "type_comments": [
      "(torch.fx.graph.Graph, torch.fx.node.Node, Tuple[int, int, int, int]) -> torch.fx.node.Node",
      "(torch.fx.graph.Graph, torch.fx.node.Node, Tuple[int]) -> torch.fx.node.Node"
    ],
    "samples": 45
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/binary_folding.py",
    "line": 213,
    "func_name": "_create_new_conv_node",
    "type_comments": [
      "(torch.fx.graph.Graph, torch.fx.node.Node, torch.fx.node.Node, torch.fx.node.Node) -> torch.fx.node.Node"
    ],
    "samples": 35
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/binary_folding.py",
    "line": 255,
    "func_name": "folded_op",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match, *Optional[Union[torch.fx.immutable_collections.immutable_list, torch.fx.node.Node]]) -> None",
      "(torch._inductor.pattern_matcher.Match, *Union[torch.fx.immutable_collections.immutable_list, torch.fx.node.Node]) -> None"
    ],
    "samples": 35
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/freezing_patterns.py",
    "line": 212,
    "func_name": "unnecessary_dtype_convert",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> None"
    ],
    "samples": 45
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/mkldnn_fusion.py",
    "line": 877,
    "func_name": "_is_packable_convolution",
    "type_comments": [
      "(torch._inductor.pattern_matcher.Match) -> bool"
    ],
    "samples": 49
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/graph.py",
    "line": 609,
    "func_name": "GraphLowering.find_nodes_prefer_channels_last",
    "type_comments": [
      "() -> Set[torch.fx.node.Node]"
    ],
    "samples": 8
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/inductor_prims.py",
    "line": 40,
    "func_name": "eager_force_stride",
    "type_comments": [
      "(torch._subclasses.fake_tensor.FakeTensor, List) -> torch._subclasses.fake_tensor.FakeTensor",
      "(torch._subclasses.fake_tensor.FakeTensor, List[int]) -> torch._subclasses.fake_tensor.FakeTensor"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1879,
    "func_name": "inductor_force_stride_order",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, Tuple[]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[int, int, int, int]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[int, int, int]) -> torch._inductor.ir.TensorBox",
      "(torch._inductor.ir.TensorBox, Tuple[int, int]) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 14
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pre_grad.py",
    "line": 301,
    "func_name": "remove_identity",
    "type_comments": [
      "(torch.fx.GraphModule) -> torch.fx.GraphModule"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pre_grad.py",
    "line": 306,
    "func_name": "IdentityRemover",
    "type_comments": [
      "() -> cell"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pre_grad.py",
    "line": 317,
    "func_name": "fuse_conv_bn",
    "type_comments": [
      "(torch.fx.GraphModule, bool) -> torch.fx.GraphModule"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_passes/pre_grad.py",
    "line": 333,
    "func_name": "ConvBNFusion",
    "type_comments": [
      "() -> None"
    ],
    "samples": 6
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/fx_utils.py",
    "line": 23,
    "func_name": "matches_module_function_pattern",
    "type_comments": [
      "(Tuple[type, function], torch.fx.node.Node, Dict[str, torch.fx.GraphModule]) -> bool"
    ],
    "samples": 30
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 934,
    "func_name": "isnan",
    "type_comments": [
      "(torch._inductor.codegen.triton.TritonCSEVariable) -> str"
    ],
    "samples": 19
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/codegen/triton.py",
    "line": 2214,
    "func_name": "sum_fn",
    "type_comments": [
      "(Tuple[str], Tuple[str]) -> List[torch._inductor.codegen.triton.TritonCSEVariable]"
    ],
    "samples": 2
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 816,
    "func_name": "isnan",
    "type_comments": [
      "(torch._inductor.ir.TensorBox) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 15
  },
  {
    "path": "/data/users/eellison/pytorch/torch/_inductor/lowering.py",
    "line": 1615,
    "func_name": "glu",
    "type_comments": [
      "(torch._inductor.ir.TensorBox, int) -> torch._inductor.ir.TensorBox"
    ],
    "samples": 10
  }
]